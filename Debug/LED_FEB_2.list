
LED_FEB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a6c  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08008b2c  08008b2c  00009b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e3c  08008e3c  0000a0e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e3c  08008e3c  00009e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e44  08008e44  0000a0e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e44  08008e44  00009e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e48  08008e48  00009e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08008e4c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001390  200000e4  08008f30  0000a0e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001474  08008f30  0000a474  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a0e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016829  00000000  00000000  0000a10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a3f  00000000  00000000  00020935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  00024378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001154  00000000  00000000  000259d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018320  00000000  00000000  00026b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ec8  00000000  00000000  0003ee4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f9b  00000000  00000000  00056d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eacaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005450  00000000  00000000  000eacf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f0144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000e4 	.word	0x200000e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008b14 	.word	0x08008b14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000e8 	.word	0x200000e8
 8000104:	08008b14 	.word	0x08008b14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	4a06      	ldr	r2, [pc, #24]	@ (8000484 <vApplicationGetIdleTaskMemory+0x28>)
 800046c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	4a05      	ldr	r2, [pc, #20]	@ (8000488 <vApplicationGetIdleTaskMemory+0x2c>)
 8000472:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2280      	movs	r2, #128	@ 0x80
 8000478:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b004      	add	sp, #16
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	20000100 	.word	0x20000100
 8000488:	20000154 	.word	0x20000154

0800048c <modbusBufferModeRTU>:

/**
	\brief Prepares buffer to store a Modbus RTU message
*/
static inline void modbusBufferModeRTU(ModbusBuffer *buffer)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	buffer->padding = MODBUS_RTU_ADU_PADDING;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2203      	movs	r2, #3
 8000498:	739a      	strb	r2, [r3, #14]
	buffer->pduOffset = MODBUS_RTU_PDU_OFFSET;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2201      	movs	r2, #1
 800049e:	73da      	strb	r2, [r3, #15]
}
 80004a0:	46c0      	nop			@ (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b002      	add	sp, #8
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <modbusMaskRead>:
	\param mask A pointer to the array
	\param n Number of the bit to be read
	\returns The bit value
*/
LIGHTMODBUS_WARN_UNUSED static inline uint8_t modbusMaskRead(const uint8_t *mask, uint16_t n)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	000a      	movs	r2, r1
 80004b2:	1cbb      	adds	r3, r7, #2
 80004b4:	801a      	strh	r2, [r3, #0]
	return (mask[n >> 3] & (1 << (n & 7))) != 0;
 80004b6:	1cbb      	adds	r3, r7, #2
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	08db      	lsrs	r3, r3, #3
 80004bc:	b29b      	uxth	r3, r3
 80004be:	001a      	movs	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	189b      	adds	r3, r3, r2
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	0019      	movs	r1, r3
 80004c8:	1cbb      	adds	r3, r7, #2
 80004ca:	881b      	ldrh	r3, [r3, #0]
 80004cc:	2207      	movs	r2, #7
 80004ce:	4013      	ands	r3, r2
 80004d0:	4119      	asrs	r1, r3
 80004d2:	000b      	movs	r3, r1
 80004d4:	2201      	movs	r2, #1
 80004d6:	4013      	ands	r3, r2
 80004d8:	1e5a      	subs	r2, r3, #1
 80004da:	4193      	sbcs	r3, r2
 80004dc:	b2db      	uxtb	r3, r3
}
 80004de:	0018      	movs	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <modbusMaskWrite>:
	\param mask A pointer to the array
	\param n Number of the bit to write
	\param value Bit value to be written
*/
static inline void modbusMaskWrite(uint8_t *mask, uint16_t n, uint8_t value)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	0008      	movs	r0, r1
 80004f0:	0011      	movs	r1, r2
 80004f2:	1cbb      	adds	r3, r7, #2
 80004f4:	1c02      	adds	r2, r0, #0
 80004f6:	801a      	strh	r2, [r3, #0]
 80004f8:	1c7b      	adds	r3, r7, #1
 80004fa:	1c0a      	adds	r2, r1, #0
 80004fc:	701a      	strb	r2, [r3, #0]
	if (value)
 80004fe:	1c7b      	adds	r3, r7, #1
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d01c      	beq.n	8000540 <modbusMaskWrite+0x5a>
		mask[n >> 3] |= (1 << (n & 7));
 8000506:	1cbb      	adds	r3, r7, #2
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	08db      	lsrs	r3, r3, #3
 800050c:	b29b      	uxth	r3, r3
 800050e:	001a      	movs	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	189b      	adds	r3, r3, r2
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b25a      	sxtb	r2, r3
 8000518:	1cbb      	adds	r3, r7, #2
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	2107      	movs	r1, #7
 800051e:	400b      	ands	r3, r1
 8000520:	2101      	movs	r1, #1
 8000522:	4099      	lsls	r1, r3
 8000524:	000b      	movs	r3, r1
 8000526:	b25b      	sxtb	r3, r3
 8000528:	4313      	orrs	r3, r2
 800052a:	b25a      	sxtb	r2, r3
 800052c:	1cbb      	adds	r3, r7, #2
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	08db      	lsrs	r3, r3, #3
 8000532:	b29b      	uxth	r3, r3
 8000534:	0019      	movs	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	185b      	adds	r3, r3, r1
 800053a:	b2d2      	uxtb	r2, r2
 800053c:	701a      	strb	r2, [r3, #0]
	else
		mask[n >> 3] &= ~(1 << (n & 7));
}
 800053e:	e01d      	b.n	800057c <modbusMaskWrite+0x96>
		mask[n >> 3] &= ~(1 << (n & 7));
 8000540:	1cbb      	adds	r3, r7, #2
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	08db      	lsrs	r3, r3, #3
 8000546:	b29b      	uxth	r3, r3
 8000548:	001a      	movs	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	189b      	adds	r3, r3, r2
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b25b      	sxtb	r3, r3
 8000552:	1cba      	adds	r2, r7, #2
 8000554:	8812      	ldrh	r2, [r2, #0]
 8000556:	2107      	movs	r1, #7
 8000558:	400a      	ands	r2, r1
 800055a:	2101      	movs	r1, #1
 800055c:	4091      	lsls	r1, r2
 800055e:	000a      	movs	r2, r1
 8000560:	b252      	sxtb	r2, r2
 8000562:	43d2      	mvns	r2, r2
 8000564:	b252      	sxtb	r2, r2
 8000566:	4013      	ands	r3, r2
 8000568:	b25a      	sxtb	r2, r3
 800056a:	1cbb      	adds	r3, r7, #2
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	08db      	lsrs	r3, r3, #3
 8000570:	b29b      	uxth	r3, r3
 8000572:	0019      	movs	r1, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	185b      	adds	r3, r3, r1
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	701a      	strb	r2, [r3, #0]
}
 800057c:	46c0      	nop			@ (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b002      	add	sp, #8
 8000582:	bd80      	pop	{r7, pc}

08000584 <modbusBitsToBytes>:
	\brief Returns number of bytes necessary to hold given number of bits
	\param n Number of bits
	\returns Number of bytes requred to hold n bits
*/
LIGHTMODBUS_WARN_UNUSED static inline uint16_t modbusBitsToBytes(uint16_t n)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	0002      	movs	r2, r0
 800058c:	1dbb      	adds	r3, r7, #6
 800058e:	801a      	strh	r2, [r3, #0]
	return (n + 7) >> 3;
 8000590:	1dbb      	adds	r3, r7, #6
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	3307      	adds	r3, #7
 8000596:	10db      	asrs	r3, r3, #3
 8000598:	b29b      	uxth	r3, r3
}
 800059a:	0018      	movs	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <modbusRLE>:

/**
	\brief Safely reads a little-endian 16-bit word from provided pointer
*/
LIGHTMODBUS_WARN_UNUSED static inline uint16_t modbusRLE(const uint8_t *p)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
	uint8_t lo = *p;
 80005aa:	210f      	movs	r1, #15
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	701a      	strb	r2, [r3, #0]
	uint8_t hi = *(p + 1);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	200e      	movs	r0, #14
 80005ba:	183b      	adds	r3, r7, r0
 80005bc:	7812      	ldrb	r2, [r2, #0]
 80005be:	701a      	strb	r2, [r3, #0]
	return (uint16_t) lo | ((uint16_t) hi << 8);
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b21a      	sxth	r2, r3
 80005c6:	183b      	adds	r3, r7, r0
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b21b      	sxth	r3, r3
 80005d2:	b29b      	uxth	r3, r3
}
 80005d4:	0018      	movs	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b004      	add	sp, #16
 80005da:	bd80      	pop	{r7, pc}

080005dc <modbusWLE>:

/**
	\brief Safely writes a little-endian 16-bit word to provided pointer
*/
static inline uint16_t modbusWLE(uint8_t *p, uint16_t val)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	000a      	movs	r2, r1
 80005e6:	1cbb      	adds	r3, r7, #2
 80005e8:	801a      	strh	r2, [r3, #0]
	*p = val & 0xff;
 80005ea:	1cbb      	adds	r3, r7, #2
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	701a      	strb	r2, [r3, #0]
	*(p + 1) = val >> 8;
 80005f4:	1cbb      	adds	r3, r7, #2
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	701a      	strb	r2, [r3, #0]
	return val;
 8000604:	1cbb      	adds	r3, r7, #2
 8000606:	881b      	ldrh	r3, [r3, #0]
}
 8000608:	0018      	movs	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	b002      	add	sp, #8
 800060e:	bd80      	pop	{r7, pc}

08000610 <modbusRBE>:

/**
	\brief Safely reads a big-endian 16-bit word from provided pointer
*/
LIGHTMODBUS_WARN_UNUSED static inline uint16_t modbusRBE(const uint8_t *p)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	uint8_t lo = *(p + 1);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	210f      	movs	r1, #15
 800061e:	187b      	adds	r3, r7, r1
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	701a      	strb	r2, [r3, #0]
	uint8_t hi = *p;
 8000624:	200e      	movs	r0, #14
 8000626:	183b      	adds	r3, r7, r0
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	701a      	strb	r2, [r3, #0]
	return (uint16_t) lo | ((uint16_t) hi << 8);
 800062e:	187b      	adds	r3, r7, r1
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b21a      	sxth	r2, r3
 8000634:	183b      	adds	r3, r7, r0
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	b21b      	sxth	r3, r3
 800063c:	4313      	orrs	r3, r2
 800063e:	b21b      	sxth	r3, r3
 8000640:	b29b      	uxth	r3, r3
}
 8000642:	0018      	movs	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	b004      	add	sp, #16
 8000648:	bd80      	pop	{r7, pc}

0800064a <modbusWBE>:

/**
	\brief Safely writes a big-endian 16-bit word to provided pointer
*/
static inline uint16_t modbusWBE(uint8_t *p, uint16_t val)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	000a      	movs	r2, r1
 8000654:	1cbb      	adds	r3, r7, #2
 8000656:	801a      	strh	r2, [r3, #0]
	*p = val >> 8;
 8000658:	1cbb      	adds	r3, r7, #2
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	b29b      	uxth	r3, r3
 8000660:	b2da      	uxtb	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	701a      	strb	r2, [r3, #0]
	*(p + 1) = val & 0xff;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	1cba      	adds	r2, r7, #2
 800066c:	8812      	ldrh	r2, [r2, #0]
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	701a      	strb	r2, [r3, #0]
	return val;
 8000672:	1cbb      	adds	r3, r7, #2
 8000674:	881b      	ldrh	r3, [r3, #0]
}
 8000676:	0018      	movs	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}

0800067e <modbusCheckRangeU16>:
	\param index index of the first register in the range
	\param count number of registers in the range
	\returns true if the range causes an overflow
*/
static inline uint8_t modbusCheckRangeU16(uint16_t index, uint16_t count)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	0002      	movs	r2, r0
 8000686:	1dbb      	adds	r3, r7, #6
 8000688:	801a      	strh	r2, [r3, #0]
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	1c0a      	adds	r2, r1, #0
 800068e:	801a      	strh	r2, [r3, #0]
	// return (uint16_t)(index + count - 1) < index;
	return index > UINT16_MAX - count + 1;
 8000690:	1dbb      	adds	r3, r7, #6
 8000692:	881a      	ldrh	r2, [r3, #0]
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	0249      	lsls	r1, r1, #9
 800069c:	1acb      	subs	r3, r1, r3
 800069e:	2101      	movs	r1, #1
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dc01      	bgt.n	80006a8 <modbusCheckRangeU16+0x2a>
 80006a4:	2300      	movs	r3, #0
 80006a6:	1c19      	adds	r1, r3, #0
 80006a8:	b2cb      	uxtb	r3, r1
}
 80006aa:	0018      	movs	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <modbusGetErrorSource>:
	\see MODBUS_ERROR_SOURCE_GENERAL
	\see MODBUS_ERROR_SOURCE_REQUEST
	\see MODBUS_ERROR_SOURCE_REQUEST
*/
LIGHTMODBUS_WARN_UNUSED static inline uint8_t modbusGetErrorSource(ModbusErrorInfo err)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	return err.source;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	079b      	lsls	r3, r3, #30
 80006c0:	0f9b      	lsrs	r3, r3, #30
 80006c2:	b2db      	uxtb	r3, r3
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}

080006cc <modbusGetErrorCode>:
/**
	\brief Returns ModbusError contained in ModbusErrorInfo
	\returns MdobusError contained in ModbusErrorInfo
*/
LIGHTMODBUS_WARN_UNUSED static inline ModbusError modbusGetErrorCode(ModbusErrorInfo err)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	return (ModbusError) err.error;
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	061b      	lsls	r3, r3, #24
 80006da:	0e9b      	lsrs	r3, r3, #26
 80006dc:	b2db      	uxtb	r3, r3
}
 80006de:	0018      	movs	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <modbusIsOk>:
	\returns true if ModbusErrorInfo contains an error

	\see MODBUS_NO_ERROR()
*/
LIGHTMODBUS_WARN_UNUSED static inline uint8_t modbusIsOk(ModbusErrorInfo err)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b082      	sub	sp, #8
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
	return modbusGetErrorSource(err) == MODBUS_ERROR_SOURCE_GENERAL && modbusGetErrorCode(err) == MODBUS_OK;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff ffde 	bl	80006b2 <modbusGetErrorSource>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d107      	bne.n	800070a <modbusIsOk+0x24>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff ffe5 	bl	80006cc <modbusGetErrorCode>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d101      	bne.n	800070a <modbusIsOk+0x24>
 8000706:	2301      	movs	r3, #1
 8000708:	e000      	b.n	800070c <modbusIsOk+0x26>
 800070a:	2300      	movs	r3, #0
 800070c:	b2db      	uxtb	r3, r3
}
 800070e:	0018      	movs	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}

08000716 <modbusGetGeneralError>:
	\brief Returns general error from ModbusErrorInfo
	\returns ModbusError if ModbusErrorInfo contains an error from MODBUS_ERROR_SOURCE_GENERAL
	\returns MODBUS_OK otherwise
*/
LIGHTMODBUS_WARN_UNUSED static inline ModbusError modbusGetGeneralError(ModbusErrorInfo err)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	return err.source == MODBUS_ERROR_SOURCE_GENERAL ? modbusGetErrorCode(err) : MODBUS_OK;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2203      	movs	r2, #3
 8000724:	4013      	ands	r3, r2
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d105      	bne.n	8000738 <modbusGetGeneralError+0x22>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	0018      	movs	r0, r3
 8000730:	f7ff ffcc 	bl	80006cc <modbusGetErrorCode>
 8000734:	0003      	movs	r3, r0
 8000736:	e000      	b.n	800073a <modbusGetGeneralError+0x24>
 8000738:	2300      	movs	r3, #0
}
 800073a:	0018      	movs	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}

08000742 <modbusGetRequestError>:
	\brief Returns request error from ModbusErrorInfo
	\returns ModbusError if ModbusErrorInfo contains an error from MODBUS_ERROR_SOURCE_REQUEST
	\returns MODBUS_OK otherwise
*/
LIGHTMODBUS_WARN_UNUSED static inline ModbusError modbusGetRequestError(ModbusErrorInfo err)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
	return err.source == MODBUS_ERROR_SOURCE_REQUEST ? modbusGetErrorCode(err) : MODBUS_OK;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2203      	movs	r2, #3
 8000750:	4013      	ands	r3, r2
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b01      	cmp	r3, #1
 8000756:	d105      	bne.n	8000764 <modbusGetRequestError+0x22>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff ffb6 	bl	80006cc <modbusGetErrorCode>
 8000760:	0003      	movs	r3, r0
 8000762:	e000      	b.n	8000766 <modbusGetRequestError+0x24>
 8000764:	2300      	movs	r3, #0
}
 8000766:	0018      	movs	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	b002      	add	sp, #8
 800076c:	bd80      	pop	{r7, pc}

0800076e <modbusSlaveGetResponse>:

	\note This function can only be used if the last call to `modbusParseRequest*()`
		was successful (i.e. `modbusIsOk()` was true for the return value)
*/
LIGHTMODBUS_WARN_UNUSED static inline const uint8_t *modbusSlaveGetResponse(const ModbusSlave *status)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
	return status->response.data;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	695b      	ldr	r3, [r3, #20]
}
 800077a:	0018      	movs	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}

08000782 <modbusSlaveGetResponseLength>:

	\note This function can only be used if the last call to `modbusParseRequest*()`
		was successful (i.e. `modbusIsOk()` was true for the return value)
*/
LIGHTMODBUS_WARN_UNUSED static inline uint16_t modbusSlaveGetResponseLength(const ModbusSlave *status)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	return status->response.length;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	8b9b      	ldrh	r3, [r3, #28]
}
 800078e:	0018      	movs	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}

08000796 <modbusSlaveGetUserPointer>:

/**
	\brief Retreieves the custom context pointer
*/
static inline void *modbusSlaveGetUserPointer(const ModbusSlave *status)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
	return status->context;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6a1b      	ldr	r3, [r3, #32]
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}

080007aa <modbusSlaveAllocateResponse>:
	\brief Allocates memory for slave's response frame
	\param pduSize size of the PDU section. 0 if the slave doesn't want to respond.
	\returns \ref MODBUS_ERROR_ALLOC on allocation failure
*/
LIGHTMODBUS_WARN_UNUSED static inline ModbusError modbusSlaveAllocateResponse(ModbusSlave *status, uint16_t pduSize)
{
 80007aa:	b590      	push	{r4, r7, lr}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	000a      	movs	r2, r1
 80007b4:	1cbb      	adds	r3, r7, #2
 80007b6:	801a      	strh	r2, [r3, #0]
	return modbusBufferAllocateADU(&status->response, pduSize, modbusSlaveGetUserPointer(status));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3310      	adds	r3, #16
 80007bc:	001c      	movs	r4, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	0018      	movs	r0, r3
 80007c2:	f7ff ffe8 	bl	8000796 <modbusSlaveGetUserPointer>
 80007c6:	0002      	movs	r2, r0
 80007c8:	1cbb      	adds	r3, r7, #2
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	0019      	movs	r1, r3
 80007ce:	0020      	movs	r0, r4
 80007d0:	f000 f87f 	bl	80008d2 <modbusBufferAllocateADU>
 80007d4:	0003      	movs	r3, r0
}
 80007d6:	0018      	movs	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	b003      	add	sp, #12
 80007dc:	bd90      	pop	{r4, r7, pc}

080007de <modbusSlaveFreeResponse>:

/**
	\brief Frees memory allocated for slave's response frame
*/
static inline void modbusSlaveFreeResponse(ModbusSlave *status)
{
 80007de:	b590      	push	{r4, r7, lr}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
	modbusBufferFree(&status->response, modbusSlaveGetUserPointer(status));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3310      	adds	r3, #16
 80007ea:	001c      	movs	r4, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff ffd1 	bl	8000796 <modbusSlaveGetUserPointer>
 80007f4:	0003      	movs	r3, r0
 80007f6:	0019      	movs	r1, r3
 80007f8:	0020      	movs	r0, r4
 80007fa:	f000 f857 	bl	80008ac <modbusBufferFree>
}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b003      	add	sp, #12
 8000804:	bd90      	pop	{r4, r7, pc}

08000806 <modbusDefaultAllocator>:
	\returns MODBUS_ERROR_ALLOC on allocation failure
	\returns MODBUS_OK on success
	\see allocators
*/
LIGHTMODBUS_WARN_UNUSED ModbusError modbusDefaultAllocator(ModbusBuffer *buffer, uint16_t size, void *context)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	200a      	movs	r0, #10
 8000812:	183b      	adds	r3, r7, r0
 8000814:	1c0a      	adds	r2, r1, #0
 8000816:	801a      	strh	r2, [r3, #0]
	// Make sure to handle the case when *ptr = NULL and size = 0
	// We don't want to allocate any memory then, but realloc(NULL, 0) would
	// result in malloc(0)
	if (!size)
 8000818:	183b      	adds	r3, r7, r0
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d108      	bne.n	8000832 <modbusDefaultAllocator+0x2c>
	{
		free(buffer->data);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	0018      	movs	r0, r3
 8000826:	f007 ffdd 	bl	80087e4 <free>
		buffer->data = NULL;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	e018      	b.n	8000864 <modbusDefaultAllocator+0x5e>
	}
	else
	{
		uint8_t *old_ptr = buffer->data;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	617b      	str	r3, [r7, #20]
		buffer->data = (uint8_t*)realloc(buffer->data, size);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	685a      	ldr	r2, [r3, #4]
 800083c:	230a      	movs	r3, #10
 800083e:	18fb      	adds	r3, r7, r3
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f008 f889 	bl	800895c <realloc>
 800084a:	0002      	movs	r2, r0
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	605a      	str	r2, [r3, #4]
		
		if (!buffer->data)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d105      	bne.n	8000864 <modbusDefaultAllocator+0x5e>
		{
			free(old_ptr);
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	0018      	movs	r0, r3
 800085c:	f007 ffc2 	bl	80087e4 <free>
			return MODBUS_ERROR_ALLOC;
 8000860:	2302      	movs	r3, #2
 8000862:	e000      	b.n	8000866 <modbusDefaultAllocator+0x60>
		}
	}

	return MODBUS_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	b006      	add	sp, #24
 800086c:	bd80      	pop	{r7, pc}

0800086e <modbusBufferInit>:
	\brief Initializes a buffer for use
	\param allocator Memory allocator to be used by the buffer
	\returns MODBUS_NO_ERROR() on success 
*/
LIGHTMODBUS_RET_ERROR modbusBufferInit(ModbusBuffer *buffer, ModbusAllocator allocator)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
	*buffer = (ModbusBuffer){
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	6839      	ldr	r1, [r7, #0]
 800087c:	6011      	str	r1, [r2, #0]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	2100      	movs	r1, #0
 8000882:	6051      	str	r1, [r2, #4]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	2100      	movs	r1, #0
 8000888:	6091      	str	r1, [r2, #8]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	2100      	movs	r1, #0
 800088e:	8191      	strh	r1, [r2, #12]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	2100      	movs	r1, #0
 8000894:	7391      	strb	r1, [r2, #14]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	2100      	movs	r1, #0
 800089a:	73d1      	strb	r1, [r2, #15]
		.pdu = NULL,
		.length = 0,
		.padding = 0,
		.pduOffset = 0,
	};
	return MODBUS_NO_ERROR();
 800089c:	2203      	movs	r2, #3
 800089e:	4393      	bics	r3, r2
 80008a0:	22fc      	movs	r2, #252	@ 0xfc
 80008a2:	4393      	bics	r3, r2
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b006      	add	sp, #24
 80008aa:	bd80      	pop	{r7, pc}

080008ac <modbusBufferFree>:
/**
	\brief Frees memory allocated inside the buffer
	\param context context pointer passed on to the allocator
*/
void modbusBufferFree(ModbusBuffer *buffer, void *context)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	ModbusError err = modbusBufferAllocateADU(buffer, 0, context);
 80008b6:	230f      	movs	r3, #15
 80008b8:	18fc      	adds	r4, r7, r3
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2100      	movs	r1, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 f806 	bl	80008d2 <modbusBufferAllocateADU>
 80008c6:	0003      	movs	r3, r0
 80008c8:	7023      	strb	r3, [r4, #0]
	(void) err;
}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b005      	add	sp, #20
 80008d0:	bd90      	pop	{r4, r7, pc}

080008d2 <modbusBufferAllocateADU>:
	This function is responsible for managing `data`, `pdu` and `length` fields
	in the buffer struct. The `pdu` pointer is set up to point `pduOffset` bytes
	after the `data` pointer unless `data` is a null pointer.
*/
LIGHTMODBUS_WARN_UNUSED ModbusError modbusBufferAllocateADU(ModbusBuffer *buffer, uint16_t pduSize, void *context)
{
 80008d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d4:	b087      	sub	sp, #28
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	60f8      	str	r0, [r7, #12]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	200a      	movs	r0, #10
 80008de:	183b      	adds	r3, r7, r0
 80008e0:	1c0a      	adds	r2, r1, #0
 80008e2:	801a      	strh	r2, [r3, #0]
	uint16_t size = pduSize;
 80008e4:	2416      	movs	r4, #22
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	183a      	adds	r2, r7, r0
 80008ea:	8812      	ldrh	r2, [r2, #0]
 80008ec:	801a      	strh	r2, [r3, #0]
	if (pduSize) size += buffer->padding;
 80008ee:	183b      	adds	r3, r7, r0
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d007      	beq.n	8000906 <modbusBufferAllocateADU+0x34>
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	7b9b      	ldrb	r3, [r3, #14]
 80008fa:	0019      	movs	r1, r3
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	193a      	adds	r2, r7, r4
 8000900:	8812      	ldrh	r2, [r2, #0]
 8000902:	188a      	adds	r2, r1, r2
 8000904:	801a      	strh	r2, [r3, #0]

	ModbusError err = buffer->allocator(buffer, size, context);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2615      	movs	r6, #21
 800090c:	19bc      	adds	r4, r7, r6
 800090e:	687d      	ldr	r5, [r7, #4]
 8000910:	2216      	movs	r2, #22
 8000912:	18ba      	adds	r2, r7, r2
 8000914:	8811      	ldrh	r1, [r2, #0]
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	002a      	movs	r2, r5
 800091a:	4798      	blx	r3
 800091c:	0003      	movs	r3, r0
 800091e:	7023      	strb	r3, [r4, #0]

	if (err == MODBUS_ERROR_ALLOC || size == 0)
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d004      	beq.n	8000932 <modbusBufferAllocateADU+0x60>
 8000928:	2216      	movs	r2, #22
 800092a:	18bb      	adds	r3, r7, r2
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d109      	bne.n	8000946 <modbusBufferAllocateADU+0x74>
	{
		buffer->data = NULL;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
		buffer->pdu  = NULL;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
		buffer->length = 0;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	819a      	strh	r2, [r3, #12]
 8000944:	e00b      	b.n	800095e <modbusBufferAllocateADU+0x8c>
	}
	else
	{
		buffer->pdu = buffer->data + buffer->pduOffset;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	7bd2      	ldrb	r2, [r2, #15]
 800094e:	189a      	adds	r2, r3, r2
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	609a      	str	r2, [r3, #8]
		buffer->length = size;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2216      	movs	r2, #22
 8000958:	18ba      	adds	r2, r7, r2
 800095a:	8812      	ldrh	r2, [r2, #0]
 800095c:	819a      	strh	r2, [r3, #12]
	}

	return err;
 800095e:	2315      	movs	r3, #21
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	781b      	ldrb	r3, [r3, #0]
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b007      	add	sp, #28
 800096a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800096c <modbusCRC>:
	\param data A pointer to the data to be processed
	\param length Number of bytes, starting at the `data` pointer, to process
	\returns 16-bit Modbus CRC value
*/
LIGHTMODBUS_WARN_UNUSED uint16_t modbusCRC(const uint8_t *data, uint16_t length)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	000a      	movs	r2, r1
 8000976:	1cbb      	adds	r3, r7, #2
 8000978:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0xFFFF;
 800097a:	230e      	movs	r3, #14
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	2201      	movs	r2, #1
 8000980:	4252      	negs	r2, r2
 8000982:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 0; i < length; i++)
 8000984:	230c      	movs	r3, #12
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	2200      	movs	r2, #0
 800098a:	801a      	strh	r2, [r3, #0]
 800098c:	e03a      	b.n	8000a04 <modbusCRC+0x98>
	{
		crc ^= (uint16_t) data[i];
 800098e:	230c      	movs	r3, #12
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	18d3      	adds	r3, r2, r3
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	0019      	movs	r1, r3
 800099c:	220e      	movs	r2, #14
 800099e:	18bb      	adds	r3, r7, r2
 80009a0:	18ba      	adds	r2, r7, r2
 80009a2:	8812      	ldrh	r2, [r2, #0]
 80009a4:	404a      	eors	r2, r1
 80009a6:	801a      	strh	r2, [r3, #0]
		for (uint8_t j = 8; j != 0; j--)
 80009a8:	230b      	movs	r3, #11
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	2208      	movs	r2, #8
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	e01d      	b.n	80009ee <modbusCRC+0x82>
		{
			if ((crc & 0x0001) != 0)
 80009b2:	210e      	movs	r1, #14
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	2201      	movs	r2, #1
 80009ba:	4013      	ands	r3, r2
 80009bc:	d00b      	beq.n	80009d6 <modbusCRC+0x6a>
			{
				crc >>= 1;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	187a      	adds	r2, r7, r1
 80009c2:	8812      	ldrh	r2, [r2, #0]
 80009c4:	0852      	lsrs	r2, r2, #1
 80009c6:	801a      	strh	r2, [r3, #0]
				crc ^= 0xA001;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	187a      	adds	r2, r7, r1
 80009cc:	8812      	ldrh	r2, [r2, #0]
 80009ce:	4914      	ldr	r1, [pc, #80]	@ (8000a20 <modbusCRC+0xb4>)
 80009d0:	404a      	eors	r2, r1
 80009d2:	801a      	strh	r2, [r3, #0]
 80009d4:	e005      	b.n	80009e2 <modbusCRC+0x76>
			}
			else
				crc >>= 1;
 80009d6:	220e      	movs	r2, #14
 80009d8:	18bb      	adds	r3, r7, r2
 80009da:	18ba      	adds	r2, r7, r2
 80009dc:	8812      	ldrh	r2, [r2, #0]
 80009de:	0852      	lsrs	r2, r2, #1
 80009e0:	801a      	strh	r2, [r3, #0]
		for (uint8_t j = 8; j != 0; j--)
 80009e2:	210b      	movs	r1, #11
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	3a01      	subs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	230b      	movs	r3, #11
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1dc      	bne.n	80009b2 <modbusCRC+0x46>
	for (uint16_t i = 0; i < length; i++)
 80009f8:	210c      	movs	r1, #12
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	881a      	ldrh	r2, [r3, #0]
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	3201      	adds	r2, #1
 8000a02:	801a      	strh	r2, [r3, #0]
 8000a04:	230c      	movs	r3, #12
 8000a06:	18fa      	adds	r2, r7, r3
 8000a08:	1cbb      	adds	r3, r7, #2
 8000a0a:	8812      	ldrh	r2, [r2, #0]
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d3bd      	bcc.n	800098e <modbusCRC+0x22>
		}
	}

	return crc;
 8000a12:	230e      	movs	r3, #14
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	881b      	ldrh	r3, [r3, #0]
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b004      	add	sp, #16
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	ffffa001 	.word	0xffffa001

08000a24 <modbusSlaveInit>:
	ModbusRegisterCallback registerCallback,
	ModbusSlaveExceptionCallback exceptionCallback,
	ModbusAllocator allocator,
	const ModbusSlaveFunctionHandler *functions,
	uint8_t functionCount)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	603b      	str	r3, [r7, #0]
	status->functions = functions;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	609a      	str	r2, [r3, #8]
	status->functionCount = functionCount;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	221c      	movs	r2, #28
 8000a3c:	18ba      	adds	r2, r7, r2
 8000a3e:	7812      	ldrb	r2, [r2, #0]
 8000a40:	731a      	strb	r2, [r3, #12]
	status->registerCallback = registerCallback;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	601a      	str	r2, [r3, #0]
	status->exceptionCallback = exceptionCallback;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	605a      	str	r2, [r3, #4]
	status->context = NULL;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]

	return modbusBufferInit(&status->response, allocator);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3310      	adds	r3, #16
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff ff06 	bl	800086e <modbusBufferInit>
 8000a62:	0003      	movs	r3, r0
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b004      	add	sp, #16
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <modbusBuildException>:
*/
LIGHTMODBUS_RET_ERROR modbusBuildException(
	ModbusSlave *status,
	uint8_t function,
	ModbusExceptionCode code)
{
 8000a6c:	b5b0      	push	{r4, r5, r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	0008      	movs	r0, r1
 8000a76:	0011      	movs	r1, r2
 8000a78:	1cfb      	adds	r3, r7, #3
 8000a7a:	1c02      	adds	r2, r0, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	1cbb      	adds	r3, r7, #2
 8000a80:	1c0a      	adds	r2, r1, #0
 8000a82:	701a      	strb	r2, [r3, #0]
	// Call the exception callback
	if (status->exceptionCallback)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <modbusBuildException+0x32>
		status->exceptionCallback(status, function, code);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	1cba      	adds	r2, r7, #2
 8000a92:	7815      	ldrb	r5, [r2, #0]
 8000a94:	1cfa      	adds	r2, r7, #3
 8000a96:	7811      	ldrb	r1, [r2, #0]
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	002a      	movs	r2, r5
 8000a9c:	4798      	blx	r3

	if (modbusSlaveAllocateResponse(status, 2))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fe81 	bl	80007aa <modbusSlaveAllocateResponse>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d00a      	beq.n	8000ac2 <modbusBuildException+0x56>
		return MODBUS_GENERAL_ERROR(ALLOC);
 8000aac:	2303      	movs	r3, #3
 8000aae:	439c      	bics	r4, r3
 8000ab0:	0023      	movs	r3, r4
 8000ab2:	001c      	movs	r4, r3
 8000ab4:	23fc      	movs	r3, #252	@ 0xfc
 8000ab6:	439c      	bics	r4, r3
 8000ab8:	0023      	movs	r3, r4
 8000aba:	2208      	movs	r2, #8
 8000abc:	4313      	orrs	r3, r2
 8000abe:	001c      	movs	r4, r3
 8000ac0:	e016      	b.n	8000af0 <modbusBuildException+0x84>

	status->response.pdu[0] = function | 0x80;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	1cfa      	adds	r2, r7, #3
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	2180      	movs	r1, #128	@ 0x80
 8000acc:	4249      	negs	r1, r1
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	701a      	strb	r2, [r3, #0]
	status->response.pdu[1] = code;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	1cba      	adds	r2, r7, #2
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	701a      	strb	r2, [r3, #0]

	return MODBUS_NO_ERROR();
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	439c      	bics	r4, r3
 8000ae4:	0023      	movs	r3, r4
 8000ae6:	001c      	movs	r4, r3
 8000ae8:	23fc      	movs	r3, #252	@ 0xfc
 8000aea:	439c      	bics	r4, r3
 8000aec:	0023      	movs	r3, r4
 8000aee:	001c      	movs	r4, r3
}
 8000af0:	0023      	movs	r3, r4
 8000af2:	0018      	movs	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bdb0      	pop	{r4, r5, r7, pc}

08000afa <modbusParseRequest>:

	\warning The response frame can only be accessed if modbusIsOk() called 
		on the return value of this function evaluates to true.
*/
LIGHTMODBUS_RET_ERROR modbusParseRequest(ModbusSlave *status, const uint8_t *request, uint8_t requestLength)
{
 8000afa:	b5b0      	push	{r4, r5, r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	701a      	strb	r2, [r3, #0]
	uint8_t function = request[0];
 8000b08:	2315      	movs	r3, #21
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	7812      	ldrb	r2, [r2, #0]
 8000b10:	701a      	strb	r2, [r3, #0]

	// Look for matching function
	for (uint16_t i = 0; i < status->functionCount; i++)
 8000b12:	2316      	movs	r3, #22
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	2200      	movs	r2, #0
 8000b18:	801a      	strh	r2, [r3, #0]
 8000b1a:	e023      	b.n	8000b64 <modbusParseRequest+0x6a>
		if (function == status->functions[i].id)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	2116      	movs	r1, #22
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	18d3      	adds	r3, r2, r3
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2015      	movs	r0, #21
 8000b2e:	183a      	adds	r2, r7, r0
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d110      	bne.n	8000b58 <modbusParseRequest+0x5e>
			return status->functions[i].ptr(status, function, &request[0], requestLength);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	685c      	ldr	r4, [r3, #4]
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781d      	ldrb	r5, [r3, #0]
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	183b      	adds	r3, r7, r0
 8000b4c:	7819      	ldrb	r1, [r3, #0]
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	002b      	movs	r3, r5
 8000b52:	47a0      	blx	r4
 8000b54:	0003      	movs	r3, r0
 8000b56:	e016      	b.n	8000b86 <modbusParseRequest+0x8c>
	for (uint16_t i = 0; i < status->functionCount; i++)
 8000b58:	2116      	movs	r1, #22
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	881a      	ldrh	r2, [r3, #0]
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	3201      	adds	r2, #1
 8000b62:	801a      	strh	r2, [r3, #0]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	7b1b      	ldrb	r3, [r3, #12]
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2316      	movs	r3, #22
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d3d3      	bcc.n	8000b1c <modbusParseRequest+0x22>

	// No match found
	return modbusBuildException(status, function, MODBUS_EXCEP_ILLEGAL_FUNCTION);
 8000b74:	2315      	movs	r3, #21
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	7819      	ldrb	r1, [r3, #0]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff ff74 	bl	8000a6c <modbusBuildException>
 8000b84:	0003      	movs	r3, r0
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b006      	add	sp, #24
 8000b8c:	bdb0      	pop	{r4, r5, r7, pc}

08000b8e <modbusParseRequestRTU>:

	\warning The response frame can only be accessed if modbusIsOk() called 
		on the return value of this function evaluates to true.
*/
LIGHTMODBUS_RET_ERROR modbusParseRequestRTU(ModbusSlave *status, uint8_t slaveAddress, const uint8_t *request, uint16_t requestLength)
{
 8000b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b90:	b091      	sub	sp, #68	@ 0x44
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	0008      	movs	r0, r1
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	1c02      	adds	r2, r0, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	2008      	movs	r0, #8
 8000ba6:	183b      	adds	r3, r7, r0
 8000ba8:	1c0a      	adds	r2, r1, #0
 8000baa:	801a      	strh	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000bb0:	2136      	movs	r1, #54	@ 0x36
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	183a      	adds	r2, r7, r0
 8000bb6:	8812      	ldrh	r2, [r2, #0]
 8000bb8:	801a      	strh	r2, [r3, #0]
 8000bba:	2335      	movs	r3, #53	@ 0x35
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	231c      	movs	r3, #28
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8000bc8:	231a      	movs	r3, #26
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bce:	2319      	movs	r3, #25
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
	const uint8_t **pdu,
	uint16_t *pduLength,
	uint8_t *address)
{
	// Check length
	if (length < MODBUS_RTU_ADU_MIN || length > MODBUS_RTU_ADU_MAX)
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d905      	bls.n	8000be8 <modbusParseRequestRTU+0x5a>
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	881a      	ldrh	r2, [r3, #0]
 8000be0:	2380      	movs	r3, #128	@ 0x80
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d901      	bls.n	8000bec <modbusParseRequestRTU+0x5e>
		return MODBUS_ERROR_LENGTH;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e02d      	b.n	8000c48 <modbusParseRequestRTU+0xba>

	// Extract address
	*address = frame[0];
 8000bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bee:	781a      	ldrb	r2, [r3, #0]
 8000bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf2:	701a      	strb	r2, [r3, #0]

	// Check CRC
	if (checkCRC && modbusCRC(frame, length - 2) != modbusRLE(frame + length - 2))
 8000bf4:	2335      	movs	r3, #53	@ 0x35
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d018      	beq.n	8000c30 <modbusParseRequestRTU+0xa2>
 8000bfe:	2636      	movs	r6, #54	@ 0x36
 8000c00:	19bb      	adds	r3, r7, r6
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	3b02      	subs	r3, #2
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fead 	bl	800096c <modbusCRC>
 8000c12:	0003      	movs	r3, r0
 8000c14:	001d      	movs	r5, r3
 8000c16:	19bb      	adds	r3, r7, r6
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c1e:	18d3      	adds	r3, r2, r3
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff fcbe 	bl	80005a2 <modbusRLE>
 8000c26:	0003      	movs	r3, r0
 8000c28:	429d      	cmp	r5, r3
 8000c2a:	d001      	beq.n	8000c30 <modbusParseRequestRTU+0xa2>
		return MODBUS_ERROR_CRC;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	e00b      	b.n	8000c48 <modbusParseRequestRTU+0xba>

	*pdu = frame + MODBUS_RTU_PDU_OFFSET;
 8000c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c36:	601a      	str	r2, [r3, #0]
	*pduLength = length - MODBUS_RTU_ADU_PADDING;
 8000c38:	2336      	movs	r3, #54	@ 0x36
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	3b03      	subs	r3, #3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c44:	801a      	strh	r2, [r3, #0]

	return MODBUS_OK;
 8000c46:	2300      	movs	r3, #0
	// Unpack the request
	const uint8_t *pdu;
	uint16_t pduLength;
	uint8_t requestAddress;
	ModbusError err = modbusUnpackRTU(
 8000c48:	213f      	movs	r1, #63	@ 0x3f
 8000c4a:	187a      	adds	r2, r7, r1
 8000c4c:	7013      	strb	r3, [r2, #0]
		&pdu,
		&pduLength,
		&requestAddress
	);

	if (err != MODBUS_OK)
 8000c4e:	000a      	movs	r2, r1
 8000c50:	18bb      	adds	r3, r7, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d013      	beq.n	8000c80 <modbusParseRequestRTU+0xf2>
		return MODBUS_MAKE_ERROR(MODBUS_ERROR_SOURCE_REQUEST, err);
 8000c58:	18bb      	adds	r3, r7, r2
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	223f      	movs	r2, #63	@ 0x3f
 8000c5e:	4013      	ands	r3, r2
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2203      	movs	r2, #3
 8000c64:	4394      	bics	r4, r2
 8000c66:	0022      	movs	r2, r4
 8000c68:	2101      	movs	r1, #1
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	0014      	movs	r4, r2
 8000c6e:	223f      	movs	r2, #63	@ 0x3f
 8000c70:	4013      	ands	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	22fc      	movs	r2, #252	@ 0xfc
 8000c76:	4394      	bics	r4, r2
 8000c78:	0022      	movs	r2, r4
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	001c      	movs	r4, r3
 8000c7e:	e09c      	b.n	8000dba <modbusParseRequestRTU+0x22c>

	// Verify if the frame is meant for us
	if (requestAddress != 0 && requestAddress != slaveAddress)
 8000c80:	2219      	movs	r2, #25
 8000c82:	18bb      	adds	r3, r7, r2
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d013      	beq.n	8000cb2 <modbusParseRequestRTU+0x124>
 8000c8a:	18bb      	adds	r3, r7, r2
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	220b      	movs	r2, #11
 8000c90:	18ba      	adds	r2, r7, r2
 8000c92:	7812      	ldrb	r2, [r2, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d00c      	beq.n	8000cb2 <modbusParseRequestRTU+0x124>
		return MODBUS_REQUEST_ERROR(ADDRESS);
 8000c98:	2303      	movs	r3, #3
 8000c9a:	439c      	bics	r4, r3
 8000c9c:	0023      	movs	r3, r4
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	001c      	movs	r4, r3
 8000ca4:	23fc      	movs	r3, #252	@ 0xfc
 8000ca6:	439c      	bics	r4, r3
 8000ca8:	0023      	movs	r3, r4
 8000caa:	222c      	movs	r2, #44	@ 0x2c
 8000cac:	4313      	orrs	r3, r2
 8000cae:	001c      	movs	r4, r3
 8000cb0:	e083      	b.n	8000dba <modbusParseRequestRTU+0x22c>

	// Parse the request
	ModbusErrorInfo errinfo;
	modbusBufferModeRTU(&status->response);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3310      	adds	r3, #16
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff fbe8 	bl	800048c <modbusBufferModeRTU>
	if (!modbusIsOk(errinfo = modbusParseRequest(status, pdu, pduLength)))
 8000cbc:	69f9      	ldr	r1, [r7, #28]
 8000cbe:	231a      	movs	r3, #26
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f7ff ff16 	bl	8000afa <modbusParseRequest>
 8000cce:	0003      	movs	r3, r0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff fd06 	bl	80006e6 <modbusIsOk>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d101      	bne.n	8000ce2 <modbusParseRequestRTU+0x154>
		return errinfo;
 8000cde:	697c      	ldr	r4, [r7, #20]
 8000ce0:	e06b      	b.n	8000dba <modbusParseRequestRTU+0x22c>
	
	if (status->response.length)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	8b9b      	ldrh	r3, [r3, #28]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d05f      	beq.n	8000daa <modbusParseRequestRTU+0x21c>
	{
		// Discard any response frames if the request
		// was broadcast
		if (requestAddress == 0)
 8000cea:	2319      	movs	r3, #25
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10c      	bne.n	8000d0e <modbusParseRequestRTU+0x180>
		{
			modbusSlaveFreeResponse(status);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff fd71 	bl	80007de <modbusSlaveFreeResponse>
			return MODBUS_NO_ERROR();
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	439c      	bics	r4, r3
 8000d00:	0023      	movs	r3, r4
 8000d02:	001c      	movs	r4, r3
 8000d04:	23fc      	movs	r3, #252	@ 0xfc
 8000d06:	439c      	bics	r4, r3
 8000d08:	0023      	movs	r3, r4
 8000d0a:	001c      	movs	r4, r3
 8000d0c:	e055      	b.n	8000dba <modbusParseRequestRTU+0x22c>
		}

		// Pack the response frame
		err = modbusPackRTU(
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	8b92      	ldrh	r2, [r2, #28]
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d18:	2122      	movs	r1, #34	@ 0x22
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	801a      	strh	r2, [r3, #0]
 8000d1e:	2321      	movs	r3, #33	@ 0x21
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	220b      	movs	r2, #11
 8000d24:	18ba      	adds	r2, r7, r2
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	701a      	strb	r2, [r3, #0]
	uint8_t *frame,
	uint16_t length,
	uint8_t address)
{
	// Check length
	if (length < MODBUS_RTU_ADU_MIN || length > MODBUS_RTU_ADU_MAX)
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d905      	bls.n	8000d3e <modbusParseRequestRTU+0x1b0>
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	2380      	movs	r3, #128	@ 0x80
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d901      	bls.n	8000d42 <modbusParseRequestRTU+0x1b4>
		return MODBUS_ERROR_LENGTH;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	e019      	b.n	8000d76 <modbusParseRequestRTU+0x1e8>

	// Write address
	frame[0] = address;
 8000d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d44:	2221      	movs	r2, #33	@ 0x21
 8000d46:	18ba      	adds	r2, r7, r2
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	701a      	strb	r2, [r3, #0]

	// Compute and write CRC
	modbusWLE(&frame[length - 2], modbusCRC(frame, length - 2));
 8000d4c:	2122      	movs	r1, #34	@ 0x22
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	3b02      	subs	r3, #2
 8000d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d56:	18d5      	adds	r5, r2, r3
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff fe01 	bl	800096c <modbusCRC>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	0028      	movs	r0, r5
 8000d70:	f7ff fc34 	bl	80005dc <modbusWLE>
	
	return MODBUS_OK;
 8000d74:	2200      	movs	r2, #0
 8000d76:	213f      	movs	r1, #63	@ 0x3f
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
			&status->response.data[0],
			status->response.length,
			slaveAddress);

		if (err != MODBUS_OK)
 8000d7c:	000a      	movs	r2, r1
 8000d7e:	18bb      	adds	r3, r7, r2
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d011      	beq.n	8000daa <modbusParseRequestRTU+0x21c>
			return MODBUS_MAKE_ERROR(MODBUS_ERROR_SOURCE_GENERAL, err);
 8000d86:	18bb      	adds	r3, r7, r2
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	223f      	movs	r2, #63	@ 0x3f
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2203      	movs	r2, #3
 8000d92:	4394      	bics	r4, r2
 8000d94:	0022      	movs	r2, r4
 8000d96:	0014      	movs	r4, r2
 8000d98:	223f      	movs	r2, #63	@ 0x3f
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	22fc      	movs	r2, #252	@ 0xfc
 8000da0:	4394      	bics	r4, r2
 8000da2:	0022      	movs	r2, r4
 8000da4:	4313      	orrs	r3, r2
 8000da6:	001c      	movs	r4, r3
 8000da8:	e007      	b.n	8000dba <modbusParseRequestRTU+0x22c>
	}
	
	return MODBUS_NO_ERROR();
 8000daa:	2303      	movs	r3, #3
 8000dac:	439c      	bics	r4, r3
 8000dae:	0023      	movs	r3, r4
 8000db0:	001c      	movs	r4, r3
 8000db2:	23fc      	movs	r3, #252	@ 0xfc
 8000db4:	439c      	bics	r4, r3
 8000db6:	0023      	movs	r3, r4
 8000db8:	001c      	movs	r4, r3
}
 8000dba:	0023      	movs	r3, r4
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b011      	add	sp, #68	@ 0x44
 8000dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dc4 <modbusParseRequest01020304>:
LIGHTMODBUS_RET_ERROR modbusParseRequest01020304(
	ModbusSlave *status,
	uint8_t function,
	const uint8_t *requestPDU,
	uint8_t requestLength)
{
 8000dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc6:	b08d      	sub	sp, #52	@ 0x34
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	0008      	movs	r0, r1
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	250b      	movs	r5, #11
 8000dd4:	197b      	adds	r3, r7, r5
 8000dd6:	1c02      	adds	r2, r0, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	200a      	movs	r0, #10
 8000ddc:	183b      	adds	r3, r7, r0
 8000dde:	1c0a      	adds	r2, r1, #0
 8000de0:	701a      	strb	r2, [r3, #0]
	// Check frame length
	if (requestLength != 5)
 8000de2:	183b      	adds	r3, r7, r0
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	d008      	beq.n	8000dfc <modbusParseRequest01020304+0x38>
		return modbusBuildException(status, function, MODBUS_EXCEP_ILLEGAL_VALUE);
 8000dea:	197b      	adds	r3, r7, r5
 8000dec:	7819      	ldrb	r1, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2203      	movs	r2, #3
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff fe3a 	bl	8000a6c <modbusBuildException>
 8000df8:	0004      	movs	r4, r0
 8000dfa:	e18f      	b.n	800111c <modbusParseRequest01020304+0x358>

	ModbusDataType datatype;
	uint16_t maxCount;
	uint8_t isCoilType;
	switch (function)
 8000dfc:	230b      	movs	r3, #11
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d031      	beq.n	8000e6a <modbusParseRequest01020304+0xa6>
 8000e06:	dc3d      	bgt.n	8000e84 <modbusParseRequest01020304+0xc0>
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d021      	beq.n	8000e50 <modbusParseRequest01020304+0x8c>
 8000e0c:	dc3a      	bgt.n	8000e84 <modbusParseRequest01020304+0xc0>
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d002      	beq.n	8000e18 <modbusParseRequest01020304+0x54>
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d00e      	beq.n	8000e34 <modbusParseRequest01020304+0x70>
 8000e16:	e035      	b.n	8000e84 <modbusParseRequest01020304+0xc0>
	{
		case 1:
			datatype = MODBUS_COIL;
 8000e18:	232f      	movs	r3, #47	@ 0x2f
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	701a      	strb	r2, [r3, #0]
			maxCount = 2000;
 8000e20:	232c      	movs	r3, #44	@ 0x2c
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	22fa      	movs	r2, #250	@ 0xfa
 8000e26:	00d2      	lsls	r2, r2, #3
 8000e28:	801a      	strh	r2, [r3, #0]
			isCoilType = 1;
 8000e2a:	232b      	movs	r3, #43	@ 0x2b
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
			break;
 8000e32:	e032      	b.n	8000e9a <modbusParseRequest01020304+0xd6>

		case 2:
			datatype = MODBUS_DISCRETE_INPUT;
 8000e34:	232f      	movs	r3, #47	@ 0x2f
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	2208      	movs	r2, #8
 8000e3a:	701a      	strb	r2, [r3, #0]
			maxCount = 2000;
 8000e3c:	232c      	movs	r3, #44	@ 0x2c
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	22fa      	movs	r2, #250	@ 0xfa
 8000e42:	00d2      	lsls	r2, r2, #3
 8000e44:	801a      	strh	r2, [r3, #0]
			isCoilType = 1;
 8000e46:	232b      	movs	r3, #43	@ 0x2b
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
			break;
 8000e4e:	e024      	b.n	8000e9a <modbusParseRequest01020304+0xd6>

		case 3:
			datatype = MODBUS_HOLDING_REGISTER;
 8000e50:	232f      	movs	r3, #47	@ 0x2f
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
			maxCount = 125;
 8000e58:	232c      	movs	r3, #44	@ 0x2c
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	227d      	movs	r2, #125	@ 0x7d
 8000e5e:	801a      	strh	r2, [r3, #0]
			isCoilType = 0;
 8000e60:	232b      	movs	r3, #43	@ 0x2b
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
			break;
 8000e68:	e017      	b.n	8000e9a <modbusParseRequest01020304+0xd6>

		case 4:
			datatype = MODBUS_INPUT_REGISTER;
 8000e6a:	232f      	movs	r3, #47	@ 0x2f
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	2202      	movs	r2, #2
 8000e70:	701a      	strb	r2, [r3, #0]
			maxCount = 125;
 8000e72:	232c      	movs	r3, #44	@ 0x2c
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	227d      	movs	r2, #125	@ 0x7d
 8000e78:	801a      	strh	r2, [r3, #0]
			isCoilType = 0;
 8000e7a:	232b      	movs	r3, #43	@ 0x2b
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
			break;
 8000e82:	e00a      	b.n	8000e9a <modbusParseRequest01020304+0xd6>
		
		default:
			return MODBUS_GENERAL_ERROR(FUNCTION);
 8000e84:	2303      	movs	r3, #3
 8000e86:	439c      	bics	r4, r3
 8000e88:	0023      	movs	r3, r4
 8000e8a:	001c      	movs	r4, r3
 8000e8c:	23fc      	movs	r3, #252	@ 0xfc
 8000e8e:	439c      	bics	r4, r3
 8000e90:	0023      	movs	r3, r4
 8000e92:	220c      	movs	r2, #12
 8000e94:	4313      	orrs	r3, r2
 8000e96:	001c      	movs	r4, r3
 8000e98:	e140      	b.n	800111c <modbusParseRequest01020304+0x358>
			break;
	}

	uint16_t index = modbusRBE(&requestPDU[1]);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	2222      	movs	r2, #34	@ 0x22
 8000ea0:	18bd      	adds	r5, r7, r2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f7ff fbb4 	bl	8000610 <modbusRBE>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	802b      	strh	r3, [r5, #0]
	uint16_t count = modbusRBE(&requestPDU[3]);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3303      	adds	r3, #3
 8000eb0:	2620      	movs	r6, #32
 8000eb2:	19bd      	adds	r5, r7, r6
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff fbab 	bl	8000610 <modbusRBE>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	802b      	strh	r3, [r5, #0]

	// Check count
	if (count == 0 || count > maxCount)
 8000ebe:	19bb      	adds	r3, r7, r6
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d006      	beq.n	8000ed4 <modbusParseRequest01020304+0x110>
 8000ec6:	19ba      	adds	r2, r7, r6
 8000ec8:	232c      	movs	r3, #44	@ 0x2c
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	8812      	ldrh	r2, [r2, #0]
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d909      	bls.n	8000ee8 <modbusParseRequest01020304+0x124>
		return modbusBuildException(status, function, MODBUS_EXCEP_ILLEGAL_VALUE);
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	7819      	ldrb	r1, [r3, #0]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2203      	movs	r2, #3
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff fdc4 	bl	8000a6c <modbusBuildException>
 8000ee4:	0004      	movs	r4, r0
 8000ee6:	e119      	b.n	800111c <modbusParseRequest01020304+0x358>

	// Addresss range check
	if (modbusCheckRangeU16(index, count))
 8000ee8:	2320      	movs	r3, #32
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	881a      	ldrh	r2, [r3, #0]
 8000eee:	2322      	movs	r3, #34	@ 0x22
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	0011      	movs	r1, r2
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff fbc1 	bl	800067e <modbusCheckRangeU16>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d009      	beq.n	8000f14 <modbusParseRequest01020304+0x150>
		return modbusBuildException(status, function, MODBUS_EXCEP_ILLEGAL_ADDRESS);
 8000f00:	230b      	movs	r3, #11
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	7819      	ldrb	r1, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f7ff fdae 	bl	8000a6c <modbusBuildException>
 8000f10:	0004      	movs	r4, r0
 8000f12:	e103      	b.n	800111c <modbusParseRequest01020304+0x358>

	// Prepare callback args
	ModbusRegisterCallbackResult cres;
	ModbusRegisterCallbackArgs cargs = {
 8000f14:	2110      	movs	r1, #16
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	222f      	movs	r2, #47	@ 0x2f
 8000f1a:	18ba      	adds	r2, r7, r2
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	705a      	strb	r2, [r3, #1]
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	805a      	strh	r2, [r3, #2]
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	809a      	strh	r2, [r3, #4]
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	220b      	movs	r2, #11
 8000f36:	18ba      	adds	r2, r7, r2
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	719a      	strb	r2, [r3, #6]
		.value = 0,
		.function = function,
	};

	// Check if all registers can be read
	for (uint16_t i = 0; i < count; i++)
 8000f3c:	2328      	movs	r3, #40	@ 0x28
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	801a      	strh	r2, [r3, #0]
 8000f44:	e039      	b.n	8000fba <modbusParseRequest01020304+0x1f6>
	{
		cargs.index = index + i;
 8000f46:	2322      	movs	r3, #34	@ 0x22
 8000f48:	18fa      	adds	r2, r7, r3
 8000f4a:	2328      	movs	r3, #40	@ 0x28
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	8812      	ldrh	r2, [r2, #0]
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	18d3      	adds	r3, r2, r3
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	2110      	movs	r1, #16
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	805a      	strh	r2, [r3, #2]
		ModbusError fail = status->registerCallback(status, &cargs, &cres);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	261e      	movs	r6, #30
 8000f62:	19bd      	adds	r5, r7, r6
 8000f64:	2218      	movs	r2, #24
 8000f66:	18ba      	adds	r2, r7, r2
 8000f68:	1879      	adds	r1, r7, r1
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	4798      	blx	r3
 8000f6e:	0003      	movs	r3, r0
 8000f70:	702b      	strb	r3, [r5, #0]
		if (fail) return modbusBuildException(status, function, MODBUS_EXCEP_SLAVE_FAILURE);
 8000f72:	19bb      	adds	r3, r7, r6
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d009      	beq.n	8000f8e <modbusParseRequest01020304+0x1ca>
 8000f7a:	230b      	movs	r3, #11
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	7819      	ldrb	r1, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2204      	movs	r2, #4
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff fd71 	bl	8000a6c <modbusBuildException>
 8000f8a:	0004      	movs	r4, r0
 8000f8c:	e0c6      	b.n	800111c <modbusParseRequest01020304+0x358>
		if (cres.exceptionCode) return modbusBuildException(status, function, cres.exceptionCode);
 8000f8e:	2218      	movs	r2, #24
 8000f90:	18bb      	adds	r3, r7, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00a      	beq.n	8000fae <modbusParseRequest01020304+0x1ea>
 8000f98:	18bb      	adds	r3, r7, r2
 8000f9a:	781a      	ldrb	r2, [r3, #0]
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	7819      	ldrb	r1, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff fd61 	bl	8000a6c <modbusBuildException>
 8000faa:	0004      	movs	r4, r0
 8000fac:	e0b6      	b.n	800111c <modbusParseRequest01020304+0x358>
	for (uint16_t i = 0; i < count; i++)
 8000fae:	2128      	movs	r1, #40	@ 0x28
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	881a      	ldrh	r2, [r3, #0]
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	3201      	adds	r2, #1
 8000fb8:	801a      	strh	r2, [r3, #0]
 8000fba:	2328      	movs	r3, #40	@ 0x28
 8000fbc:	18fa      	adds	r2, r7, r3
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	8812      	ldrh	r2, [r2, #0]
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d3bd      	bcc.n	8000f46 <modbusParseRequest01020304+0x182>
	}

	// ---- RESPONSE ----

	uint8_t dataLength = (isCoilType ? modbusBitsToBytes(count) : (count << 1));
 8000fca:	232b      	movs	r3, #43	@ 0x2b
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d007      	beq.n	8000fe4 <modbusParseRequest01020304+0x220>
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff fad3 	bl	8000584 <modbusBitsToBytes>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	e005      	b.n	8000ff0 <modbusParseRequest01020304+0x22c>
 8000fe4:	2320      	movs	r3, #32
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	18db      	adds	r3, r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	211f      	movs	r1, #31
 8000ff2:	187a      	adds	r2, r7, r1
 8000ff4:	7013      	strb	r3, [r2, #0]
	if (modbusSlaveAllocateResponse(status, 2 + dataLength))
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff fbd0 	bl	80007aa <modbusSlaveAllocateResponse>
 800100a:	1e03      	subs	r3, r0, #0
 800100c:	d00a      	beq.n	8001024 <modbusParseRequest01020304+0x260>
		return MODBUS_GENERAL_ERROR(ALLOC);
 800100e:	2303      	movs	r3, #3
 8001010:	439c      	bics	r4, r3
 8001012:	0023      	movs	r3, r4
 8001014:	001c      	movs	r4, r3
 8001016:	23fc      	movs	r3, #252	@ 0xfc
 8001018:	439c      	bics	r4, r3
 800101a:	0023      	movs	r3, r4
 800101c:	2208      	movs	r2, #8
 800101e:	4313      	orrs	r3, r2
 8001020:	001c      	movs	r4, r3
 8001022:	e07b      	b.n	800111c <modbusParseRequest01020304+0x358>

	status->response.pdu[0] = function;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	220b      	movs	r2, #11
 800102a:	18ba      	adds	r2, r7, r2
 800102c:	7812      	ldrb	r2, [r2, #0]
 800102e:	701a      	strb	r2, [r3, #0]
	status->response.pdu[1] = dataLength;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	3301      	adds	r3, #1
 8001036:	221f      	movs	r2, #31
 8001038:	18ba      	adds	r2, r7, r2
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	701a      	strb	r2, [r3, #0]
	
	// Clear with zeros, if we're writing bits
	for (uint8_t i = 0; i < dataLength; i++)
 800103e:	2327      	movs	r3, #39	@ 0x27
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e00d      	b.n	8001064 <modbusParseRequest01020304+0x2a0>
		status->response.pdu[2 + i] = 0;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	2127      	movs	r1, #39	@ 0x27
 800104e:	187a      	adds	r2, r7, r1
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	3202      	adds	r2, #2
 8001054:	189b      	adds	r3, r3, r2
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < dataLength; i++)
 800105a:	187b      	adds	r3, r7, r1
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	187b      	adds	r3, r7, r1
 8001060:	3201      	adds	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
 8001064:	2327      	movs	r3, #39	@ 0x27
 8001066:	18fa      	adds	r2, r7, r3
 8001068:	231f      	movs	r3, #31
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3e9      	bcc.n	8001048 <modbusParseRequest01020304+0x284>

	cargs.query = MODBUS_REGQ_R;
 8001074:	2310      	movs	r3, #16
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	2202      	movs	r2, #2
 800107a:	705a      	strb	r2, [r3, #1]
	for (uint16_t i = 0; i < count; i++)
 800107c:	2324      	movs	r3, #36	@ 0x24
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	2200      	movs	r2, #0
 8001082:	801a      	strh	r2, [r3, #0]
 8001084:	e03a      	b.n	80010fc <modbusParseRequest01020304+0x338>
	{
		cargs.index = index + i;
 8001086:	2322      	movs	r3, #34	@ 0x22
 8001088:	18fa      	adds	r2, r7, r3
 800108a:	2524      	movs	r5, #36	@ 0x24
 800108c:	197b      	adds	r3, r7, r5
 800108e:	8812      	ldrh	r2, [r2, #0]
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	18d3      	adds	r3, r2, r3
 8001094:	b29a      	uxth	r2, r3
 8001096:	2110      	movs	r1, #16
 8001098:	187b      	adds	r3, r7, r1
 800109a:	805a      	strh	r2, [r3, #2]
		(void) status->registerCallback(status, &cargs, &cres);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2618      	movs	r6, #24
 80010a2:	19ba      	adds	r2, r7, r6
 80010a4:	1879      	adds	r1, r7, r1
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	4798      	blx	r3
		
		if (isCoilType)
 80010aa:	232b      	movs	r3, #43	@ 0x2b
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00e      	beq.n	80010d2 <modbusParseRequest01020304+0x30e>
			modbusMaskWrite(&status->response.pdu[2], i, cres.value != 0);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	1c98      	adds	r0, r3, #2
 80010ba:	19bb      	adds	r3, r7, r6
 80010bc:	885b      	ldrh	r3, [r3, #2]
 80010be:	1e5a      	subs	r2, r3, #1
 80010c0:	4193      	sbcs	r3, r2
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	001a      	movs	r2, r3
 80010c6:	197b      	adds	r3, r7, r5
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	0019      	movs	r1, r3
 80010cc:	f7ff fa0b 	bl	80004e6 <modbusMaskWrite>
 80010d0:	e00e      	b.n	80010f0 <modbusParseRequest01020304+0x32c>
		else
			modbusWBE(&status->response.pdu[2 + (i << 1)], cres.value);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	2224      	movs	r2, #36	@ 0x24
 80010d8:	18ba      	adds	r2, r7, r2
 80010da:	8812      	ldrh	r2, [r2, #0]
 80010dc:	0052      	lsls	r2, r2, #1
 80010de:	3202      	adds	r2, #2
 80010e0:	189a      	adds	r2, r3, r2
 80010e2:	2318      	movs	r3, #24
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	885b      	ldrh	r3, [r3, #2]
 80010e8:	0019      	movs	r1, r3
 80010ea:	0010      	movs	r0, r2
 80010ec:	f7ff faad 	bl	800064a <modbusWBE>
	for (uint16_t i = 0; i < count; i++)
 80010f0:	2124      	movs	r1, #36	@ 0x24
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	881a      	ldrh	r2, [r3, #0]
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	3201      	adds	r2, #1
 80010fa:	801a      	strh	r2, [r3, #0]
 80010fc:	2324      	movs	r3, #36	@ 0x24
 80010fe:	18fa      	adds	r2, r7, r3
 8001100:	2320      	movs	r3, #32
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	8812      	ldrh	r2, [r2, #0]
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3bc      	bcc.n	8001086 <modbusParseRequest01020304+0x2c2>
	}

	return MODBUS_NO_ERROR();
 800110c:	2303      	movs	r3, #3
 800110e:	439c      	bics	r4, r3
 8001110:	0023      	movs	r3, r4
 8001112:	001c      	movs	r4, r3
 8001114:	23fc      	movs	r3, #252	@ 0xfc
 8001116:	439c      	bics	r4, r3
 8001118:	0023      	movs	r3, r4
 800111a:	001c      	movs	r4, r3
}
 800111c:	0023      	movs	r3, r4
 800111e:	0018      	movs	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	b00d      	add	sp, #52	@ 0x34
 8001124:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001126 <modbusParseRequest0506>:
LIGHTMODBUS_RET_ERROR modbusParseRequest0506(
	ModbusSlave *status,
	uint8_t function,
	const uint8_t *requestPDU,
	uint8_t requestLength)
{
 8001126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001128:	b08b      	sub	sp, #44	@ 0x2c
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	0008      	movs	r0, r1
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	0019      	movs	r1, r3
 8001134:	250b      	movs	r5, #11
 8001136:	197b      	adds	r3, r7, r5
 8001138:	1c02      	adds	r2, r0, #0
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	200a      	movs	r0, #10
 800113e:	183b      	adds	r3, r7, r0
 8001140:	1c0a      	adds	r2, r1, #0
 8001142:	701a      	strb	r2, [r3, #0]
	// Check frame length
	if (requestLength != 5)
 8001144:	183b      	adds	r3, r7, r0
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b05      	cmp	r3, #5
 800114a:	d008      	beq.n	800115e <modbusParseRequest0506+0x38>
		return modbusBuildException(status, function, MODBUS_EXCEP_ILLEGAL_VALUE);
 800114c:	197b      	adds	r3, r7, r5
 800114e:	7819      	ldrb	r1, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2203      	movs	r2, #3
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff fc89 	bl	8000a6c <modbusBuildException>
 800115a:	0004      	movs	r4, r0
 800115c:	e0c2      	b.n	80012e4 <modbusParseRequest0506+0x1be>

	// Get register index and value
	ModbusDataType datatype = function == 5 ? MODBUS_COIL : MODBUS_HOLDING_REGISTER;
 800115e:	230b      	movs	r3, #11
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d101      	bne.n	800116c <modbusParseRequest0506+0x46>
 8001168:	2204      	movs	r2, #4
 800116a:	e000      	b.n	800116e <modbusParseRequest0506+0x48>
 800116c:	2201      	movs	r2, #1
 800116e:	2327      	movs	r3, #39	@ 0x27
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	701a      	strb	r2, [r3, #0]
	uint16_t index = modbusRBE(&requestPDU[1]);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3301      	adds	r3, #1
 8001178:	2224      	movs	r2, #36	@ 0x24
 800117a:	18bd      	adds	r5, r7, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff fa47 	bl	8000610 <modbusRBE>
 8001182:	0003      	movs	r3, r0
 8001184:	802b      	strh	r3, [r5, #0]
	uint16_t value = modbusRBE(&requestPDU[3]);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3303      	adds	r3, #3
 800118a:	2622      	movs	r6, #34	@ 0x22
 800118c:	19bd      	adds	r5, r7, r6
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff fa3e 	bl	8000610 <modbusRBE>
 8001194:	0003      	movs	r3, r0
 8001196:	802b      	strh	r3, [r5, #0]

	// For coils - check if coil value is valid
	if (datatype == MODBUS_COIL && value != 0x0000 && value != 0xFF00)
 8001198:	2327      	movs	r3, #39	@ 0x27
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d113      	bne.n	80011ca <modbusParseRequest0506+0xa4>
 80011a2:	19bb      	adds	r3, r7, r6
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00f      	beq.n	80011ca <modbusParseRequest0506+0xa4>
 80011aa:	19bb      	adds	r3, r7, r6
 80011ac:	881a      	ldrh	r2, [r3, #0]
 80011ae:	23ff      	movs	r3, #255	@ 0xff
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d009      	beq.n	80011ca <modbusParseRequest0506+0xa4>
		return modbusBuildException(status, function, MODBUS_EXCEP_ILLEGAL_VALUE);
 80011b6:	230b      	movs	r3, #11
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	7819      	ldrb	r1, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2203      	movs	r2, #3
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff fc53 	bl	8000a6c <modbusBuildException>
 80011c6:	0004      	movs	r4, r0
 80011c8:	e08c      	b.n	80012e4 <modbusParseRequest0506+0x1be>

	// Prepare callback args
	ModbusRegisterCallbackResult cres;
	ModbusRegisterCallbackArgs cargs = {
 80011ca:	2114      	movs	r1, #20
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	2027      	movs	r0, #39	@ 0x27
 80011d0:	183a      	adds	r2, r7, r0
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2201      	movs	r2, #1
 80011da:	705a      	strb	r2, [r3, #1]
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	2224      	movs	r2, #36	@ 0x24
 80011e0:	18ba      	adds	r2, r7, r2
 80011e2:	8812      	ldrh	r2, [r2, #0]
 80011e4:	805a      	strh	r2, [r3, #2]
		.type = datatype,
		.query = MODBUS_REGQ_W_CHECK,
		.index = index,
		.value = (uint16_t)((datatype == MODBUS_COIL) ? (value != 0) : value),
 80011e6:	183b      	adds	r3, r7, r0
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d107      	bne.n	80011fe <modbusParseRequest0506+0xd8>
 80011ee:	2322      	movs	r3, #34	@ 0x22
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	1e5a      	subs	r2, r3, #1
 80011f6:	4193      	sbcs	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	001a      	movs	r2, r3
 80011fc:	e002      	b.n	8001204 <modbusParseRequest0506+0xde>
 80011fe:	2322      	movs	r3, #34	@ 0x22
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	881a      	ldrh	r2, [r3, #0]
	ModbusRegisterCallbackArgs cargs = {
 8001204:	2114      	movs	r1, #20
 8001206:	187b      	adds	r3, r7, r1
 8001208:	809a      	strh	r2, [r3, #4]
 800120a:	187b      	adds	r3, r7, r1
 800120c:	260b      	movs	r6, #11
 800120e:	19ba      	adds	r2, r7, r6
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	719a      	strb	r2, [r3, #6]
		.function = function,
	};

	// Check if the register/coil can be written
	ModbusError fail = status->registerCallback(status, &cargs, &cres);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2221      	movs	r2, #33	@ 0x21
 800121a:	18bd      	adds	r5, r7, r2
 800121c:	201c      	movs	r0, #28
 800121e:	183a      	adds	r2, r7, r0
 8001220:	1879      	adds	r1, r7, r1
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	4798      	blx	r3
 8001226:	0003      	movs	r3, r0
 8001228:	702b      	strb	r3, [r5, #0]
	if (fail) return modbusBuildException(status, function, MODBUS_EXCEP_SLAVE_FAILURE);
 800122a:	2221      	movs	r2, #33	@ 0x21
 800122c:	18bb      	adds	r3, r7, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d008      	beq.n	8001246 <modbusParseRequest0506+0x120>
 8001234:	19bb      	adds	r3, r7, r6
 8001236:	7819      	ldrb	r1, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2204      	movs	r2, #4
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff fc15 	bl	8000a6c <modbusBuildException>
 8001242:	0004      	movs	r4, r0
 8001244:	e04e      	b.n	80012e4 <modbusParseRequest0506+0x1be>
	if (cres.exceptionCode) return modbusBuildException(status, function, cres.exceptionCode);
 8001246:	221c      	movs	r2, #28
 8001248:	18bb      	adds	r3, r7, r2
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00a      	beq.n	8001266 <modbusParseRequest0506+0x140>
 8001250:	18bb      	adds	r3, r7, r2
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	230b      	movs	r3, #11
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	7819      	ldrb	r1, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff fc05 	bl	8000a6c <modbusBuildException>
 8001262:	0004      	movs	r4, r0
 8001264:	e03e      	b.n	80012e4 <modbusParseRequest0506+0x1be>

	// Write coil/register
	// Keep in mind that 0xff00 is 0 when cast to uint8_t
	cargs.query = MODBUS_REGQ_W;
 8001266:	2114      	movs	r1, #20
 8001268:	187b      	adds	r3, r7, r1
 800126a:	2203      	movs	r2, #3
 800126c:	705a      	strb	r2, [r3, #1]
	(void) status->registerCallback(status, &cargs, &cres);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	221c      	movs	r2, #28
 8001274:	18ba      	adds	r2, r7, r2
 8001276:	1879      	adds	r1, r7, r1
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	4798      	blx	r3

	// ---- RESPONSE ----

	if (modbusSlaveAllocateResponse(status, 5))
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2105      	movs	r1, #5
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff fa92 	bl	80007aa <modbusSlaveAllocateResponse>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d00a      	beq.n	80012a0 <modbusParseRequest0506+0x17a>
		return MODBUS_GENERAL_ERROR(ALLOC);
 800128a:	2303      	movs	r3, #3
 800128c:	439c      	bics	r4, r3
 800128e:	0023      	movs	r3, r4
 8001290:	001c      	movs	r4, r3
 8001292:	23fc      	movs	r3, #252	@ 0xfc
 8001294:	439c      	bics	r4, r3
 8001296:	0023      	movs	r3, r4
 8001298:	2208      	movs	r2, #8
 800129a:	4313      	orrs	r3, r2
 800129c:	001c      	movs	r4, r3
 800129e:	e021      	b.n	80012e4 <modbusParseRequest0506+0x1be>

	status->response.pdu[0] = function;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	220b      	movs	r2, #11
 80012a6:	18ba      	adds	r2, r7, r2
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	701a      	strb	r2, [r3, #0]
	modbusWBE(&status->response.pdu[1], index);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	2324      	movs	r3, #36	@ 0x24
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	0019      	movs	r1, r3
 80012ba:	0010      	movs	r0, r2
 80012bc:	f7ff f9c5 	bl	800064a <modbusWBE>
	modbusWBE(&status->response.pdu[3], value);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	1cda      	adds	r2, r3, #3
 80012c6:	2322      	movs	r3, #34	@ 0x22
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	0019      	movs	r1, r3
 80012ce:	0010      	movs	r0, r2
 80012d0:	f7ff f9bb 	bl	800064a <modbusWBE>

	return MODBUS_NO_ERROR();
 80012d4:	2303      	movs	r3, #3
 80012d6:	439c      	bics	r4, r3
 80012d8:	0023      	movs	r3, r4
 80012da:	001c      	movs	r4, r3
 80012dc:	23fc      	movs	r3, #252	@ 0xfc
 80012de:	439c      	bics	r4, r3
 80012e0:	0023      	movs	r3, r4
 80012e2:	001c      	movs	r4, r3
}
 80012e4:	0023      	movs	r3, r4
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b00b      	add	sp, #44	@ 0x2c
 80012ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012ee <modbusParseRequest1516>:
LIGHTMODBUS_RET_ERROR modbusParseRequest1516(
	ModbusSlave *status,
	uint8_t function,
	const uint8_t *requestPDU,
	uint8_t requestLength)
{
 80012ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f0:	b08d      	sub	sp, #52	@ 0x34
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	0008      	movs	r0, r1
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	0019      	movs	r1, r3
 80012fc:	250b      	movs	r5, #11
 80012fe:	197b      	adds	r3, r7, r5
 8001300:	1c02      	adds	r2, r0, #0
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	200a      	movs	r0, #10
 8001306:	183b      	adds	r3, r7, r0
 8001308:	1c0a      	adds	r2, r1, #0
 800130a:	701a      	strb	r2, [r3, #0]
	// Check length
	if (requestLength < 6)
 800130c:	183b      	adds	r3, r7, r0
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b05      	cmp	r3, #5
 8001312:	d808      	bhi.n	8001326 <modbusParseRequest1516+0x38>
		return modbusBuildException(status, function, MODBUS_EXCEP_ILLEGAL_VALUE);
 8001314:	197b      	adds	r3, r7, r5
 8001316:	7819      	ldrb	r1, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2203      	movs	r2, #3
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff fba5 	bl	8000a6c <modbusBuildException>
 8001322:	0004      	movs	r4, r0
 8001324:	e17d      	b.n	8001622 <modbusParseRequest1516+0x334>

	// Get first index and register count
	ModbusDataType datatype = function == 15 ? MODBUS_COIL : MODBUS_HOLDING_REGISTER;
 8001326:	230b      	movs	r3, #11
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d101      	bne.n	8001334 <modbusParseRequest1516+0x46>
 8001330:	2204      	movs	r2, #4
 8001332:	e000      	b.n	8001336 <modbusParseRequest1516+0x48>
 8001334:	2201      	movs	r2, #1
 8001336:	212b      	movs	r1, #43	@ 0x2b
 8001338:	187b      	adds	r3, r7, r1
 800133a:	701a      	strb	r2, [r3, #0]
	uint16_t maxCount = datatype == MODBUS_COIL ? 1968 : 123;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d102      	bne.n	800134a <modbusParseRequest1516+0x5c>
 8001344:	23f6      	movs	r3, #246	@ 0xf6
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	e000      	b.n	800134c <modbusParseRequest1516+0x5e>
 800134a:	227b      	movs	r2, #123	@ 0x7b
 800134c:	2328      	movs	r3, #40	@ 0x28
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	801a      	strh	r2, [r3, #0]
	uint16_t index = modbusRBE(&requestPDU[1]);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3301      	adds	r3, #1
 8001356:	2226      	movs	r2, #38	@ 0x26
 8001358:	18bd      	adds	r5, r7, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff f958 	bl	8000610 <modbusRBE>
 8001360:	0003      	movs	r3, r0
 8001362:	802b      	strh	r3, [r5, #0]
	uint16_t count = modbusRBE(&requestPDU[3]);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3303      	adds	r3, #3
 8001368:	2224      	movs	r2, #36	@ 0x24
 800136a:	18bd      	adds	r5, r7, r2
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff f94f 	bl	8000610 <modbusRBE>
 8001372:	0003      	movs	r3, r0
 8001374:	802b      	strh	r3, [r5, #0]
	uint8_t declaredLength = requestPDU[5];
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	1d5a      	adds	r2, r3, #5
 800137a:	2123      	movs	r1, #35	@ 0x23
 800137c:	187b      	adds	r3, r7, r1
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	701a      	strb	r2, [r3, #0]

	// Check if the declared length is correct
	if (declaredLength == 0 || declaredLength != requestLength - 6)
 8001382:	000a      	movs	r2, r1
 8001384:	18bb      	adds	r3, r7, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <modbusParseRequest1516+0xae>
 800138c:	18bb      	adds	r3, r7, r2
 800138e:	781a      	ldrb	r2, [r3, #0]
 8001390:	230a      	movs	r3, #10
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	3b06      	subs	r3, #6
 8001398:	429a      	cmp	r2, r3
 800139a:	d009      	beq.n	80013b0 <modbusParseRequest1516+0xc2>
		return modbusBuildException(status, function, MODBUS_EXCEP_ILLEGAL_VALUE);
 800139c:	230b      	movs	r3, #11
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	7819      	ldrb	r1, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2203      	movs	r2, #3
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff fb60 	bl	8000a6c <modbusBuildException>
 80013ac:	0004      	movs	r4, r0
 80013ae:	e138      	b.n	8001622 <modbusParseRequest1516+0x334>

	// Check count
	if (count == 0
 80013b0:	2124      	movs	r1, #36	@ 0x24
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d01b      	beq.n	80013f2 <modbusParseRequest1516+0x104>
		|| count > maxCount
 80013ba:	187a      	adds	r2, r7, r1
 80013bc:	2328      	movs	r3, #40	@ 0x28
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	8812      	ldrh	r2, [r2, #0]
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d814      	bhi.n	80013f2 <modbusParseRequest1516+0x104>
		|| declaredLength != (datatype == MODBUS_COIL ? modbusBitsToBytes(count) : (count << 1)))
 80013c8:	2323      	movs	r3, #35	@ 0x23
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	781d      	ldrb	r5, [r3, #0]
 80013ce:	232b      	movs	r3, #43	@ 0x2b
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d106      	bne.n	80013e6 <modbusParseRequest1516+0xf8>
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff f8d1 	bl	8000584 <modbusBitsToBytes>
 80013e2:	0003      	movs	r3, r0
 80013e4:	e003      	b.n	80013ee <modbusParseRequest1516+0x100>
 80013e6:	2324      	movs	r3, #36	@ 0x24
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	42ab      	cmp	r3, r5
 80013f0:	d009      	beq.n	8001406 <modbusParseRequest1516+0x118>
		return modbusBuildException(status, function, MODBUS_EXCEP_ILLEGAL_VALUE);
 80013f2:	230b      	movs	r3, #11
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	7819      	ldrb	r1, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2203      	movs	r2, #3
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff fb35 	bl	8000a6c <modbusBuildException>
 8001402:	0004      	movs	r4, r0
 8001404:	e10d      	b.n	8001622 <modbusParseRequest1516+0x334>

	// Addresss range check
	if (modbusCheckRangeU16(index, count))
 8001406:	2324      	movs	r3, #36	@ 0x24
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	2326      	movs	r3, #38	@ 0x26
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff f932 	bl	800067e <modbusCheckRangeU16>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d009      	beq.n	8001432 <modbusParseRequest1516+0x144>
		return modbusBuildException(status, function, MODBUS_EXCEP_ILLEGAL_ADDRESS);
 800141e:	230b      	movs	r3, #11
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	7819      	ldrb	r1, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2202      	movs	r2, #2
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff fb1f 	bl	8000a6c <modbusBuildException>
 800142e:	0004      	movs	r4, r0
 8001430:	e0f7      	b.n	8001622 <modbusParseRequest1516+0x334>

	// Prepare callback args
	ModbusRegisterCallbackResult cres;
	ModbusRegisterCallbackArgs cargs = {
 8001432:	2114      	movs	r1, #20
 8001434:	187b      	adds	r3, r7, r1
 8001436:	222b      	movs	r2, #43	@ 0x2b
 8001438:	18ba      	adds	r2, r7, r2
 800143a:	7812      	ldrb	r2, [r2, #0]
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2201      	movs	r2, #1
 8001442:	705a      	strb	r2, [r3, #1]
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2200      	movs	r2, #0
 8001448:	805a      	strh	r2, [r3, #2]
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2200      	movs	r2, #0
 800144e:	809a      	strh	r2, [r3, #4]
 8001450:	187b      	adds	r3, r7, r1
 8001452:	220b      	movs	r2, #11
 8001454:	18ba      	adds	r2, r7, r2
 8001456:	7812      	ldrb	r2, [r2, #0]
 8001458:	719a      	strb	r2, [r3, #6]
		.value = 0,
		.function = function,
	};

	// Check write access
	for (uint16_t i = 0; i < count; i++)
 800145a:	232e      	movs	r3, #46	@ 0x2e
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	2200      	movs	r2, #0
 8001460:	801a      	strh	r2, [r3, #0]
 8001462:	e059      	b.n	8001518 <modbusParseRequest1516+0x22a>
	{
		cargs.index = index + i;
 8001464:	2326      	movs	r3, #38	@ 0x26
 8001466:	18fa      	adds	r2, r7, r3
 8001468:	212e      	movs	r1, #46	@ 0x2e
 800146a:	187b      	adds	r3, r7, r1
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	18d3      	adds	r3, r2, r3
 8001472:	b29a      	uxth	r2, r3
 8001474:	2314      	movs	r3, #20
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	805a      	strh	r2, [r3, #2]
		cargs.value = datatype == MODBUS_COIL ? modbusMaskRead(&requestPDU[6], i) : modbusRBE(&requestPDU[6 + (i << 1)]);
 800147a:	232b      	movs	r3, #43	@ 0x2b
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d10a      	bne.n	800149a <modbusParseRequest1516+0x1ac>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	1d9a      	adds	r2, r3, #6
 8001488:	187b      	adds	r3, r7, r1
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	0019      	movs	r1, r3
 800148e:	0010      	movs	r0, r2
 8001490:	f7ff f80a 	bl	80004a8 <modbusMaskRead>
 8001494:	0003      	movs	r3, r0
 8001496:	001a      	movs	r2, r3
 8001498:	e00c      	b.n	80014b4 <modbusParseRequest1516+0x1c6>
 800149a:	232e      	movs	r3, #46	@ 0x2e
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	3306      	adds	r3, #6
 80014a4:	001a      	movs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	189b      	adds	r3, r3, r2
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff f8b0 	bl	8000610 <modbusRBE>
 80014b0:	0003      	movs	r3, r0
 80014b2:	001a      	movs	r2, r3
 80014b4:	2114      	movs	r1, #20
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	809a      	strh	r2, [r3, #4]
		ModbusError fail = status->registerCallback(status, &cargs, &cres);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2622      	movs	r6, #34	@ 0x22
 80014c0:	19bd      	adds	r5, r7, r6
 80014c2:	221c      	movs	r2, #28
 80014c4:	18ba      	adds	r2, r7, r2
 80014c6:	1879      	adds	r1, r7, r1
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	4798      	blx	r3
 80014cc:	0003      	movs	r3, r0
 80014ce:	702b      	strb	r3, [r5, #0]
		if (fail) return modbusBuildException(status, function, MODBUS_EXCEP_SLAVE_FAILURE);
 80014d0:	19bb      	adds	r3, r7, r6
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d009      	beq.n	80014ec <modbusParseRequest1516+0x1fe>
 80014d8:	230b      	movs	r3, #11
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	7819      	ldrb	r1, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2204      	movs	r2, #4
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7ff fac2 	bl	8000a6c <modbusBuildException>
 80014e8:	0004      	movs	r4, r0
 80014ea:	e09a      	b.n	8001622 <modbusParseRequest1516+0x334>
		if (cres.exceptionCode) return modbusBuildException(status, function, cres.exceptionCode);
 80014ec:	221c      	movs	r2, #28
 80014ee:	18bb      	adds	r3, r7, r2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00a      	beq.n	800150c <modbusParseRequest1516+0x21e>
 80014f6:	18bb      	adds	r3, r7, r2
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	230b      	movs	r3, #11
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	7819      	ldrb	r1, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff fab2 	bl	8000a6c <modbusBuildException>
 8001508:	0004      	movs	r4, r0
 800150a:	e08a      	b.n	8001622 <modbusParseRequest1516+0x334>
	for (uint16_t i = 0; i < count; i++)
 800150c:	212e      	movs	r1, #46	@ 0x2e
 800150e:	187b      	adds	r3, r7, r1
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	187b      	adds	r3, r7, r1
 8001514:	3201      	adds	r2, #1
 8001516:	801a      	strh	r2, [r3, #0]
 8001518:	232e      	movs	r3, #46	@ 0x2e
 800151a:	18fa      	adds	r2, r7, r3
 800151c:	2324      	movs	r3, #36	@ 0x24
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	8812      	ldrh	r2, [r2, #0]
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d39d      	bcc.n	8001464 <modbusParseRequest1516+0x176>
	}

	// Write coils
	cargs.query = MODBUS_REGQ_W;
 8001528:	2314      	movs	r3, #20
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2203      	movs	r2, #3
 800152e:	705a      	strb	r2, [r3, #1]
	for (uint16_t i = 0; i < count; i++)
 8001530:	232c      	movs	r3, #44	@ 0x2c
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	2200      	movs	r2, #0
 8001536:	801a      	strh	r2, [r3, #0]
 8001538:	e037      	b.n	80015aa <modbusParseRequest1516+0x2bc>
	{
		cargs.index = index + i;
 800153a:	2326      	movs	r3, #38	@ 0x26
 800153c:	18fa      	adds	r2, r7, r3
 800153e:	212c      	movs	r1, #44	@ 0x2c
 8001540:	187b      	adds	r3, r7, r1
 8001542:	8812      	ldrh	r2, [r2, #0]
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	18d3      	adds	r3, r2, r3
 8001548:	b29a      	uxth	r2, r3
 800154a:	2314      	movs	r3, #20
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	805a      	strh	r2, [r3, #2]
		cargs.value = datatype == MODBUS_COIL ? modbusMaskRead(&requestPDU[6], i) : modbusRBE(&requestPDU[6 + (i << 1)]);
 8001550:	232b      	movs	r3, #43	@ 0x2b
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b04      	cmp	r3, #4
 8001558:	d10a      	bne.n	8001570 <modbusParseRequest1516+0x282>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	1d9a      	adds	r2, r3, #6
 800155e:	187b      	adds	r3, r7, r1
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	0019      	movs	r1, r3
 8001564:	0010      	movs	r0, r2
 8001566:	f7fe ff9f 	bl	80004a8 <modbusMaskRead>
 800156a:	0003      	movs	r3, r0
 800156c:	001a      	movs	r2, r3
 800156e:	e00c      	b.n	800158a <modbusParseRequest1516+0x29c>
 8001570:	232c      	movs	r3, #44	@ 0x2c
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	3306      	adds	r3, #6
 800157a:	001a      	movs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	189b      	adds	r3, r3, r2
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff f845 	bl	8000610 <modbusRBE>
 8001586:	0003      	movs	r3, r0
 8001588:	001a      	movs	r2, r3
 800158a:	2114      	movs	r1, #20
 800158c:	187b      	adds	r3, r7, r1
 800158e:	809a      	strh	r2, [r3, #4]
		(void) status->registerCallback(status, &cargs, &cres);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	221c      	movs	r2, #28
 8001596:	18ba      	adds	r2, r7, r2
 8001598:	1879      	adds	r1, r7, r1
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	4798      	blx	r3
	for (uint16_t i = 0; i < count; i++)
 800159e:	212c      	movs	r1, #44	@ 0x2c
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	881a      	ldrh	r2, [r3, #0]
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	3201      	adds	r2, #1
 80015a8:	801a      	strh	r2, [r3, #0]
 80015aa:	232c      	movs	r3, #44	@ 0x2c
 80015ac:	18fa      	adds	r2, r7, r3
 80015ae:	2324      	movs	r3, #36	@ 0x24
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	8812      	ldrh	r2, [r2, #0]
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d3bf      	bcc.n	800153a <modbusParseRequest1516+0x24c>
	}

	// ---- RESPONSE ----

	if (modbusSlaveAllocateResponse(status, 5))
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2105      	movs	r1, #5
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff f8f3 	bl	80007aa <modbusSlaveAllocateResponse>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d00a      	beq.n	80015de <modbusParseRequest1516+0x2f0>
		return MODBUS_GENERAL_ERROR(ALLOC);
 80015c8:	2303      	movs	r3, #3
 80015ca:	439c      	bics	r4, r3
 80015cc:	0023      	movs	r3, r4
 80015ce:	001c      	movs	r4, r3
 80015d0:	23fc      	movs	r3, #252	@ 0xfc
 80015d2:	439c      	bics	r4, r3
 80015d4:	0023      	movs	r3, r4
 80015d6:	2208      	movs	r2, #8
 80015d8:	4313      	orrs	r3, r2
 80015da:	001c      	movs	r4, r3
 80015dc:	e021      	b.n	8001622 <modbusParseRequest1516+0x334>

	status->response.pdu[0] = function;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	220b      	movs	r2, #11
 80015e4:	18ba      	adds	r2, r7, r2
 80015e6:	7812      	ldrb	r2, [r2, #0]
 80015e8:	701a      	strb	r2, [r3, #0]
	modbusWBE(&status->response.pdu[1], index);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	2326      	movs	r3, #38	@ 0x26
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	0019      	movs	r1, r3
 80015f8:	0010      	movs	r0, r2
 80015fa:	f7ff f826 	bl	800064a <modbusWBE>
	modbusWBE(&status->response.pdu[3], count);	
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	1cda      	adds	r2, r3, #3
 8001604:	2324      	movs	r3, #36	@ 0x24
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	0019      	movs	r1, r3
 800160c:	0010      	movs	r0, r2
 800160e:	f7ff f81c 	bl	800064a <modbusWBE>

	return MODBUS_NO_ERROR();
 8001612:	2303      	movs	r3, #3
 8001614:	439c      	bics	r4, r3
 8001616:	0023      	movs	r3, r4
 8001618:	001c      	movs	r4, r3
 800161a:	23fc      	movs	r3, #252	@ 0xfc
 800161c:	439c      	bics	r4, r3
 800161e:	0023      	movs	r3, r4
 8001620:	001c      	movs	r4, r3
}
 8001622:	0023      	movs	r3, r4
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b00d      	add	sp, #52	@ 0x34
 800162a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800162c <modbusParseRequest22>:
LIGHTMODBUS_RET_ERROR modbusParseRequest22(
	ModbusSlave *status,
	uint8_t function,
	const uint8_t *requestPDU,
	uint8_t requestLength)
{
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	b08b      	sub	sp, #44	@ 0x2c
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	0008      	movs	r0, r1
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	0019      	movs	r1, r3
 800163a:	250b      	movs	r5, #11
 800163c:	197b      	adds	r3, r7, r5
 800163e:	1c02      	adds	r2, r0, #0
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	200a      	movs	r0, #10
 8001644:	183b      	adds	r3, r7, r0
 8001646:	1c0a      	adds	r2, r1, #0
 8001648:	701a      	strb	r2, [r3, #0]
	// Check length	
	if (requestLength != 7)
 800164a:	183b      	adds	r3, r7, r0
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b07      	cmp	r3, #7
 8001650:	d008      	beq.n	8001664 <modbusParseRequest22+0x38>
		return modbusBuildException(status, function, MODBUS_EXCEP_ILLEGAL_VALUE);
 8001652:	197b      	adds	r3, r7, r5
 8001654:	7819      	ldrb	r1, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2203      	movs	r2, #3
 800165a:	0018      	movs	r0, r3
 800165c:	f7ff fa06 	bl	8000a6c <modbusBuildException>
 8001660:	0004      	movs	r4, r0
 8001662:	e0fc      	b.n	800185e <modbusParseRequest22+0x232>

	// Get index and masks
	uint16_t index   = modbusRBE(&requestPDU[1]);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3301      	adds	r3, #1
 8001668:	2626      	movs	r6, #38	@ 0x26
 800166a:	19bd      	adds	r5, r7, r6
 800166c:	0018      	movs	r0, r3
 800166e:	f7fe ffcf 	bl	8000610 <modbusRBE>
 8001672:	0003      	movs	r3, r0
 8001674:	802b      	strh	r3, [r5, #0]
	uint16_t andmask = modbusRBE(&requestPDU[3]);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3303      	adds	r3, #3
 800167a:	2224      	movs	r2, #36	@ 0x24
 800167c:	18bd      	adds	r5, r7, r2
 800167e:	0018      	movs	r0, r3
 8001680:	f7fe ffc6 	bl	8000610 <modbusRBE>
 8001684:	0003      	movs	r3, r0
 8001686:	802b      	strh	r3, [r5, #0]
	uint16_t ormask  = modbusRBE(&requestPDU[5]);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3305      	adds	r3, #5
 800168c:	2222      	movs	r2, #34	@ 0x22
 800168e:	18bd      	adds	r5, r7, r2
 8001690:	0018      	movs	r0, r3
 8001692:	f7fe ffbd 	bl	8000610 <modbusRBE>
 8001696:	0003      	movs	r3, r0
 8001698:	802b      	strh	r3, [r5, #0]

	// Prepare callback args
	ModbusRegisterCallbackResult cres;
	ModbusRegisterCallbackArgs cargs = {
 800169a:	2110      	movs	r1, #16
 800169c:	187b      	adds	r3, r7, r1
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	187b      	adds	r3, r7, r1
 80016a4:	2200      	movs	r2, #0
 80016a6:	705a      	strb	r2, [r3, #1]
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	19ba      	adds	r2, r7, r6
 80016ac:	8812      	ldrh	r2, [r2, #0]
 80016ae:	805a      	strh	r2, [r3, #2]
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	2200      	movs	r2, #0
 80016b4:	809a      	strh	r2, [r3, #4]
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	260b      	movs	r6, #11
 80016ba:	19ba      	adds	r2, r7, r6
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	719a      	strb	r2, [r3, #6]
		.value = 0,
		.function = function,
	};

	// Check read access
	cargs.query = MODBUS_REGQ_R_CHECK;
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	2200      	movs	r2, #0
 80016c4:	705a      	strb	r2, [r3, #1]
	ModbusError fail = status->registerCallback(status, &cargs, &cres);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2221      	movs	r2, #33	@ 0x21
 80016cc:	18bd      	adds	r5, r7, r2
 80016ce:	2018      	movs	r0, #24
 80016d0:	183a      	adds	r2, r7, r0
 80016d2:	1879      	adds	r1, r7, r1
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	4798      	blx	r3
 80016d8:	0003      	movs	r3, r0
 80016da:	702b      	strb	r3, [r5, #0]
	if (fail) return modbusBuildException(status, function, MODBUS_EXCEP_SLAVE_FAILURE);
 80016dc:	2221      	movs	r2, #33	@ 0x21
 80016de:	18bb      	adds	r3, r7, r2
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d008      	beq.n	80016f8 <modbusParseRequest22+0xcc>
 80016e6:	19bb      	adds	r3, r7, r6
 80016e8:	7819      	ldrb	r1, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2204      	movs	r2, #4
 80016ee:	0018      	movs	r0, r3
 80016f0:	f7ff f9bc 	bl	8000a6c <modbusBuildException>
 80016f4:	0004      	movs	r4, r0
 80016f6:	e0b2      	b.n	800185e <modbusParseRequest22+0x232>
	if (cres.exceptionCode) return modbusBuildException(status, function, cres.exceptionCode);
 80016f8:	2218      	movs	r2, #24
 80016fa:	18bb      	adds	r3, r7, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00a      	beq.n	8001718 <modbusParseRequest22+0xec>
 8001702:	18bb      	adds	r3, r7, r2
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	230b      	movs	r3, #11
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	7819      	ldrb	r1, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff f9ac 	bl	8000a6c <modbusBuildException>
 8001714:	0004      	movs	r4, r0
 8001716:	e0a2      	b.n	800185e <modbusParseRequest22+0x232>

	// Read the register
	cargs.query = MODBUS_REGQ_R;
 8001718:	2510      	movs	r5, #16
 800171a:	197b      	adds	r3, r7, r5
 800171c:	2202      	movs	r2, #2
 800171e:	705a      	strb	r2, [r3, #1]
	(void) status->registerCallback(status, &cargs, &cres);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2618      	movs	r6, #24
 8001726:	19ba      	adds	r2, r7, r6
 8001728:	1979      	adds	r1, r7, r5
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	4798      	blx	r3
	uint16_t value = cres.value;
 800172e:	201e      	movs	r0, #30
 8001730:	183b      	adds	r3, r7, r0
 8001732:	19ba      	adds	r2, r7, r6
 8001734:	8852      	ldrh	r2, [r2, #2]
 8001736:	801a      	strh	r2, [r3, #0]

	// Compute new value for the register
	value = (value & andmask) | (ormask & ~andmask);
 8001738:	183b      	adds	r3, r7, r0
 800173a:	2124      	movs	r1, #36	@ 0x24
 800173c:	187a      	adds	r2, r7, r1
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	8812      	ldrh	r2, [r2, #0]
 8001742:	4013      	ands	r3, r2
 8001744:	b29b      	uxth	r3, r3
 8001746:	b21a      	sxth	r2, r3
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2100      	movs	r1, #0
 800174c:	5e5b      	ldrsh	r3, [r3, r1]
 800174e:	43db      	mvns	r3, r3
 8001750:	b21b      	sxth	r3, r3
 8001752:	469c      	mov	ip, r3
 8001754:	2122      	movs	r1, #34	@ 0x22
 8001756:	1879      	adds	r1, r7, r1
 8001758:	2300      	movs	r3, #0
 800175a:	5ec9      	ldrsh	r1, [r1, r3]
 800175c:	4663      	mov	r3, ip
 800175e:	400b      	ands	r3, r1
 8001760:	b21b      	sxth	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b21a      	sxth	r2, r3
 8001766:	183b      	adds	r3, r7, r0
 8001768:	801a      	strh	r2, [r3, #0]

	// Check write access
	cargs.query = MODBUS_REGQ_W_CHECK;
 800176a:	0029      	movs	r1, r5
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2201      	movs	r2, #1
 8001770:	705a      	strb	r2, [r3, #1]
	cargs.value = value;
 8001772:	187b      	adds	r3, r7, r1
 8001774:	183a      	adds	r2, r7, r0
 8001776:	8812      	ldrh	r2, [r2, #0]
 8001778:	809a      	strh	r2, [r3, #4]
	fail = status->registerCallback(status, &cargs, &cres);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2221      	movs	r2, #33	@ 0x21
 8001780:	18bd      	adds	r5, r7, r2
 8001782:	19ba      	adds	r2, r7, r6
 8001784:	1879      	adds	r1, r7, r1
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	4798      	blx	r3
 800178a:	0003      	movs	r3, r0
 800178c:	702b      	strb	r3, [r5, #0]
	if (fail) return modbusBuildException(status, function, MODBUS_EXCEP_SLAVE_FAILURE);
 800178e:	2221      	movs	r2, #33	@ 0x21
 8001790:	18bb      	adds	r3, r7, r2
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d009      	beq.n	80017ac <modbusParseRequest22+0x180>
 8001798:	230b      	movs	r3, #11
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	7819      	ldrb	r1, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2204      	movs	r2, #4
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff f962 	bl	8000a6c <modbusBuildException>
 80017a8:	0004      	movs	r4, r0
 80017aa:	e058      	b.n	800185e <modbusParseRequest22+0x232>
	if (cres.exceptionCode) return modbusBuildException(status, function, cres.exceptionCode);
 80017ac:	2218      	movs	r2, #24
 80017ae:	18bb      	adds	r3, r7, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00a      	beq.n	80017cc <modbusParseRequest22+0x1a0>
 80017b6:	18bb      	adds	r3, r7, r2
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	230b      	movs	r3, #11
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	7819      	ldrb	r1, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	0018      	movs	r0, r3
 80017c4:	f7ff f952 	bl	8000a6c <modbusBuildException>
 80017c8:	0004      	movs	r4, r0
 80017ca:	e048      	b.n	800185e <modbusParseRequest22+0x232>

	// Write the register
	cargs.query = MODBUS_REGQ_W;
 80017cc:	2110      	movs	r1, #16
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	2203      	movs	r2, #3
 80017d2:	705a      	strb	r2, [r3, #1]
	(void) status->registerCallback(status, &cargs, &cres);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2218      	movs	r2, #24
 80017da:	18ba      	adds	r2, r7, r2
 80017dc:	1879      	adds	r1, r7, r1
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	4798      	blx	r3
	
	// ---- RESPONSE ----

	if (modbusSlaveAllocateResponse(status, 7))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2107      	movs	r1, #7
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7fe ffdf 	bl	80007aa <modbusSlaveAllocateResponse>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d00a      	beq.n	8001806 <modbusParseRequest22+0x1da>
		return MODBUS_GENERAL_ERROR(ALLOC);
 80017f0:	2303      	movs	r3, #3
 80017f2:	439c      	bics	r4, r3
 80017f4:	0023      	movs	r3, r4
 80017f6:	001c      	movs	r4, r3
 80017f8:	23fc      	movs	r3, #252	@ 0xfc
 80017fa:	439c      	bics	r4, r3
 80017fc:	0023      	movs	r3, r4
 80017fe:	2208      	movs	r2, #8
 8001800:	4313      	orrs	r3, r2
 8001802:	001c      	movs	r4, r3
 8001804:	e02b      	b.n	800185e <modbusParseRequest22+0x232>

	status->response.pdu[0] = function;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	220b      	movs	r2, #11
 800180c:	18ba      	adds	r2, r7, r2
 800180e:	7812      	ldrb	r2, [r2, #0]
 8001810:	701a      	strb	r2, [r3, #0]
	modbusWBE(&status->response.pdu[1], index);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	2326      	movs	r3, #38	@ 0x26
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	0019      	movs	r1, r3
 8001820:	0010      	movs	r0, r2
 8001822:	f7fe ff12 	bl	800064a <modbusWBE>
	modbusWBE(&status->response.pdu[3], andmask);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	1cda      	adds	r2, r3, #3
 800182c:	2324      	movs	r3, #36	@ 0x24
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	0019      	movs	r1, r3
 8001834:	0010      	movs	r0, r2
 8001836:	f7fe ff08 	bl	800064a <modbusWBE>
	modbusWBE(&status->response.pdu[5], ormask);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	1d5a      	adds	r2, r3, #5
 8001840:	2322      	movs	r3, #34	@ 0x22
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	0019      	movs	r1, r3
 8001848:	0010      	movs	r0, r2
 800184a:	f7fe fefe 	bl	800064a <modbusWBE>
	
	return MODBUS_NO_ERROR();
 800184e:	2303      	movs	r3, #3
 8001850:	439c      	bics	r4, r3
 8001852:	0023      	movs	r3, r4
 8001854:	001c      	movs	r4, r3
 8001856:	23fc      	movs	r3, #252	@ 0xfc
 8001858:	439c      	bics	r4, r3
 800185a:	0023      	movs	r3, r4
 800185c:	001c      	movs	r4, r3
}
 800185e:	0023      	movs	r3, r4
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	b00b      	add	sp, #44	@ 0x2c
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001868 <serial_1_print>:

char msg[] = "000 ";
#if USE_SERIAL_1
// prints a C string on hlpuart1
void serial_1_print(char * message)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if (message != NULL) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00c      	beq.n	8001890 <serial_1_print+0x28>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)(message), strlen(message), 300);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	0018      	movs	r0, r3
 800187a:	f7fe fc45 	bl	8000108 <strlen>
 800187e:	0003      	movs	r3, r0
 8001880:	b29a      	uxth	r2, r3
 8001882:	2396      	movs	r3, #150	@ 0x96
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4803      	ldr	r0, [pc, #12]	@ (8001898 <serial_1_print+0x30>)
 800188a:	f004 fac9 	bl	8005e20 <HAL_UART_Transmit>
  }
  return;
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	46c0      	nop			@ (mov r8, r8)
}
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200003c4 	.word	0x200003c4

0800189c <serial_1_println>:

// prints a C string on hlpuart1 followed by return line control character
void serial_1_println(char * message)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if (message != NULL) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d012      	beq.n	80018d0 <serial_1_println+0x34>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)(message), strlen(message), 300);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7fe fc2b 	bl	8000108 <strlen>
 80018b2:	0003      	movs	r3, r0
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	2396      	movs	r3, #150	@ 0x96
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4806      	ldr	r0, [pc, #24]	@ (80018d8 <serial_1_println+0x3c>)
 80018be:	f004 faaf 	bl	8005e20 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)("\r\n"), 2, 100);
 80018c2:	4906      	ldr	r1, [pc, #24]	@ (80018dc <serial_1_println+0x40>)
 80018c4:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <serial_1_println+0x3c>)
 80018c6:	2364      	movs	r3, #100	@ 0x64
 80018c8:	2202      	movs	r2, #2
 80018ca:	f004 faa9 	bl	8005e20 <HAL_UART_Transmit>
  }
  return;
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	46c0      	nop			@ (mov r8, r8)
}
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b002      	add	sp, #8
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200003c4 	.word	0x200003c4
 80018dc:	08008b2c 	.word	0x08008b2c

080018e0 <HAL_UARTEx_RxEventCallback>:

ModbusErrorInfo err;

// default callback function for received character interrupts
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size_buffer)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	000a      	movs	r2, r1
 80018ea:	1cbb      	adds	r3, r7, #2
 80018ec:	801a      	strh	r2, [r3, #0]
  // RS Use Ser #if USE_SERIAL_1
  if (huart == &hlpuart1) {
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4b34      	ldr	r3, [pc, #208]	@ (80019c4 <HAL_UARTEx_RxEventCallback+0xe4>)
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d110      	bne.n	8001918 <HAL_UARTEx_RxEventCallback+0x38>
    write_1_pos++;
 80018f6:	4b34      	ldr	r3, [pc, #208]	@ (80019c8 <HAL_UARTEx_RxEventCallback+0xe8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <HAL_UARTEx_RxEventCallback+0xe8>)
 80018fe:	601a      	str	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_IT(&hlpuart1, (buf_1 + write_1_pos%N_BUF), 1);
 8001900:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	221f      	movs	r2, #31
 8001906:	401a      	ands	r2, r3
 8001908:	4b30      	ldr	r3, [pc, #192]	@ (80019cc <HAL_UARTEx_RxEventCallback+0xec>)
 800190a:	18d1      	adds	r1, r2, r3
 800190c:	4b2d      	ldr	r3, [pc, #180]	@ (80019c4 <HAL_UARTEx_RxEventCallback+0xe4>)
 800190e:	2201      	movs	r2, #1
 8001910:	0018      	movs	r0, r3
 8001912:	f005 fe3d 	bl	8007590 <HAL_UARTEx_ReceiveToIdle_IT>
      HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxframe, RXFRAMESIZE);
    }
    // RS Use Ser #if USE_SERIAL_1
    }
  // RS Use Ser #endif
  return;
 8001916:	e051      	b.n	80019bc <HAL_UARTEx_RxEventCallback+0xdc>
    if (huart == &huart1) {
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4b2d      	ldr	r3, [pc, #180]	@ (80019d0 <HAL_UARTEx_RxEventCallback+0xf0>)
 800191c:	429a      	cmp	r2, r3
 800191e:	d14d      	bne.n	80019bc <HAL_UARTEx_RxEventCallback+0xdc>
				  registers[LIGHTMODBUS_SLAVE_ID - LED_FEB_MB_HOLD_BASE],
 8001920:	4b2c      	ldr	r3, [pc, #176]	@ (80019d4 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001922:	895b      	ldrh	r3, [r3, #10]
      err = modbusParseRequestRTU(&slave,
 8001924:	b2d9      	uxtb	r1, r3
 8001926:	1cbb      	adds	r3, r7, #2
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	4a2b      	ldr	r2, [pc, #172]	@ (80019d8 <HAL_UARTEx_RxEventCallback+0xf8>)
 800192c:	482b      	ldr	r0, [pc, #172]	@ (80019dc <HAL_UARTEx_RxEventCallback+0xfc>)
 800192e:	f7ff f92e 	bl	8000b8e <modbusParseRequestRTU>
 8001932:	0003      	movs	r3, r0
 8001934:	001a      	movs	r2, r3
 8001936:	4b2a      	ldr	r3, [pc, #168]	@ (80019e0 <HAL_UARTEx_RxEventCallback+0x100>)
 8001938:	601a      	str	r2, [r3, #0]
      if (modbusGetGeneralError(err))
 800193a:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <HAL_UARTEx_RxEventCallback+0x100>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	0018      	movs	r0, r3
 8001940:	f7fe fee9 	bl	8000716 <modbusGetGeneralError>
 8001944:	1e03      	subs	r3, r0, #0
 8001946:	d007      	beq.n	8001958 <HAL_UARTEx_RxEventCallback+0x78>
        registers[R_LED_FEB_MB_GLOBAL_ERR]=err.error;
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <HAL_UARTEx_RxEventCallback+0x100>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	0e9b      	lsrs	r3, r3, #26
 8001950:	b2db      	uxtb	r3, r3
 8001952:	001a      	movs	r2, r3
 8001954:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001956:	815a      	strh	r2, [r3, #10]
      if (modbusGetRequestError(err))
 8001958:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <HAL_UARTEx_RxEventCallback+0x100>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0018      	movs	r0, r3
 800195e:	f7fe fef0 	bl	8000742 <modbusGetRequestError>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d00b      	beq.n	800197e <HAL_UARTEx_RxEventCallback+0x9e>
	  registers[R_LED_FEB_MB_SLAVE_ERR]=err.error;
 8001966:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <HAL_UARTEx_RxEventCallback+0x100>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	061b      	lsls	r3, r3, #24
 800196c:	0e9b      	lsrs	r3, r3, #26
 800196e:	b2db      	uxtb	r3, r3
 8001970:	001a      	movs	r2, r3
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001974:	811a      	strh	r2, [r3, #8]
	  serial_1_println("modbus error");
 8001976:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <HAL_UARTEx_RxEventCallback+0x104>)
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff ff8f 	bl	800189c <serial_1_println>
      if (modbusIsOk(err))
 800197e:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <HAL_UARTEx_RxEventCallback+0x100>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	0018      	movs	r0, r3
 8001984:	f7fe feaf 	bl	80006e6 <modbusIsOk>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d010      	beq.n	80019ae <HAL_UARTEx_RxEventCallback+0xce>
        HAL_UART_Transmit(&huart1, modbusSlaveGetResponse(&slave), modbusSlaveGetResponseLength(&slave), 1000);
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <HAL_UARTEx_RxEventCallback+0xfc>)
 800198e:	0018      	movs	r0, r3
 8001990:	f7fe feed 	bl	800076e <modbusSlaveGetResponse>
 8001994:	0004      	movs	r4, r0
 8001996:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_UARTEx_RxEventCallback+0xfc>)
 8001998:	0018      	movs	r0, r3
 800199a:	f7fe fef2 	bl	8000782 <modbusSlaveGetResponseLength>
 800199e:	0003      	movs	r3, r0
 80019a0:	001a      	movs	r2, r3
 80019a2:	23fa      	movs	r3, #250	@ 0xfa
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	480a      	ldr	r0, [pc, #40]	@ (80019d0 <HAL_UARTEx_RxEventCallback+0xf0>)
 80019a8:	0021      	movs	r1, r4
 80019aa:	f004 fa39 	bl	8005e20 <HAL_UART_Transmit>
      HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxframe, RXFRAMESIZE);
 80019ae:	490a      	ldr	r1, [pc, #40]	@ (80019d8 <HAL_UARTEx_RxEventCallback+0xf8>)
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <HAL_UARTEx_RxEventCallback+0xf0>)
 80019b2:	2210      	movs	r2, #16
 80019b4:	0018      	movs	r0, r3
 80019b6:	f005 fdeb 	bl	8007590 <HAL_UARTEx_ReceiveToIdle_IT>
  return;
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	46c0      	nop			@ (mov r8, r8)
}
 80019be:	46bd      	mov	sp, r7
 80019c0:	b003      	add	sp, #12
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	200003c4 	.word	0x200003c4
 80019c8:	20000540 	.word	0x20000540
 80019cc:	20000520 	.word	0x20000520
 80019d0:	2000044c 	.word	0x2000044c
 80019d4:	20000544 	.word	0x20000544
 80019d8:	200005b0 	.word	0x200005b0
 80019dc:	2000058c 	.word	0x2000058c
 80019e0:	200005c4 	.word	0x200005c4
 80019e4:	08008b30 	.word	0x08008b30

080019e8 <UnlockEeprom>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Unlock the EEPROM: */
void UnlockEeprom(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  int loop=0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
  /* Wait for FLASH to be free */
  while (((FLASH->SR & FLASH_SR_BSY) != 0) && loop < 5000)
 80019f2:	e007      	b.n	8001a04 <UnlockEeprom+0x1c>
    {
      /*   insert timeout test */
      __WFI();
 80019f4:	bf30      	wfi
      loop++;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3301      	adds	r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
#if USE_SERIAL_1
      serial_1_println("Unlocking EEPROM !!!");
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <UnlockEeprom+0x5c>)
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7ff ff4c 	bl	800189c <serial_1_println>
  while (((FLASH->SR & FLASH_SR_BSY) != 0) && loop < 5000)
 8001a04:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <UnlockEeprom+0x60>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d003      	beq.n	8001a16 <UnlockEeprom+0x2e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a0e      	ldr	r2, [pc, #56]	@ (8001a4c <UnlockEeprom+0x64>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	ddee      	ble.n	80019f4 <UnlockEeprom+0xc>
#endif
    }
  /* If PELOCK is locked */ 
  if ((FLASH->PECR & FLASH_PECR_PELOCK) != 0)
 8001a16:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <UnlockEeprom+0x60>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d005      	beq.n	8001a2c <UnlockEeprom+0x44>
    {
      /* Unlock PELOCK */
      FLASH->PEKEYR = FLASH_PEKEY1;
 8001a20:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <UnlockEeprom+0x60>)
 8001a22:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <UnlockEeprom+0x68>)
 8001a24:	60da      	str	r2, [r3, #12]
      FLASH->PEKEYR = FLASH_PEKEY2;
 8001a26:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <UnlockEeprom+0x60>)
 8001a28:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <UnlockEeprom+0x6c>)
 8001a2a:	60da      	str	r2, [r3, #12]
    }
  /* enable flash interrupts */
  FLASH->PECR = FLASH->PECR | (FLASH_PECR_ERRIE | FLASH_PECR_EOPIE);
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <UnlockEeprom+0x60>)
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <UnlockEeprom+0x60>)
 8001a32:	21c0      	movs	r1, #192	@ 0xc0
 8001a34:	0289      	lsls	r1, r1, #10
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]
}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b002      	add	sp, #8
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	08008b40 	.word	0x08008b40
 8001a48:	40022000 	.word	0x40022000
 8001a4c:	00001387 	.word	0x00001387
 8001a50:	89abcdef 	.word	0x89abcdef
 8001a54:	02030405 	.word	0x02030405

08001a58 <EepromProgram_16>:
 * words are automatically erased if required before programming
 * Param addr is the 32-bit EEPROM address to program, data is the 32 bit word to program
 * Retval None
 */
void EepromProgram_16(uint32_t addr, uint16_t ee_data)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	000a      	movs	r2, r1
 8001a62:	1cbb      	adds	r3, r7, #2
 8001a64:	801a      	strh	r2, [r3, #0]
  /* NOTE: The EEPROM must be unlocked and the flash interrupts must have
     been enabled prior to calling this function.*/
  *(uint16_t *)(addr) = ee_data;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	1cba      	adds	r2, r7, #2
 8001a6a:	8812      	ldrh	r2, [r2, #0]
 8001a6c:	801a      	strh	r2, [r3, #0]
  /* write data to EEPROM */
  // __WFI();
#if USE_SERIAL_1
  serial_1_println("AFT 1 ERROR WRITIN TO EEPROM !!!");
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <EepromProgram_16+0x3c>)
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff ff13 	bl	800189c <serial_1_println>
#endif
  if (*(uint16_t *)(addr) != ee_data)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	1cba      	adds	r2, r7, #2
 8001a7c:	8812      	ldrh	r2, [r2, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d003      	beq.n	8001a8a <EepromProgram_16+0x32>
    {
      // error |= ERROR_PROG_32B_WORD;
#if USE_SERIAL_1
      serial_1_println("ERROR WRITIN TO EEPROM !!!");
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <EepromProgram_16+0x40>)
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff ff09 	bl	800189c <serial_1_println>
#endif
    }
}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	08008b58 	.word	0x08008b58
 8001a98:	08008b7c 	.word	0x08008b7c

08001a9c <LockEeprom>:

/* Lock the EEPROM: */
void LockEeprom(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
  int loop=0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
  /* Wait for FLASH to be free */
  while (((FLASH->SR & FLASH_SR_BSY) != 0) && loop < 500)
 8001aa6:	e003      	b.n	8001ab0 <LockEeprom+0x14>
    {
      /*   insert timeout test */
      __WFI();
 8001aa8:	bf30      	wfi
      loop++;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3301      	adds	r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
  while (((FLASH->SR & FLASH_SR_BSY) != 0) && loop < 500)
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <LockEeprom+0x48>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d004      	beq.n	8001ac4 <LockEeprom+0x28>
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	23fa      	movs	r3, #250	@ 0xfa
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf1      	blt.n	8001aa8 <LockEeprom+0xc>
    }
  /* disable flash interrupts */
  FLASH->PECR = FLASH->PECR & ~(FLASH_PECR_ERRIE | FLASH_PECR_EOPIE);
 8001ac4:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <LockEeprom+0x48>)
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <LockEeprom+0x48>)
 8001aca:	4907      	ldr	r1, [pc, #28]	@ (8001ae8 <LockEeprom+0x4c>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]
  /* Lock memory with PELOCK */
  FLASH->PECR = FLASH->PECR | FLASH_PECR_PELOCK;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <LockEeprom+0x48>)
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <LockEeprom+0x48>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
}
 8001adc:	46c0      	nop			@ (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	fffcffff 	.word	0xfffcffff

08001aec <Read_SID_from_NVRAM>:

uint16_t Read_SID_from_NVRAM()
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
  uint16_t d = *(__IO uint16_t *)DATA_EEPROM_BASE_ADDR;
 8001af2:	4a05      	ldr	r2, [pc, #20]	@ (8001b08 <Read_SID_from_NVRAM+0x1c>)
 8001af4:	1dbb      	adds	r3, r7, #6
 8001af6:	8812      	ldrh	r2, [r2, #0]
 8001af8:	801a      	strh	r2, [r3, #0]
     serial_1_println("READING FROM FLASH !!!");
     HAL_Delay(250);
     #endif
  */
  // no error detection
  return d;
 8001afa:	1dbb      	adds	r3, r7, #6
 8001afc:	881b      	ldrh	r3, [r3, #0]
}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	08080000 	.word	0x08080000

08001b0c <Transfer_SID_to_NVRAM>:
void Transfer_SID_to_NVRAM(uint16_t sid)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	0002      	movs	r2, r0
 8001b14:	1dbb      	adds	r3, r7, #6
 8001b16:	801a      	strh	r2, [r3, #0]
  /* Unlock the EEPROM and enable flash interrupts */
  UnlockEeprom();
 8001b18:	f7ff ff66 	bl	80019e8 <UnlockEeprom>
#if USE_SERIAL_1
  serial_1_println("unlocked 1 !!!");
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <Transfer_SID_to_NVRAM+0x58>)
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7ff febc 	bl	800189c <serial_1_println>
#endif
  
  // UnlockEeprom();
  /* Reset the ERASE and DATA
     bits in the FLASH_PECR register to disable any residual erase */
  FLASH->PECR = FLASH->PECR & ~(FLASH_PECR_ERASE | FLASH_PECR_DATA);
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <Transfer_SID_to_NVRAM+0x5c>)
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <Transfer_SID_to_NVRAM+0x5c>)
 8001b2a:	4910      	ldr	r1, [pc, #64]	@ (8001b6c <Transfer_SID_to_NVRAM+0x60>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
  
#if USE_SERIAL_1
  serial_1_println("unlocked 2 !!!");
 8001b30:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <Transfer_SID_to_NVRAM+0x64>)
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7ff feb2 	bl	800189c <serial_1_println>
#endif
  /* Put the next line in a loop if sequential bits to be written with i as loop counter */
  EepromProgram_16(DATA_EEPROM_BASE_ADDR, sid);
 8001b38:	1dbb      	adds	r3, r7, #6
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <Transfer_SID_to_NVRAM+0x68>)
 8001b3e:	0019      	movs	r1, r3
 8001b40:	0010      	movs	r0, r2
 8001b42:	f7ff ff89 	bl	8001a58 <EepromProgram_16>
  
#if USE_SERIAL_1
  serial_1_println("unlocked 3 !!!");
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <Transfer_SID_to_NVRAM+0x6c>)
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f7ff fea7 	bl	800189c <serial_1_println>
#endif
  LockEeprom(); /* Lock the EEPROM */
 8001b4e:	f7ff ffa5 	bl	8001a9c <LockEeprom>
  
#if USE_SERIAL_1
  serial_1_println("WROTE TO FLASH !!!");
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <Transfer_SID_to_NVRAM+0x70>)
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff fea1 	bl	800189c <serial_1_println>
#endif
}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b002      	add	sp, #8
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			@ (mov r8, r8)
 8001b64:	08008b98 	.word	0x08008b98
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	fffffdef 	.word	0xfffffdef
 8001b70:	08008ba8 	.word	0x08008ba8
 8001b74:	08080000 	.word	0x08080000
 8001b78:	08008bb8 	.word	0x08008bb8
 8001b7c:	08008bc8 	.word	0x08008bc8

08001b80 <PowerOn>:
  // will interfere currently with later code.
  // HAL_GPIO_WritePin (TRIG_OE_GPIO_Port,  TRIG_OE_Pin,        0);
}

void PowerOn()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  // disable all LEDs
  for (uint32_t bit = 0; bit < 7; bit++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	e00e      	b.n	8001baa <PowerOn+0x2a>
    {
      HAL_GPIO_WritePin (LED_GPIO[bit], LED_Pins[bit], 0 );
 8001b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c78 <PowerOn+0xf8>)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	0092      	lsls	r2, r2, #2
 8001b92:	58d0      	ldr	r0, [r2, r3]
 8001b94:	4b39      	ldr	r3, [pc, #228]	@ (8001c7c <PowerOn+0xfc>)
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	0052      	lsls	r2, r2, #1
 8001b9a:	5ad3      	ldrh	r3, [r2, r3]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	f002 fc60 	bl	8004464 <HAL_GPIO_WritePin>
  for (uint32_t bit = 0; bit < 7; bit++)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b06      	cmp	r3, #6
 8001bae:	d9ed      	bls.n	8001b8c <PowerOn+0xc>
    }
  // OLD: write_DAC_values(chA, 0xB76, 0x000); // set LED bias to about 6 V
  // now:
  uint32_t dac_value = 0x0FFF; // minimum Value to load into DAC
 8001bb0:	4b33      	ldr	r3, [pc, #204]	@ (8001c80 <PowerOn+0x100>)
 8001bb2:	603b      	str	r3, [r7, #0]
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);  // write to DAC holding register
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4833      	ldr	r0, [pc, #204]	@ (8001c84 <PowerOn+0x104>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	f002 f888 	bl	8003cd0 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);  // software trigger
 8001bc0:	4b30      	ldr	r3, [pc, #192]	@ (8001c84 <PowerOn+0x104>)
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f002 f81b 	bl	8003c00 <HAL_DAC_Start>
  // Power Enable Sequence
#if USE_SERIAL_1
  serial_1_println("in PON 0");
 8001bca:	4b2f      	ldr	r3, [pc, #188]	@ (8001c88 <PowerOn+0x108>)
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7ff fe65 	bl	800189c <serial_1_println>
#endif
  HAL_GPIO_WritePin (SW_3V3_ENABLE_GPIO_Port, SW_3V3_ENABLE_Pin, 1);
 8001bd2:	2380      	movs	r3, #128	@ 0x80
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	482d      	ldr	r0, [pc, #180]	@ (8001c8c <PowerOn+0x10c>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	0019      	movs	r1, r3
 8001bdc:	f002 fc42 	bl	8004464 <HAL_GPIO_WritePin>
#if USE_SERIAL_1
  serial_1_println("in PON 1");
 8001be0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c90 <PowerOn+0x110>)
 8001be2:	0018      	movs	r0, r3
 8001be4:	f7ff fe5a 	bl	800189c <serial_1_println>
#endif
  osDelay(100);
 8001be8:	2064      	movs	r0, #100	@ 0x64
 8001bea:	f005 fda3 	bl	8007734 <osDelay>
#if USE_SERIAL_1
  serial_1_println("in PON 2");
 8001bee:	4b29      	ldr	r3, [pc, #164]	@ (8001c94 <PowerOn+0x114>)
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7ff fe53 	bl	800189c <serial_1_println>
#endif
  HAL_GPIO_WritePin (SW_5V_ENABLE_GPIO_Port, SW_5V_ENABLE_Pin, 1);
 8001bf6:	23a0      	movs	r3, #160	@ 0xa0
 8001bf8:	05db      	lsls	r3, r3, #23
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2140      	movs	r1, #64	@ 0x40
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f002 fc30 	bl	8004464 <HAL_GPIO_WritePin>
#if USE_SERIAL_1
  serial_1_println("in PON 3");
 8001c04:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <PowerOn+0x118>)
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff fe48 	bl	800189c <serial_1_println>
#endif
  osDelay(100);
 8001c0c:	2064      	movs	r0, #100	@ 0x64
 8001c0e:	f005 fd91 	bl	8007734 <osDelay>
#if USE_SERIAL_1
  serial_1_println("in PON 4");
 8001c12:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <PowerOn+0x11c>)
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff fe41 	bl	800189c <serial_1_println>
#endif
  HAL_GPIO_WritePin (BOOST_ENABLE_GPIO_Port, BOOST_ENABLE_Pin, 1);
 8001c1a:	23a0      	movs	r3, #160	@ 0xa0
 8001c1c:	05db      	lsls	r3, r3, #23
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2120      	movs	r1, #32
 8001c22:	0018      	movs	r0, r3
 8001c24:	f002 fc1e 	bl	8004464 <HAL_GPIO_WritePin>
#if USE_SERIAL_1
  serial_1_println("in PON 5");
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <PowerOn+0x120>)
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff fe36 	bl	800189c <serial_1_println>
#endif
  osDelay(100);
 8001c30:	2064      	movs	r0, #100	@ 0x64
 8001c32:	f005 fd7f 	bl	8007734 <osDelay>
#if USE_SERIAL_1
  serial_1_println("in PON 6");
 8001c36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <PowerOn+0x124>)
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff fe2f 	bl	800189c <serial_1_println>
#endif
  osDelay(100);
 8001c3e:	2064      	movs	r0, #100	@ 0x64
 8001c40:	f005 fd78 	bl	8007734 <osDelay>
#if USE_SERIAL_1
  serial_1_println("in PON 8");
 8001c44:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <PowerOn+0x128>)
 8001c46:	0018      	movs	r0, r3
 8001c48:	f7ff fe28 	bl	800189c <serial_1_println>
#endif
#if USE_SERIAL_1
  serial_1_println("in PON 7");
 8001c4c:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <PowerOn+0x12c>)
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7ff fe24 	bl	800189c <serial_1_println>
  // Setup timer for pulsing
  __HAL_TIM_SET_AUTORELOAD(&htim22, (32 / 2) - 1); // provide some default rate (1MHz)
  __HAL_TIM_SET_COMPARE(&htim22, TIM_CHANNEL_2, (32 / 4) - 1);
  HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2); */
#if USE_SERIAL_1
  serial_1_println("in PON 9");
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <PowerOn+0x130>)
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7ff fe20 	bl	800189c <serial_1_println>
#endif
  
  // FixFirstPulse();
  
#if USE_SERIAL_1
  serial_1_println("Board power is ON");
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <PowerOn+0x134>)
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7ff fe1c 	bl	800189c <serial_1_println>
#endif
  modbusMaskWrite(discreteInputs, 0, 1);
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <PowerOn+0x138>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	2100      	movs	r1, #0
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7fe fc3b 	bl	80004e6 <modbusMaskWrite>
}
 8001c70:	46c0      	nop			@ (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b002      	add	sp, #8
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000060 	.word	0x20000060
 8001c7c:	20000050 	.word	0x20000050
 8001c80:	00000fff 	.word	0x00000fff
 8001c84:	200003b0 	.word	0x200003b0
 8001c88:	08008bdc 	.word	0x08008bdc
 8001c8c:	50000400 	.word	0x50000400
 8001c90:	08008be8 	.word	0x08008be8
 8001c94:	08008bf4 	.word	0x08008bf4
 8001c98:	08008c00 	.word	0x08008c00
 8001c9c:	08008c0c 	.word	0x08008c0c
 8001ca0:	08008c18 	.word	0x08008c18
 8001ca4:	08008c24 	.word	0x08008c24
 8001ca8:	08008c30 	.word	0x08008c30
 8001cac:	08008c3c 	.word	0x08008c3c
 8001cb0:	08008c48 	.word	0x08008c48
 8001cb4:	08008c54 	.word	0x08008c54
 8001cb8:	20000588 	.word	0x20000588

08001cbc <PowerOff>:

void PowerOff()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  // disable all LEDs
  for (uint32_t bit = 0; bit < 7; bit++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	e00e      	b.n	8001ce6 <PowerOff+0x2a>
    {
      HAL_GPIO_WritePin (LED_GPIO[bit], LED_Pins[bit], 0 );
 8001cc8:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <PowerOff+0xa4>)
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	58d0      	ldr	r0, [r2, r3]
 8001cd0:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <PowerOff+0xa8>)
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	0052      	lsls	r2, r2, #1
 8001cd6:	5ad3      	ldrh	r3, [r2, r3]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	0019      	movs	r1, r3
 8001cdc:	f002 fbc2 	bl	8004464 <HAL_GPIO_WritePin>
  for (uint32_t bit = 0; bit < 7; bit++)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b06      	cmp	r3, #6
 8001cea:	d9ed      	bls.n	8001cc8 <PowerOff+0xc>
    }
  uint32_t dac_value = 0xFFF; // Value to load into DAC
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <PowerOff+0xac>)
 8001cee:	603b      	str	r3, [r7, #0]
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);  // write to DAC holding register
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	481e      	ldr	r0, [pc, #120]	@ (8001d6c <PowerOff+0xb0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	f001 ffea 	bl	8003cd0 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);  // software trigger
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <PowerOff+0xb0>)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	0018      	movs	r0, r3
 8001d02:	f001 ff7d 	bl	8003c00 <HAL_DAC_Start>
  osDelay(100);
 8001d06:	2064      	movs	r0, #100	@ 0x64
 8001d08:	f005 fd14 	bl	8007734 <osDelay>
  HAL_GPIO_WritePin (BOOST_ENABLE_GPIO_Port, BOOST_ENABLE_Pin, 0);
 8001d0c:	23a0      	movs	r3, #160	@ 0xa0
 8001d0e:	05db      	lsls	r3, r3, #23
 8001d10:	2200      	movs	r2, #0
 8001d12:	2120      	movs	r1, #32
 8001d14:	0018      	movs	r0, r3
 8001d16:	f002 fba5 	bl	8004464 <HAL_GPIO_WritePin>
  osDelay(100);
 8001d1a:	2064      	movs	r0, #100	@ 0x64
 8001d1c:	f005 fd0a 	bl	8007734 <osDelay>
  HAL_GPIO_WritePin (SW_5V_ENABLE_GPIO_Port, SW_5V_ENABLE_Pin, 0);
 8001d20:	23a0      	movs	r3, #160	@ 0xa0
 8001d22:	05db      	lsls	r3, r3, #23
 8001d24:	2200      	movs	r2, #0
 8001d26:	2140      	movs	r1, #64	@ 0x40
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f002 fb9b 	bl	8004464 <HAL_GPIO_WritePin>
  osDelay(100);
 8001d2e:	2064      	movs	r0, #100	@ 0x64
 8001d30:	f005 fd00 	bl	8007734 <osDelay>
  HAL_GPIO_WritePin (SW_3V3_ENABLE_GPIO_Port, SW_3V3_ENABLE_Pin, 0);
 8001d34:	2380      	movs	r3, #128	@ 0x80
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <PowerOff+0xb4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	f002 fb91 	bl	8004464 <HAL_GPIO_WritePin>
#if USE_SERIAL_1
  serial_1_println("Board power is OFF");
 8001d42:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <PowerOff+0xb8>)
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff fda9 	bl	800189c <serial_1_println>
#endif
  modbusMaskWrite(discreteInputs, 0, 0);
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <PowerOff+0xbc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7fe fbc8 	bl	80004e6 <modbusMaskWrite>
}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	20000060 	.word	0x20000060
 8001d64:	20000050 	.word	0x20000050
 8001d68:	00000fff 	.word	0x00000fff
 8001d6c:	200003b0 	.word	0x200003b0
 8001d70:	50000400 	.word	0x50000400
 8001d74:	08008c68 	.word	0x08008c68
 8001d78:	20000588 	.word	0x20000588

08001d7c <ADC_Read>:

uint8_t ADC_Read()
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc);
 8001d82:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <ADC_Read+0x74>)
 8001d84:	0018      	movs	r0, r3
 8001d86:	f001 faef 	bl	8003368 <HAL_ADC_Start>
  uint8_t ret = HAL_ADC_PollForConversion(&hadc, 100 /*timeout*/);
 8001d8a:	1dfc      	adds	r4, r7, #7
 8001d8c:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <ADC_Read+0x74>)
 8001d8e:	2164      	movs	r1, #100	@ 0x64
 8001d90:	0018      	movs	r0, r3
 8001d92:	f001 fb7d 	bl	8003490 <HAL_ADC_PollForConversion>
 8001d96:	0003      	movs	r3, r0
 8001d98:	7023      	strb	r3, [r4, #0]
  registers[LED_BIAS_ADC_READ-LED_FEB_MB_HOLD_BASE] = HAL_ADC_GetValue(&hadc);
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <ADC_Read+0x74>)
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f001 fc13 	bl	80035c8 <HAL_ADC_GetValue>
 8001da2:	0003      	movs	r3, r0
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <ADC_Read+0x78>)
 8001da8:	80da      	strh	r2, [r3, #6]
  HAL_ADC_Start(&hadc);
 8001daa:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <ADC_Read+0x74>)
 8001dac:	0018      	movs	r0, r3
 8001dae:	f001 fadb 	bl	8003368 <HAL_ADC_Start>
  ret += HAL_ADC_PollForConversion(&hadc, 100 /*timeout*/);
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <ADC_Read+0x74>)
 8001db4:	2164      	movs	r1, #100	@ 0x64
 8001db6:	0018      	movs	r0, r3
 8001db8:	f001 fb6a 	bl	8003490 <HAL_ADC_PollForConversion>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	1dfb      	adds	r3, r7, #7
 8001dc2:	1dfa      	adds	r2, r7, #7
 8001dc4:	7812      	ldrb	r2, [r2, #0]
 8001dc6:	188a      	adds	r2, r1, r2
 8001dc8:	701a      	strb	r2, [r3, #0]
  registers[IMON_ADC_READ-LED_FEB_MB_HOLD_BASE] = HAL_ADC_GetValue(&hadc);
 8001dca:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <ADC_Read+0x74>)
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f001 fbfb 	bl	80035c8 <HAL_ADC_GetValue>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <ADC_Read+0x78>)
 8001dd8:	811a      	strh	r2, [r3, #8]
  HAL_ADC_Stop(&hadc);
 8001dda:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <ADC_Read+0x74>)
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f001 fb17 	bl	8003410 <HAL_ADC_Stop>
  return ret;
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	781b      	ldrb	r3, [r3, #0]
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b003      	add	sp, #12
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	20000354 	.word	0x20000354
 8001df4:	20000544 	.word	0x20000544

08001df8 <myRegisterCallback>:

ModbusError myRegisterCallback(
    const ModbusSlave *status,
    const ModbusRegisterCallbackArgs *args,
    ModbusRegisterCallbackResult *result)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint16_t new_index=args->index;
 8001e04:	231e      	movs	r3, #30
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	8852      	ldrh	r2, [r2, #2]
 8001e0c:	801a      	strh	r2, [r3, #0]
  switch(args->type)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d032      	beq.n	8001e7c <myRegisterCallback+0x84>
 8001e16:	dc3b      	bgt.n	8001e90 <myRegisterCallback+0x98>
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d028      	beq.n	8001e6e <myRegisterCallback+0x76>
 8001e1c:	dc38      	bgt.n	8001e90 <myRegisterCallback+0x98>
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d002      	beq.n	8001e28 <myRegisterCallback+0x30>
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d01a      	beq.n	8001e5c <myRegisterCallback+0x64>
 8001e26:	e033      	b.n	8001e90 <myRegisterCallback+0x98>
    {
    case MODBUS_HOLDING_REGISTER:
      new_index=args->index - LED_FEB_MB_HOLD_BASE;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	885a      	ldrh	r2, [r3, #2]
 8001e2c:	231e      	movs	r3, #30
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	49c0      	ldr	r1, [pc, #768]	@ (8002134 <myRegisterCallback+0x33c>)
 8001e32:	468c      	mov	ip, r1
 8001e34:	4462      	add	r2, ip
 8001e36:	801a      	strh	r2, [r3, #0]
      // there's one exception, and that's setting the SLAVE_ID,
      //  which goes into a holding register,
      //  but is at index "0". All other holding registers start
      //  at index 40001. We also accept
      //  this command only if the old SLAVE_ID is 20, the default
      if ( ( args->index == 0 ) && ( registers[O_LIGHTMODBUS_SLAVE_ID] == 20 ) )
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	885b      	ldrh	r3, [r3, #2]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d126      	bne.n	8001e8e <myRegisterCallback+0x96>
 8001e40:	4bbd      	ldr	r3, [pc, #756]	@ (8002138 <myRegisterCallback+0x340>)
 8001e42:	895b      	ldrh	r3, [r3, #10]
 8001e44:	2b14      	cmp	r3, #20
 8001e46:	d122      	bne.n	8001e8e <myRegisterCallback+0x96>
	{
	  registers[O_LIGHTMODBUS_SLAVE_ID] = args->value;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	889a      	ldrh	r2, [r3, #4]
 8001e4c:	4bba      	ldr	r3, [pc, #744]	@ (8002138 <myRegisterCallback+0x340>)
 8001e4e:	815a      	strh	r2, [r3, #10]
	  Transfer_SID_to_NVRAM(registers[O_LIGHTMODBUS_SLAVE_ID]);
 8001e50:	4bb9      	ldr	r3, [pc, #740]	@ (8002138 <myRegisterCallback+0x340>)
 8001e52:	895b      	ldrh	r3, [r3, #10]
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff fe59 	bl	8001b0c <Transfer_SID_to_NVRAM>
	}
      break;
 8001e5a:	e018      	b.n	8001e8e <myRegisterCallback+0x96>
    case MODBUS_INPUT_REGISTER:
      new_index=args->index - LED_FEB_MB_INPR_BASE;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	885a      	ldrh	r2, [r3, #2]
 8001e60:	231e      	movs	r3, #30
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	49b5      	ldr	r1, [pc, #724]	@ (800213c <myRegisterCallback+0x344>)
 8001e66:	468c      	mov	ip, r1
 8001e68:	4462      	add	r2, ip
 8001e6a:	801a      	strh	r2, [r3, #0]
      break;
 8001e6c:	e010      	b.n	8001e90 <myRegisterCallback+0x98>
    case MODBUS_COIL:
      new_index=args->index - LED_FEB_MB_COIL_BASE;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	885a      	ldrh	r2, [r3, #2]
 8001e72:	231e      	movs	r3, #30
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	3a01      	subs	r2, #1
 8001e78:	801a      	strh	r2, [r3, #0]
      break;
 8001e7a:	e009      	b.n	8001e90 <myRegisterCallback+0x98>
    case MODBUS_DISCRETE_INPUT:
      new_index=args->index - LED_FEB_MB_DISC_BASE;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	885a      	ldrh	r2, [r3, #2]
 8001e80:	231e      	movs	r3, #30
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	49ae      	ldr	r1, [pc, #696]	@ (8002140 <myRegisterCallback+0x348>)
 8001e86:	468c      	mov	ip, r1
 8001e88:	4462      	add	r2, ip
 8001e8a:	801a      	strh	r2, [r3, #0]
      break;
 8001e8c:	e000      	b.n	8001e90 <myRegisterCallback+0x98>
      break;
 8001e8e:	46c0      	nop			@ (mov r8, r8)
    }
  switch (args->query)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	785b      	ldrb	r3, [r3, #1]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d100      	bne.n	8001e9a <myRegisterCallback+0xa2>
 8001e98:	e07d      	b.n	8001f96 <myRegisterCallback+0x19e>
 8001e9a:	dd00      	ble.n	8001e9e <myRegisterCallback+0xa6>
 8001e9c:	e1a1      	b.n	80021e2 <myRegisterCallback+0x3ea>
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	dc02      	bgt.n	8001ea8 <myRegisterCallback+0xb0>
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da03      	bge.n	8001eae <myRegisterCallback+0xb6>
 8001ea6:	e19c      	b.n	80021e2 <myRegisterCallback+0x3ea>
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d014      	beq.n	8001ed6 <myRegisterCallback+0xde>
 8001eac:	e199      	b.n	80021e2 <myRegisterCallback+0x3ea>
    case MODBUS_REGQ_R_CHECK:
    case MODBUS_REGQ_W_CHECK:
      // If result->exceptionCode of a read/write access query is not MODBUS_EXCEP_NONE,
      // an exception is reported by the slave. If result->exceptionCode is not set,
      // the behavior is undefined.
      inputRegisters[9]=args->type;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	4ba3      	ldr	r3, [pc, #652]	@ (8002144 <myRegisterCallback+0x34c>)
 8001eb6:	825a      	strh	r2, [r3, #18]
      inputRegisters[10]=new_index;
 8001eb8:	4ba2      	ldr	r3, [pc, #648]	@ (8002144 <myRegisterCallback+0x34c>)
 8001eba:	211e      	movs	r1, #30
 8001ebc:	187a      	adds	r2, r7, r1
 8001ebe:	8812      	ldrh	r2, [r2, #0]
 8001ec0:	829a      	strh	r2, [r3, #20]
      result->exceptionCode = new_index < REG_COUNT ? MODBUS_EXCEP_NONE : MODBUS_EXCEP_ILLEGAL_ADDRESS;
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	d801      	bhi.n	8001ece <myRegisterCallback+0xd6>
 8001eca:	2200      	movs	r2, #0
 8001ecc:	e000      	b.n	8001ed0 <myRegisterCallback+0xd8>
 8001ece:	2202      	movs	r2, #2
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	701a      	strb	r2, [r3, #0]
      break;
 8001ed4:	e185      	b.n	80021e2 <myRegisterCallback+0x3ea>
      
      // Read register
      // no need to execute own code, just reading registers
    case MODBUS_REGQ_R:
      switch (args->type)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d04d      	beq.n	8001f7a <myRegisterCallback+0x182>
 8001ede:	dd00      	ble.n	8001ee2 <myRegisterCallback+0xea>
 8001ee0:	e17e      	b.n	80021e0 <myRegisterCallback+0x3e8>
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d03c      	beq.n	8001f60 <myRegisterCallback+0x168>
 8001ee6:	dd00      	ble.n	8001eea <myRegisterCallback+0xf2>
 8001ee8:	e17a      	b.n	80021e0 <myRegisterCallback+0x3e8>
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d002      	beq.n	8001ef4 <myRegisterCallback+0xfc>
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d02d      	beq.n	8001f4e <myRegisterCallback+0x156>
	  // serial_1_println("in callback r dc");
#endif
          result->value = modbusMaskRead(discreteInputs, new_index);
          break;
	}
      break;
 8001ef2:	e175      	b.n	80021e0 <myRegisterCallback+0x3e8>
	  switch(args->index)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	885b      	ldrh	r3, [r3, #2]
 8001ef8:	4a93      	ldr	r2, [pc, #588]	@ (8002148 <myRegisterCallback+0x350>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01b      	beq.n	8001f36 <myRegisterCallback+0x13e>
 8001efe:	4a92      	ldr	r2, [pc, #584]	@ (8002148 <myRegisterCallback+0x350>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	dc1b      	bgt.n	8001f3c <myRegisterCallback+0x144>
 8001f04:	4a91      	ldr	r2, [pc, #580]	@ (800214c <myRegisterCallback+0x354>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	dd15      	ble.n	8001f36 <myRegisterCallback+0x13e>
 8001f0a:	4a91      	ldr	r2, [pc, #580]	@ (8002150 <myRegisterCallback+0x358>)
 8001f0c:	4694      	mov	ip, r2
 8001f0e:	4463      	add	r3, ip
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d813      	bhi.n	8001f3c <myRegisterCallback+0x144>
	      uint8_t ret=ADC_Read();
 8001f14:	2517      	movs	r5, #23
 8001f16:	197c      	adds	r4, r7, r5
 8001f18:	f7ff ff30 	bl	8001d7c <ADC_Read>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	7023      	strb	r3, [r4, #0]
	      if(ret !=0)
 8001f20:	197b      	adds	r3, r7, r5
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <myRegisterCallback+0x142>
		inputRegisters[R_LED_BIAS_ERROR]++;
 8001f28:	4b86      	ldr	r3, [pc, #536]	@ (8002144 <myRegisterCallback+0x34c>)
 8001f2a:	889b      	ldrh	r3, [r3, #4]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b84      	ldr	r3, [pc, #528]	@ (8002144 <myRegisterCallback+0x34c>)
 8001f32:	809a      	strh	r2, [r3, #4]
	      break;
 8001f34:	e001      	b.n	8001f3a <myRegisterCallback+0x142>
	      break;
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	e000      	b.n	8001f3c <myRegisterCallback+0x144>
	      break;
 8001f3a:	46c0      	nop			@ (mov r8, r8)
          result->value = registers[new_index];
 8001f3c:	231e      	movs	r3, #30
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	4b7d      	ldr	r3, [pc, #500]	@ (8002138 <myRegisterCallback+0x340>)
 8001f44:	0052      	lsls	r2, r2, #1
 8001f46:	5ad2      	ldrh	r2, [r2, r3]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	805a      	strh	r2, [r3, #2]
          break;
 8001f4c:	e022      	b.n	8001f94 <myRegisterCallback+0x19c>
          result->value = inputRegisters[new_index];
 8001f4e:	231e      	movs	r3, #30
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	881a      	ldrh	r2, [r3, #0]
 8001f54:	4b7b      	ldr	r3, [pc, #492]	@ (8002144 <myRegisterCallback+0x34c>)
 8001f56:	0052      	lsls	r2, r2, #1
 8001f58:	5ad2      	ldrh	r2, [r2, r3]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	805a      	strh	r2, [r3, #2]
          break;
 8001f5e:	e019      	b.n	8001f94 <myRegisterCallback+0x19c>
          result->value = modbusMaskRead(coils, new_index);
 8001f60:	231e      	movs	r3, #30
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	881a      	ldrh	r2, [r3, #0]
 8001f66:	4b7b      	ldr	r3, [pc, #492]	@ (8002154 <myRegisterCallback+0x35c>)
 8001f68:	0011      	movs	r1, r2
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7fe fa9c 	bl	80004a8 <modbusMaskRead>
 8001f70:	0003      	movs	r3, r0
 8001f72:	001a      	movs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	805a      	strh	r2, [r3, #2]
          break;
 8001f78:	e00c      	b.n	8001f94 <myRegisterCallback+0x19c>
          result->value = modbusMaskRead(discreteInputs, new_index);
 8001f7a:	231e      	movs	r3, #30
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	881a      	ldrh	r2, [r3, #0]
 8001f80:	4b75      	ldr	r3, [pc, #468]	@ (8002158 <myRegisterCallback+0x360>)
 8001f82:	0011      	movs	r1, r2
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7fe fa8f 	bl	80004a8 <modbusMaskRead>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	001a      	movs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	805a      	strh	r2, [r3, #2]
          break;
 8001f92:	46c0      	nop			@ (mov r8, r8)
      break;
 8001f94:	e124      	b.n	80021e0 <myRegisterCallback+0x3e8>
      // Write register, react to changes
    case MODBUS_REGQ_W:
#if USE_SERIAL_1
      //   serial_1_println("in callback w");
#endif
      switch (args->type)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d003      	beq.n	8001fa6 <myRegisterCallback+0x1ae>
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d100      	bne.n	8001fa4 <myRegisterCallback+0x1ac>
 8001fa2:	e0a1      	b.n	80020e8 <myRegisterCallback+0x2f0>
	      HAL_GPIO_WritePin (BIAS_ENABLE_LED_GPIO_Port, BIAS_ENABLE_LED_Pin, args->value);
              break;
	    }
          break;
        default:
          break;
 8001fa4:	e11b      	b.n	80021de <myRegisterCallback+0x3e6>
          registers[args->index - LED_FEB_MB_HOLD_BASE] = args->value;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	885b      	ldrh	r3, [r3, #2]
 8001faa:	4a6c      	ldr	r2, [pc, #432]	@ (800215c <myRegisterCallback+0x364>)
 8001fac:	189a      	adds	r2, r3, r2
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	8899      	ldrh	r1, [r3, #4]
 8001fb2:	4b61      	ldr	r3, [pc, #388]	@ (8002138 <myRegisterCallback+0x340>)
 8001fb4:	0052      	lsls	r2, r2, #1
 8001fb6:	52d1      	strh	r1, [r2, r3]
          switch(args->index)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	885b      	ldrh	r3, [r3, #2]
 8001fbc:	4a67      	ldr	r2, [pc, #412]	@ (800215c <myRegisterCallback+0x364>)
 8001fbe:	4694      	mov	ip, r2
 8001fc0:	4463      	add	r3, ip
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d900      	bls.n	8001fc8 <myRegisterCallback+0x1d0>
 8001fc6:	e107      	b.n	80021d8 <myRegisterCallback+0x3e0>
 8001fc8:	009a      	lsls	r2, r3, #2
 8001fca:	4b65      	ldr	r3, [pc, #404]	@ (8002160 <myRegisterCallback+0x368>)
 8001fcc:	18d3      	adds	r3, r2, r3
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	469f      	mov	pc, r3
              switch (args->value)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	889b      	ldrh	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d014      	beq.n	8002004 <myRegisterCallback+0x20c>
 8001fda:	dc34      	bgt.n	8002046 <myRegisterCallback+0x24e>
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d011      	beq.n	8002004 <myRegisterCallback+0x20c>
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d130      	bne.n	8002046 <myRegisterCallback+0x24e>
		  __HAL_TIM_SET_AUTORELOAD(&htim22, (32 / 2) - 1);
 8001fe4:	4b5f      	ldr	r3, [pc, #380]	@ (8002164 <myRegisterCallback+0x36c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	220f      	movs	r2, #15
 8001fea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fec:	4b5d      	ldr	r3, [pc, #372]	@ (8002164 <myRegisterCallback+0x36c>)
 8001fee:	220f      	movs	r2, #15
 8001ff0:	60da      	str	r2, [r3, #12]
		  __HAL_TIM_SET_COMPARE(&htim22, TIM_CHANNEL_2, (32 / 4) - 1);
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8002164 <myRegisterCallback+0x36c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2);
 8001ffa:	4b5a      	ldr	r3, [pc, #360]	@ (8002164 <myRegisterCallback+0x36c>)
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	0018      	movs	r0, r3
 8002000:	f003 fa0a 	bl	8005418 <HAL_TIM_PWM_Start>
		  HAL_GPIO_WritePin (TRIG_SEL1_GPIO_Port, TRIG_SEL1_Pin, (args->value & 2) > 0);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	889b      	ldrh	r3, [r3, #4]
 8002008:	001a      	movs	r2, r3
 800200a:	2302      	movs	r3, #2
 800200c:	4013      	ands	r3, r2
 800200e:	17da      	asrs	r2, r3, #31
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	0fdb      	lsrs	r3, r3, #31
 8002014:	b2db      	uxtb	r3, r3
 8002016:	001a      	movs	r2, r3
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	4852      	ldr	r0, [pc, #328]	@ (8002168 <myRegisterCallback+0x370>)
 800201e:	0019      	movs	r1, r3
 8002020:	f002 fa20 	bl	8004464 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (TRIG_SEL0_GPIO_Port, TRIG_SEL0_Pin, (args->value & 1) > 0);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	889b      	ldrh	r3, [r3, #4]
 8002028:	001a      	movs	r2, r3
 800202a:	2301      	movs	r3, #1
 800202c:	4013      	ands	r3, r2
 800202e:	17da      	asrs	r2, r3, #31
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	0fdb      	lsrs	r3, r3, #31
 8002034:	b2db      	uxtb	r3, r3
 8002036:	001a      	movs	r2, r3
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	01db      	lsls	r3, r3, #7
 800203c:	484a      	ldr	r0, [pc, #296]	@ (8002168 <myRegisterCallback+0x370>)
 800203e:	0019      	movs	r1, r3
 8002040:	f002 fa10 	bl	8004464 <HAL_GPIO_WritePin>
                  break;
 8002044:	e006      	b.n	8002054 <myRegisterCallback+0x25c>
                  inputRegisters[R_TRIG_SOURCE_ERR]++;
 8002046:	4b3f      	ldr	r3, [pc, #252]	@ (8002144 <myRegisterCallback+0x34c>)
 8002048:	88db      	ldrh	r3, [r3, #6]
 800204a:	3301      	adds	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	4b3d      	ldr	r3, [pc, #244]	@ (8002144 <myRegisterCallback+0x34c>)
 8002050:	80da      	strh	r2, [r3, #6]
                  break;
 8002052:	46c0      	nop			@ (mov r8, r8)
              break;
 8002054:	e047      	b.n	80020e6 <myRegisterCallback+0x2ee>
              for ( bit=0; bit<7; ++bit)
 8002056:	231d      	movs	r3, #29
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	e01f      	b.n	80020a0 <myRegisterCallback+0x2a8>
                HAL_GPIO_WritePin (LED_GPIO[bit], LED_Pins[bit], ( args->value & ( 1 << bit) ) > 0 );
 8002060:	251d      	movs	r5, #29
 8002062:	197b      	adds	r3, r7, r5
 8002064:	781a      	ldrb	r2, [r3, #0]
 8002066:	4b41      	ldr	r3, [pc, #260]	@ (800216c <myRegisterCallback+0x374>)
 8002068:	0092      	lsls	r2, r2, #2
 800206a:	58d0      	ldr	r0, [r2, r3]
 800206c:	197b      	adds	r3, r7, r5
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	4b3f      	ldr	r3, [pc, #252]	@ (8002170 <myRegisterCallback+0x378>)
 8002072:	0052      	lsls	r2, r2, #1
 8002074:	5ad1      	ldrh	r1, [r2, r3]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	889b      	ldrh	r3, [r3, #4]
 800207a:	001c      	movs	r4, r3
 800207c:	197b      	adds	r3, r7, r5
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	409a      	lsls	r2, r3
 8002084:	0013      	movs	r3, r2
 8002086:	4023      	ands	r3, r4
 8002088:	17da      	asrs	r2, r3, #31
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	0fdb      	lsrs	r3, r3, #31
 800208e:	b2db      	uxtb	r3, r3
 8002090:	001a      	movs	r2, r3
 8002092:	f002 f9e7 	bl	8004464 <HAL_GPIO_WritePin>
              for ( bit=0; bit<7; ++bit)
 8002096:	197b      	adds	r3, r7, r5
 8002098:	197a      	adds	r2, r7, r5
 800209a:	7812      	ldrb	r2, [r2, #0]
 800209c:	3201      	adds	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	231d      	movs	r3, #29
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d9da      	bls.n	8002060 <myRegisterCallback+0x268>
              break;
 80020aa:	e01c      	b.n	80020e6 <myRegisterCallback+0x2ee>
	      uint32_t dac_value = 0x0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
	      dac_value=registers[args->index - LED_FEB_MB_HOLD_BASE];
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	885b      	ldrh	r3, [r3, #2]
 80020b4:	4a29      	ldr	r2, [pc, #164]	@ (800215c <myRegisterCallback+0x364>)
 80020b6:	189a      	adds	r2, r3, r2
 80020b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002138 <myRegisterCallback+0x340>)
 80020ba:	0052      	lsls	r2, r2, #1
 80020bc:	5ad3      	ldrh	r3, [r2, r3]
 80020be:	61bb      	str	r3, [r7, #24]
	      HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);  // write to DAC holding register
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	482c      	ldr	r0, [pc, #176]	@ (8002174 <myRegisterCallback+0x37c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	f001 fe02 	bl	8003cd0 <HAL_DAC_SetValue>
	      HAL_DAC_Start(&hdac, DAC_CHANNEL_1);  // software trigger
 80020cc:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <myRegisterCallback+0x37c>)
 80020ce:	2100      	movs	r1, #0
 80020d0:	0018      	movs	r0, r3
 80020d2:	f001 fd95 	bl	8003c00 <HAL_DAC_Start>
	      break;
 80020d6:	e006      	b.n	80020e6 <myRegisterCallback+0x2ee>
	      Transfer_SID_to_NVRAM(registers[O_LIGHTMODBUS_SLAVE_ID]);
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <myRegisterCallback+0x340>)
 80020da:	895b      	ldrh	r3, [r3, #10]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff fd15 	bl	8001b0c <Transfer_SID_to_NVRAM>
          break;
 80020e2:	e079      	b.n	80021d8 <myRegisterCallback+0x3e0>
              break;
 80020e4:	46c0      	nop			@ (mov r8, r8)
          break;
 80020e6:	e077      	b.n	80021d8 <myRegisterCallback+0x3e0>
          modbusMaskWrite(coils, args->index - LED_FEB_MB_COIL_BASE, args->value);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	885b      	ldrh	r3, [r3, #2]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b299      	uxth	r1, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	889b      	ldrh	r3, [r3, #4]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <myRegisterCallback+0x35c>)
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7fe f9f4 	bl	80004e6 <modbusMaskWrite>
          switch(args->index)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	885b      	ldrh	r3, [r3, #2]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d059      	beq.n	80021ba <myRegisterCallback+0x3c2>
 8002106:	dc69      	bgt.n	80021dc <myRegisterCallback+0x3e4>
 8002108:	2b01      	cmp	r3, #1
 800210a:	d002      	beq.n	8002112 <myRegisterCallback+0x31a>
 800210c:	2b02      	cmp	r3, #2
 800210e:	d046      	beq.n	800219e <myRegisterCallback+0x3a6>
          break;
 8002110:	e064      	b.n	80021dc <myRegisterCallback+0x3e4>
	      power_changed=true;
 8002112:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <myRegisterCallback+0x380>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
	      if (args->value)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	889b      	ldrh	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d031      	beq.n	8002184 <myRegisterCallback+0x38c>
		  serial_1_println("in callback w c P1");
 8002120:	4b16      	ldr	r3, [pc, #88]	@ (800217c <myRegisterCallback+0x384>)
 8002122:	0018      	movs	r0, r3
 8002124:	f7ff fbba 	bl	800189c <serial_1_println>
		  serial_1_println("in callback w c P1b");
 8002128:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <myRegisterCallback+0x388>)
 800212a:	0018      	movs	r0, r3
 800212c:	f7ff fbb6 	bl	800189c <serial_1_println>
 8002130:	e030      	b.n	8002194 <myRegisterCallback+0x39c>
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	000063bf 	.word	0x000063bf
 8002138:	20000544 	.word	0x20000544
 800213c:	ffff8acf 	.word	0xffff8acf
 8002140:	ffffd8ef 	.word	0xffffd8ef
 8002144:	20000564 	.word	0x20000564
 8002148:	00009c46 	.word	0x00009c46
 800214c:	00009c43 	.word	0x00009c43
 8002150:	ffff63bc 	.word	0xffff63bc
 8002154:	20000584 	.word	0x20000584
 8002158:	20000588 	.word	0x20000588
 800215c:	ffff63bf 	.word	0xffff63bf
 8002160:	08008db8 	.word	0x08008db8
 8002164:	200004d4 	.word	0x200004d4
 8002168:	50000800 	.word	0x50000800
 800216c:	20000060 	.word	0x20000060
 8002170:	20000050 	.word	0x20000050
 8002174:	200003b0 	.word	0x200003b0
 8002178:	200005c0 	.word	0x200005c0
 800217c:	08008c7c 	.word	0x08008c7c
 8002180:	08008c90 	.word	0x08008c90
		  serial_1_println("in callback w c P2");
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <myRegisterCallback+0x3f4>)
 8002186:	0018      	movs	r0, r3
 8002188:	f7ff fb88 	bl	800189c <serial_1_println>
		  serial_1_println("in callback w c P2b");
 800218c:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <myRegisterCallback+0x3f8>)
 800218e:	0018      	movs	r0, r3
 8002190:	f7ff fb84 	bl	800189c <serial_1_println>
	      serial_1_println("in callback w c P3");
 8002194:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <myRegisterCallback+0x3fc>)
 8002196:	0018      	movs	r0, r3
 8002198:	f7ff fb80 	bl	800189c <serial_1_println>
              break;
 800219c:	e01b      	b.n	80021d6 <myRegisterCallback+0x3de>
	      serial_1_println("in callback w c T");
 800219e:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <myRegisterCallback+0x400>)
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff fb7b 	bl	800189c <serial_1_println>
                                 args->value);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	889b      	ldrh	r3, [r3, #4]
               HAL_GPIO_WritePin (TRIG_OE_GPIO_Port,
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	019b      	lsls	r3, r3, #6
 80021b0:	4812      	ldr	r0, [pc, #72]	@ (80021fc <myRegisterCallback+0x404>)
 80021b2:	0019      	movs	r1, r3
 80021b4:	f002 f956 	bl	8004464 <HAL_GPIO_WritePin>
              break;
 80021b8:	e00d      	b.n	80021d6 <myRegisterCallback+0x3de>
	      serial_1_println("in callback w c L");
 80021ba:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <myRegisterCallback+0x408>)
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff fb6d 	bl	800189c <serial_1_println>
	      HAL_GPIO_WritePin (BIAS_ENABLE_LED_GPIO_Port, BIAS_ENABLE_LED_Pin, args->value);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	889b      	ldrh	r3, [r3, #4]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	23a0      	movs	r3, #160	@ 0xa0
 80021ca:	05db      	lsls	r3, r3, #23
 80021cc:	2180      	movs	r1, #128	@ 0x80
 80021ce:	0018      	movs	r0, r3
 80021d0:	f002 f948 	bl	8004464 <HAL_GPIO_WritePin>
              break;
 80021d4:	46c0      	nop			@ (mov r8, r8)
          break;
 80021d6:	e001      	b.n	80021dc <myRegisterCallback+0x3e4>
          break;
 80021d8:	46c0      	nop			@ (mov r8, r8)
 80021da:	e002      	b.n	80021e2 <myRegisterCallback+0x3ea>
          break;
 80021dc:	46c0      	nop			@ (mov r8, r8)
	}
      break;
 80021de:	e000      	b.n	80021e2 <myRegisterCallback+0x3ea>
      break;
 80021e0:	46c0      	nop			@ (mov r8, r8)
#if USE_SERIAL_1
  //  serial_1_println("in callback done");
#endif
  
  // Always return MODBUS_OK
  return MODBUS_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b008      	add	sp, #32
 80021ea:	bdb0      	pop	{r4, r5, r7, pc}
 80021ec:	08008ca4 	.word	0x08008ca4
 80021f0:	08008cb8 	.word	0x08008cb8
 80021f4:	08008ccc 	.word	0x08008ccc
 80021f8:	08008ce0 	.word	0x08008ce0
 80021fc:	50000800 	.word	0x50000800
 8002200:	08008cf4 	.word	0x08008cf4

08002204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b08d      	sub	sp, #52	@ 0x34
 8002208:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  
  inputRegisters[11]=LED_FEB_MB_COIL_BASE;
 800220a:	4ba6      	ldr	r3, [pc, #664]	@ (80024a4 <main+0x2a0>)
 800220c:	2201      	movs	r2, #1
 800220e:	82da      	strh	r2, [r3, #22]
  inputRegisters[12]=LED_FEB_MB_DISC_BASE;
 8002210:	4ba4      	ldr	r3, [pc, #656]	@ (80024a4 <main+0x2a0>)
 8002212:	4aa5      	ldr	r2, [pc, #660]	@ (80024a8 <main+0x2a4>)
 8002214:	831a      	strh	r2, [r3, #24]
  inputRegisters[13]=LED_FEB_MB_INPR_BASE;
 8002216:	4ba3      	ldr	r3, [pc, #652]	@ (80024a4 <main+0x2a0>)
 8002218:	4aa4      	ldr	r2, [pc, #656]	@ (80024ac <main+0x2a8>)
 800221a:	835a      	strh	r2, [r3, #26]
  inputRegisters[14]=LED_FEB_MB_HOLD_BASE;
 800221c:	4ba1      	ldr	r3, [pc, #644]	@ (80024a4 <main+0x2a0>)
 800221e:	4aa4      	ldr	r2, [pc, #656]	@ (80024b0 <main+0x2ac>)
 8002220:	839a      	strh	r2, [r3, #28]
  inputRegisters[R_FIRMWARE_VERSION] =
 8002222:	4ba0      	ldr	r3, [pc, #640]	@ (80024a4 <main+0x2a0>)
 8002224:	2211      	movs	r2, #17
 8002226:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */
  
  /* MCU Configuration--------------------------------------------------------*/
  
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002228:	f000 fe96 	bl	8002f58 <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */
  
  /* Configure the system clock */
  SystemClock_Config();
 800222c:	f000 f978 	bl	8002520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */
  
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002230:	f000 fb6c 	bl	800290c <MX_GPIO_Init>
  MX_ADC_Init();
 8002234:	f000 f9ea 	bl	800260c <MX_ADC_Init>
  MX_DAC_Init();
 8002238:	f000 fa5c 	bl	80026f4 <MX_DAC_Init>
  MX_LPUART1_UART_Init();
 800223c:	f000 fa88 	bl	8002750 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002240:	f000 fab4 	bl	80027ac <MX_USART1_UART_Init>
  MX_TIM22_Init();
 8002244:	f000 fae2 	bl	800280c <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */
  
  // default hardware initialization .... mostly disable everything
  HAL_GPIO_WritePin (uC_OUT_TRIG_GPIO_Port, uC_OUT_TRIG_Pin, 0); // disables external trigger
 8002248:	4b9a      	ldr	r3, [pc, #616]	@ (80024b4 <main+0x2b0>)
 800224a:	2200      	movs	r2, #0
 800224c:	2120      	movs	r1, #32
 800224e:	0018      	movs	r0, r3
 8002250:	f002 f908 	bl	8004464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (TRIG_OE_GPIO_Port, TRIG_OE_Pin, 0); // disables output
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	019b      	lsls	r3, r3, #6
 8002258:	4897      	ldr	r0, [pc, #604]	@ (80024b8 <main+0x2b4>)
 800225a:	2200      	movs	r2, #0
 800225c:	0019      	movs	r1, r3
 800225e:	f002 f901 	bl	8004464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (TRIG_SEL1_GPIO_Port, TRIG_SEL1_Pin, 0); // part of selecting input b00, main board
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	4894      	ldr	r0, [pc, #592]	@ (80024b8 <main+0x2b4>)
 8002268:	2200      	movs	r2, #0
 800226a:	0019      	movs	r1, r3
 800226c:	f002 f8fa 	bl	8004464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (TRIG_SEL0_GPIO_Port, TRIG_SEL0_Pin, 0); // part of selecting input b00, main board
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	01db      	lsls	r3, r3, #7
 8002274:	4890      	ldr	r0, [pc, #576]	@ (80024b8 <main+0x2b4>)
 8002276:	2200      	movs	r2, #0
 8002278:	0019      	movs	r1, r3
 800227a:	f002 f8f3 	bl	8004464 <HAL_GPIO_WritePin>
  trig_src = board; // flags the trigger source set
 800227e:	4b8f      	ldr	r3, [pc, #572]	@ (80024bc <main+0x2b8>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin (LED_OE1_GPIO_Port, LED_OE1_Pin, 0); // disables trigger of LED1 / channel 0
 8002284:	4b8b      	ldr	r3, [pc, #556]	@ (80024b4 <main+0x2b0>)
 8002286:	2200      	movs	r2, #0
 8002288:	2101      	movs	r1, #1
 800228a:	0018      	movs	r0, r3
 800228c:	f002 f8ea 	bl	8004464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LED_OE2_GPIO_Port, LED_OE2_Pin, 0); // disables trigger of LED2 / channel 1
 8002290:	4b88      	ldr	r3, [pc, #544]	@ (80024b4 <main+0x2b0>)
 8002292:	2200      	movs	r2, #0
 8002294:	2102      	movs	r1, #2
 8002296:	0018      	movs	r0, r3
 8002298:	f002 f8e4 	bl	8004464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LED_OE3_GPIO_Port, LED_OE3_Pin, 0); // disables trigger of LED3 / channel 2
 800229c:	4b85      	ldr	r3, [pc, #532]	@ (80024b4 <main+0x2b0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	2104      	movs	r1, #4
 80022a2:	0018      	movs	r0, r3
 80022a4:	f002 f8de 	bl	8004464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LED_OE4_GPIO_Port, LED_OE4_Pin, 0); // disables trigger of LED4 / channel 3
 80022a8:	2380      	movs	r3, #128	@ 0x80
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4881      	ldr	r0, [pc, #516]	@ (80024b4 <main+0x2b0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	0019      	movs	r1, r3
 80022b2:	f002 f8d7 	bl	8004464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LED_OE5_GPIO_Port, LED_OE5_Pin, 0); // disables trigger of LED5 / channel 4
 80022b6:	2380      	movs	r3, #128	@ 0x80
 80022b8:	0219      	lsls	r1, r3, #8
 80022ba:	23a0      	movs	r3, #160	@ 0xa0
 80022bc:	05db      	lsls	r3, r3, #23
 80022be:	2200      	movs	r2, #0
 80022c0:	0018      	movs	r0, r3
 80022c2:	f002 f8cf 	bl	8004464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LED_OE6_GPIO_Port, LED_OE6_Pin, 0); // disables trigger of LED6 / channel 5
 80022c6:	4b7b      	ldr	r3, [pc, #492]	@ (80024b4 <main+0x2b0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	2140      	movs	r1, #64	@ 0x40
 80022cc:	0018      	movs	r0, r3
 80022ce:	f002 f8c9 	bl	8004464 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LED_OE7_GPIO_Port, LED_OE7_Pin, 0); // disables trigger of LED7 / channel 6
 80022d2:	4b78      	ldr	r3, [pc, #480]	@ (80024b4 <main+0x2b0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	2180      	movs	r1, #128	@ 0x80
 80022d8:	0018      	movs	r0, r3
 80022da:	f002 f8c3 	bl	8004464 <HAL_GPIO_WritePin>
  
  // IMON reset disabled
  HAL_GPIO_WritePin (IMON_RESET_GPIO_Port, IMON_RESET_Pin, 0);
 80022de:	2380      	movs	r3, #128	@ 0x80
 80022e0:	0119      	lsls	r1, r3, #4
 80022e2:	23a0      	movs	r3, #160	@ 0xa0
 80022e4:	05db      	lsls	r3, r3, #23
 80022e6:	2200      	movs	r2, #0
 80022e8:	0018      	movs	r0, r3
 80022ea:	f002 f8bb 	bl	8004464 <HAL_GPIO_WritePin>
  
  // Make sure LED bias regulator is disabled
  HAL_GPIO_WritePin (BIAS_ENABLE_LED_GPIO_Port, BIAS_ENABLE_LED_Pin, 0);
 80022ee:	23a0      	movs	r3, #160	@ 0xa0
 80022f0:	05db      	lsls	r3, r3, #23
 80022f2:	2200      	movs	r2, #0
 80022f4:	2180      	movs	r1, #128	@ 0x80
 80022f6:	0018      	movs	r0, r3
 80022f8:	f002 f8b4 	bl	8004464 <HAL_GPIO_WritePin>
    
  // read out SLAVE_ID from EEPROM and save it, or set it to default if zero
  registers[O_LIGHTMODBUS_SLAVE_ID] = Read_SID_from_NVRAM();
 80022fc:	f7ff fbf6 	bl	8001aec <Read_SID_from_NVRAM>
 8002300:	0003      	movs	r3, r0
 8002302:	001a      	movs	r2, r3
 8002304:	4b6e      	ldr	r3, [pc, #440]	@ (80024c0 <main+0x2bc>)
 8002306:	815a      	strh	r2, [r3, #10]
  if ( registers[O_LIGHTMODBUS_SLAVE_ID] == 0)
 8002308:	4b6d      	ldr	r3, [pc, #436]	@ (80024c0 <main+0x2bc>)
 800230a:	895b      	ldrh	r3, [r3, #10]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <main+0x112>
    registers[O_LIGHTMODBUS_SLAVE_ID] = SLAVE_ADDRESS;
 8002310:	4b6b      	ldr	r3, [pc, #428]	@ (80024c0 <main+0x2bc>)
 8002312:	2214      	movs	r2, #20
 8002314:	815a      	strh	r2, [r3, #10]
  
  // IMON reset configured for 'latch' mode
  HAL_Delay(100);  // power stabilize
 8002316:	2064      	movs	r0, #100	@ 0x64
 8002318:	f000 fe8e 	bl	8003038 <HAL_Delay>
  /*   HAL_GPIO_WritePin (IMON_ALERT_RESET_GPIO_Port, IMON_ALERT_RESET_Pin, 1); // Set to latch current over threshold   
   */
#if USE_SERIAL_1
  // start the reception of characters on both uarts
  HAL_UART_Receive_IT(&hlpuart1, (buf_1 + write_1_pos%N_BUF), 1);
 800231c:	4b69      	ldr	r3, [pc, #420]	@ (80024c4 <main+0x2c0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	221f      	movs	r2, #31
 8002322:	401a      	ands	r2, r3
 8002324:	4b68      	ldr	r3, [pc, #416]	@ (80024c8 <main+0x2c4>)
 8002326:	18d1      	adds	r1, r2, r3
 8002328:	4b68      	ldr	r3, [pc, #416]	@ (80024cc <main+0x2c8>)
 800232a:	2201      	movs	r2, #1
 800232c:	0018      	movs	r0, r3
 800232e:	f003 fe17 	bl	8005f60 <HAL_UART_Receive_IT>
  
  // print messages about the software and firmware for the user
  serial_1_print("Mach III LED driver board version ");
 8002332:	4b67      	ldr	r3, [pc, #412]	@ (80024d0 <main+0x2cc>)
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff fa97 	bl	8001868 <serial_1_print>
  /* currently, left 3 digits need to be in range of 0..9 only (*1*) */
  
  char ver_id[]="0.0.0";
 800233a:	2020      	movs	r0, #32
 800233c:	183b      	adds	r3, r7, r0
 800233e:	4a65      	ldr	r2, [pc, #404]	@ (80024d4 <main+0x2d0>)
 8002340:	6811      	ldr	r1, [r2, #0]
 8002342:	6019      	str	r1, [r3, #0]
 8002344:	8892      	ldrh	r2, [r2, #4]
 8002346:	809a      	strh	r2, [r3, #4]
  ver_id[0]+=VERSION_MAYOR;
 8002348:	0001      	movs	r1, r0
 800234a:	187b      	adds	r3, r7, r1
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	187b      	adds	r3, r7, r1
 8002350:	701a      	strb	r2, [r3, #0]
  ver_id[2]+=VERSION_MINOR;
 8002352:	187b      	adds	r3, r7, r1
 8002354:	789b      	ldrb	r3, [r3, #2]
 8002356:	3301      	adds	r3, #1
 8002358:	b2da      	uxtb	r2, r3
 800235a:	187b      	adds	r3, r7, r1
 800235c:	709a      	strb	r2, [r3, #2]
  ver_id[4]+=VERSION_PATCH;
 800235e:	187b      	adds	r3, r7, r1
 8002360:	791b      	ldrb	r3, [r3, #4]
 8002362:	3301      	adds	r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	187b      	adds	r3, r7, r1
 8002368:	711a      	strb	r2, [r3, #4]
  
  serial_1_println(ver_id);
 800236a:	187b      	adds	r3, r7, r1
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff fa95 	bl	800189c <serial_1_println>
  
  serial_1_print(" Slave_ID ");
 8002372:	4b59      	ldr	r3, [pc, #356]	@ (80024d8 <main+0x2d4>)
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff fa77 	bl	8001868 <serial_1_print>
  if ( registers[LIGHTMODBUS_SLAVE_ID - LED_FEB_MB_HOLD_BASE] > 100)
 800237a:	4b51      	ldr	r3, [pc, #324]	@ (80024c0 <main+0x2bc>)
 800237c:	895b      	ldrh	r3, [r3, #10]
 800237e:	2b64      	cmp	r3, #100	@ 0x64
 8002380:	d904      	bls.n	800238c <main+0x188>
      serial_1_println("XX");
 8002382:	4b56      	ldr	r3, [pc, #344]	@ (80024dc <main+0x2d8>)
 8002384:	0018      	movs	r0, r3
 8002386:	f7ff fa89 	bl	800189c <serial_1_println>
 800238a:	e027      	b.n	80023dc <main+0x1d8>
  else
    {
      char csid[]="00";
 800238c:	003b      	movs	r3, r7
 800238e:	4a54      	ldr	r2, [pc, #336]	@ (80024e0 <main+0x2dc>)
 8002390:	8811      	ldrh	r1, [r2, #0]
 8002392:	8019      	strh	r1, [r3, #0]
 8002394:	7892      	ldrb	r2, [r2, #2]
 8002396:	709a      	strb	r2, [r3, #2]
      csid[0]+=(registers[LIGHTMODBUS_SLAVE_ID - LED_FEB_MB_HOLD_BASE] / 10);
 8002398:	003b      	movs	r3, r7
 800239a:	781c      	ldrb	r4, [r3, #0]
 800239c:	4b48      	ldr	r3, [pc, #288]	@ (80024c0 <main+0x2bc>)
 800239e:	895b      	ldrh	r3, [r3, #10]
 80023a0:	210a      	movs	r1, #10
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7fd feb8 	bl	8000118 <__udivsi3>
 80023a8:	0003      	movs	r3, r0
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	18e3      	adds	r3, r4, r3
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	003b      	movs	r3, r7
 80023b4:	701a      	strb	r2, [r3, #0]
      csid[1]+=registers[LIGHTMODBUS_SLAVE_ID - LED_FEB_MB_HOLD_BASE] % 10;
 80023b6:	003b      	movs	r3, r7
 80023b8:	785c      	ldrb	r4, [r3, #1]
 80023ba:	4b41      	ldr	r3, [pc, #260]	@ (80024c0 <main+0x2bc>)
 80023bc:	895b      	ldrh	r3, [r3, #10]
 80023be:	210a      	movs	r1, #10
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7fd ff2f 	bl	8000224 <__aeabi_uidivmod>
 80023c6:	000b      	movs	r3, r1
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	18e3      	adds	r3, r4, r3
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	003b      	movs	r3, r7
 80023d2:	705a      	strb	r2, [r3, #1]
      serial_1_println(csid);
 80023d4:	003b      	movs	r3, r7
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7ff fa60 	bl	800189c <serial_1_println>
    }
#endif
  // set the pulse duration to a large number
  trig_rate_fact = (uint32_t)32000 & 0xFFFF;
 80023dc:	4b41      	ldr	r3, [pc, #260]	@ (80024e4 <main+0x2e0>)
 80023de:	22fa      	movs	r2, #250	@ 0xfa
 80023e0:	01d2      	lsls	r2, r2, #7
 80023e2:	601a      	str	r2, [r3, #0]
  // provide some default rate, 32 Mhz / 32,000 = 1 kHz
  __HAL_TIM_SET_AUTORELOAD(&htim22, (trig_rate_fact / 2) - 1);
 80023e4:	4b3f      	ldr	r3, [pc, #252]	@ (80024e4 <main+0x2e0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	085a      	lsrs	r2, r3, #1
 80023ea:	4b3f      	ldr	r3, [pc, #252]	@ (80024e8 <main+0x2e4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3a01      	subs	r2, #1
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023f2:	4b3c      	ldr	r3, [pc, #240]	@ (80024e4 <main+0x2e0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	4b3b      	ldr	r3, [pc, #236]	@ (80024e8 <main+0x2e4>)
 80023fc:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_COMPARE(&htim22, TIM_CHANNEL_2, (trig_rate_fact / 4) - 1);
 80023fe:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <main+0x2e0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	089a      	lsrs	r2, r3, #2
 8002404:	4b38      	ldr	r3, [pc, #224]	@ (80024e8 <main+0x2e4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3a01      	subs	r2, #1
 800240a:	639a      	str	r2, [r3, #56]	@ 0x38
  timer_on = false;
 800240c:	4b37      	ldr	r3, [pc, #220]	@ (80024ec <main+0x2e8>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
  
  // Init slave
  err = modbusSlaveInit(
 8002412:	2309      	movs	r3, #9
 8002414:	4a36      	ldr	r2, [pc, #216]	@ (80024f0 <main+0x2ec>)
 8002416:	4937      	ldr	r1, [pc, #220]	@ (80024f4 <main+0x2f0>)
 8002418:	4837      	ldr	r0, [pc, #220]	@ (80024f8 <main+0x2f4>)
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <main+0x2f8>)
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	0013      	movs	r3, r2
 8002422:	2200      	movs	r2, #0
 8002424:	f7fe fafe 	bl	8000a24 <modbusSlaveInit>
 8002428:	0003      	movs	r3, r0
 800242a:	001a      	movs	r2, r3
 800242c:	4b34      	ldr	r3, [pc, #208]	@ (8002500 <main+0x2fc>)
 800242e:	601a      	str	r2, [r3, #0]
	   modbusSlaveDefaultFunctionCount  // Number of supported functions
			);
  
  // Check for errors
  // assert(modbusIsOk(err) && "modbusSlaveInit() failed");
  if(!modbusIsOk(err))
 8002430:	4b33      	ldr	r3, [pc, #204]	@ (8002500 <main+0x2fc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0018      	movs	r0, r3
 8002436:	f7fe f956 	bl	80006e6 <modbusIsOk>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d10b      	bne.n	8002456 <main+0x252>
    {
      registers[R_LED_FEB_MB_GLOBAL_ERR]=err.error;
 800243e:	4b30      	ldr	r3, [pc, #192]	@ (8002500 <main+0x2fc>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	061b      	lsls	r3, r3, #24
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	b2db      	uxtb	r3, r3
 8002448:	001a      	movs	r2, r3
 800244a:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <main+0x2bc>)
 800244c:	815a      	strh	r2, [r3, #10]
#if USE_SERIAL_1
      serial_1_println("Modbus error");
 800244e:	4b2d      	ldr	r3, [pc, #180]	@ (8002504 <main+0x300>)
 8002450:	0018      	movs	r0, r3
 8002452:	f7ff fa23 	bl	800189c <serial_1_println>
#endif
    }
#if USE_SERIAL_1
  serial_1_println("modbus ok");
 8002456:	4b2c      	ldr	r3, [pc, #176]	@ (8002508 <main+0x304>)
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff fa1f 	bl	800189c <serial_1_println>
#endif
  
  // start once waiting for interupts, will be then re-newed in callback
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxframe, RXFRAMESIZE);
 800245e:	492b      	ldr	r1, [pc, #172]	@ (800250c <main+0x308>)
 8002460:	4b2b      	ldr	r3, [pc, #172]	@ (8002510 <main+0x30c>)
 8002462:	2210      	movs	r2, #16
 8002464:	0018      	movs	r0, r3
 8002466:	f005 f893 	bl	8007590 <HAL_UARTEx_ReceiveToIdle_IT>
#if USE_SERIAL_1
  serial_1_println("uart1 ok");
 800246a:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <main+0x310>)
 800246c:	0018      	movs	r0, r3
 800246e:	f7ff fa15 	bl	800189c <serial_1_println>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	4a28      	ldr	r2, [pc, #160]	@ (8002518 <main+0x314>)
 8002476:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002478:	c313      	stmia	r3!, {r0, r1, r4}
 800247a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800247c:	c313      	stmia	r3!, {r0, r1, r4}
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	2100      	movs	r1, #0
 8002486:	0018      	movs	r0, r3
 8002488:	f005 f907 	bl	800769a <osThreadCreate>
 800248c:	0002      	movs	r2, r0
 800248e:	4b23      	ldr	r3, [pc, #140]	@ (800251c <main+0x318>)
 8002490:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002492:	f005 f8fa 	bl	800768a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    osDelay(1000);
 8002496:	23fa      	movs	r3, #250	@ 0xfa
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	0018      	movs	r0, r3
 800249c:	f005 f94a 	bl	8007734 <osDelay>
 80024a0:	e7f9      	b.n	8002496 <main+0x292>
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	20000564 	.word	0x20000564
 80024a8:	00002711 	.word	0x00002711
 80024ac:	00007531 	.word	0x00007531
 80024b0:	ffff9c41 	.word	0xffff9c41
 80024b4:	50000400 	.word	0x50000400
 80024b8:	50000800 	.word	0x50000800
 80024bc:	20000519 	.word	0x20000519
 80024c0:	20000544 	.word	0x20000544
 80024c4:	20000540 	.word	0x20000540
 80024c8:	20000520 	.word	0x20000520
 80024cc:	200003c4 	.word	0x200003c4
 80024d0:	08008d08 	.word	0x08008d08
 80024d4:	08008d64 	.word	0x08008d64
 80024d8:	08008d2c 	.word	0x08008d2c
 80024dc:	08008d38 	.word	0x08008d38
 80024e0:	08008d6c 	.word	0x08008d6c
 80024e4:	2000051c 	.word	0x2000051c
 80024e8:	200004d4 	.word	0x200004d4
 80024ec:	20000518 	.word	0x20000518
 80024f0:	08000807 	.word	0x08000807
 80024f4:	08001df9 	.word	0x08001df9
 80024f8:	2000058c 	.word	0x2000058c
 80024fc:	20000000 	.word	0x20000000
 8002500:	200005c4 	.word	0x200005c4
 8002504:	08008d3c 	.word	0x08008d3c
 8002508:	08008d4c 	.word	0x08008d4c
 800250c:	200005b0 	.word	0x200005b0
 8002510:	2000044c 	.word	0x2000044c
 8002514:	08008d58 	.word	0x08008d58
 8002518:	08008d7c 	.word	0x08008d7c
 800251c:	20000514 	.word	0x20000514

08002520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b09d      	sub	sp, #116	@ 0x74
 8002524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002526:	2438      	movs	r4, #56	@ 0x38
 8002528:	193b      	adds	r3, r7, r4
 800252a:	0018      	movs	r0, r3
 800252c:	2338      	movs	r3, #56	@ 0x38
 800252e:	001a      	movs	r2, r3
 8002530:	2100      	movs	r1, #0
 8002532:	f006 fa4c 	bl	80089ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002536:	2324      	movs	r3, #36	@ 0x24
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	0018      	movs	r0, r3
 800253c:	2314      	movs	r3, #20
 800253e:	001a      	movs	r2, r3
 8002540:	2100      	movs	r1, #0
 8002542:	f006 fa44 	bl	80089ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002546:	003b      	movs	r3, r7
 8002548:	0018      	movs	r0, r3
 800254a:	2324      	movs	r3, #36	@ 0x24
 800254c:	001a      	movs	r2, r3
 800254e:	2100      	movs	r1, #0
 8002550:	f006 fa3d 	bl	80089ce <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002554:	4b2b      	ldr	r3, [pc, #172]	@ (8002604 <SystemClock_Config+0xe4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a2b      	ldr	r2, [pc, #172]	@ (8002608 <SystemClock_Config+0xe8>)
 800255a:	401a      	ands	r2, r3
 800255c:	4b29      	ldr	r3, [pc, #164]	@ (8002604 <SystemClock_Config+0xe4>)
 800255e:	2180      	movs	r1, #128	@ 0x80
 8002560:	0109      	lsls	r1, r1, #4
 8002562:	430a      	orrs	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002566:	0021      	movs	r1, r4
 8002568:	187b      	adds	r3, r7, r1
 800256a:	2202      	movs	r2, #2
 800256c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800256e:	187b      	adds	r3, r7, r1
 8002570:	2201      	movs	r2, #1
 8002572:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002574:	187b      	adds	r3, r7, r1
 8002576:	2210      	movs	r2, #16
 8002578:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800257a:	187b      	adds	r3, r7, r1
 800257c:	2202      	movs	r2, #2
 800257e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002580:	187b      	adds	r3, r7, r1
 8002582:	2200      	movs	r2, #0
 8002584:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002586:	187b      	adds	r3, r7, r1
 8002588:	2280      	movs	r2, #128	@ 0x80
 800258a:	02d2      	lsls	r2, r2, #11
 800258c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800258e:	187b      	adds	r3, r7, r1
 8002590:	2280      	movs	r2, #128	@ 0x80
 8002592:	03d2      	lsls	r2, r2, #15
 8002594:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002596:	187b      	adds	r3, r7, r1
 8002598:	0018      	movs	r0, r3
 800259a:	f001 ff81 	bl	80044a0 <HAL_RCC_OscConfig>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d001      	beq.n	80025a6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80025a2:	f000 fabd 	bl	8002b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a6:	2124      	movs	r1, #36	@ 0x24
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	220f      	movs	r2, #15
 80025ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ae:	187b      	adds	r3, r7, r1
 80025b0:	2203      	movs	r2, #3
 80025b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	2200      	movs	r2, #0
 80025be:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2101      	movs	r1, #1
 80025ca:	0018      	movs	r0, r3
 80025cc:	f002 fb3c 	bl	8004c48 <HAL_RCC_ClockConfig>
 80025d0:	1e03      	subs	r3, r0, #0
 80025d2:	d001      	beq.n	80025d8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80025d4:	f000 faa4 	bl	8002b20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 80025d8:	003b      	movs	r3, r7
 80025da:	2205      	movs	r2, #5
 80025dc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025de:	003b      	movs	r3, r7
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80025e4:	003b      	movs	r3, r7
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ea:	003b      	movs	r3, r7
 80025ec:	0018      	movs	r0, r3
 80025ee:	f002 fd2f 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 80025f2:	1e03      	subs	r3, r0, #0
 80025f4:	d001      	beq.n	80025fa <SystemClock_Config+0xda>
  {
    Error_Handler();
 80025f6:	f000 fa93 	bl	8002b20 <Error_Handler>
  }
}
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b01d      	add	sp, #116	@ 0x74
 8002600:	bd90      	pop	{r4, r7, pc}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	40007000 	.word	0x40007000
 8002608:	ffffe7ff 	.word	0xffffe7ff

0800260c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002612:	003b      	movs	r3, r7
 8002614:	0018      	movs	r0, r3
 8002616:	2308      	movs	r3, #8
 8002618:	001a      	movs	r2, r3
 800261a:	2100      	movs	r1, #0
 800261c:	f006 f9d7 	bl	80089ce <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002620:	4b30      	ldr	r3, [pc, #192]	@ (80026e4 <MX_ADC_Init+0xd8>)
 8002622:	4a31      	ldr	r2, [pc, #196]	@ (80026e8 <MX_ADC_Init+0xdc>)
 8002624:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002626:	4b2f      	ldr	r3, [pc, #188]	@ (80026e4 <MX_ADC_Init+0xd8>)
 8002628:	2200      	movs	r2, #0
 800262a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800262c:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <MX_ADC_Init+0xd8>)
 800262e:	2280      	movs	r2, #128	@ 0x80
 8002630:	05d2      	lsls	r2, r2, #23
 8002632:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002634:	4b2b      	ldr	r3, [pc, #172]	@ (80026e4 <MX_ADC_Init+0xd8>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800263a:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <MX_ADC_Init+0xd8>)
 800263c:	2200      	movs	r2, #0
 800263e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002640:	4b28      	ldr	r3, [pc, #160]	@ (80026e4 <MX_ADC_Init+0xd8>)
 8002642:	2201      	movs	r2, #1
 8002644:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002646:	4b27      	ldr	r3, [pc, #156]	@ (80026e4 <MX_ADC_Init+0xd8>)
 8002648:	2200      	movs	r2, #0
 800264a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800264c:	4b25      	ldr	r3, [pc, #148]	@ (80026e4 <MX_ADC_Init+0xd8>)
 800264e:	2220      	movs	r2, #32
 8002650:	2100      	movs	r1, #0
 8002652:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8002654:	4b23      	ldr	r3, [pc, #140]	@ (80026e4 <MX_ADC_Init+0xd8>)
 8002656:	2221      	movs	r2, #33	@ 0x21
 8002658:	2101      	movs	r1, #1
 800265a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800265c:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <MX_ADC_Init+0xd8>)
 800265e:	2200      	movs	r2, #0
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002662:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <MX_ADC_Init+0xd8>)
 8002664:	22c2      	movs	r2, #194	@ 0xc2
 8002666:	32ff      	adds	r2, #255	@ 0xff
 8002668:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800266a:	4b1e      	ldr	r3, [pc, #120]	@ (80026e4 <MX_ADC_Init+0xd8>)
 800266c:	222c      	movs	r2, #44	@ 0x2c
 800266e:	2100      	movs	r1, #0
 8002670:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <MX_ADC_Init+0xd8>)
 8002674:	2204      	movs	r2, #4
 8002676:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002678:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <MX_ADC_Init+0xd8>)
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800267e:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <MX_ADC_Init+0xd8>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002684:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <MX_ADC_Init+0xd8>)
 8002686:	2200      	movs	r2, #0
 8002688:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 800268a:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <MX_ADC_Init+0xd8>)
 800268c:	2201      	movs	r2, #1
 800268e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <MX_ADC_Init+0xd8>)
 8002692:	0018      	movs	r0, r3
 8002694:	f000 fcf4 	bl	8003080 <HAL_ADC_Init>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d001      	beq.n	80026a0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800269c:	f000 fa40 	bl	8002b20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80026a0:	003b      	movs	r3, r7
 80026a2:	4a12      	ldr	r2, [pc, #72]	@ (80026ec <MX_ADC_Init+0xe0>)
 80026a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80026a6:	003b      	movs	r3, r7
 80026a8:	2280      	movs	r2, #128	@ 0x80
 80026aa:	0152      	lsls	r2, r2, #5
 80026ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80026ae:	003a      	movs	r2, r7
 80026b0:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <MX_ADC_Init+0xd8>)
 80026b2:	0011      	movs	r1, r2
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 ff93 	bl	80035e0 <HAL_ADC_ConfigChannel>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d001      	beq.n	80026c2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80026be:	f000 fa2f 	bl	8002b20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026c2:	003b      	movs	r3, r7
 80026c4:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <MX_ADC_Init+0xe4>)
 80026c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80026c8:	003a      	movs	r2, r7
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <MX_ADC_Init+0xd8>)
 80026cc:	0011      	movs	r1, r2
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 ff86 	bl	80035e0 <HAL_ADC_ConfigChannel>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d001      	beq.n	80026dc <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80026d8:	f000 fa22 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80026dc:	46c0      	nop			@ (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000354 	.word	0x20000354
 80026e8:	40012400 	.word	0x40012400
 80026ec:	08000004 	.word	0x08000004
 80026f0:	0c000008 	.word	0x0c000008

080026f4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80026fa:	003b      	movs	r3, r7
 80026fc:	0018      	movs	r0, r3
 80026fe:	2308      	movs	r3, #8
 8002700:	001a      	movs	r2, r3
 8002702:	2100      	movs	r1, #0
 8002704:	f006 f963 	bl	80089ce <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002708:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <MX_DAC_Init+0x54>)
 800270a:	4a10      	ldr	r2, [pc, #64]	@ (800274c <MX_DAC_Init+0x58>)
 800270c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800270e:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <MX_DAC_Init+0x54>)
 8002710:	0018      	movs	r0, r3
 8002712:	f001 fa05 	bl	8003b20 <HAL_DAC_Init>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d001      	beq.n	800271e <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 800271a:	f000 fa01 	bl	8002b20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800271e:	003b      	movs	r3, r7
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002724:	003b      	movs	r3, r7
 8002726:	2200      	movs	r2, #0
 8002728:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800272a:	0039      	movs	r1, r7
 800272c:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <MX_DAC_Init+0x54>)
 800272e:	2200      	movs	r2, #0
 8002730:	0018      	movs	r0, r3
 8002732:	f001 fa19 	bl	8003b68 <HAL_DAC_ConfigChannel>
 8002736:	1e03      	subs	r3, r0, #0
 8002738:	d001      	beq.n	800273e <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 800273a:	f000 f9f1 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b002      	add	sp, #8
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	200003b0 	.word	0x200003b0
 800274c:	40007400 	.word	0x40007400

08002750 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002754:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <MX_LPUART1_UART_Init+0x54>)
 8002756:	4a14      	ldr	r2, [pc, #80]	@ (80027a8 <MX_LPUART1_UART_Init+0x58>)
 8002758:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800275a:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <MX_LPUART1_UART_Init+0x54>)
 800275c:	22e1      	movs	r2, #225	@ 0xe1
 800275e:	0252      	lsls	r2, r2, #9
 8002760:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <MX_LPUART1_UART_Init+0x54>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002768:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <MX_LPUART1_UART_Init+0x54>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <MX_LPUART1_UART_Init+0x54>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <MX_LPUART1_UART_Init+0x54>)
 8002776:	220c      	movs	r2, #12
 8002778:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277a:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <MX_LPUART1_UART_Init+0x54>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002780:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <MX_LPUART1_UART_Init+0x54>)
 8002782:	2200      	movs	r2, #0
 8002784:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002786:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <MX_LPUART1_UART_Init+0x54>)
 8002788:	2200      	movs	r2, #0
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800278c:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <MX_LPUART1_UART_Init+0x54>)
 800278e:	0018      	movs	r0, r3
 8002790:	f003 faf2 	bl	8005d78 <HAL_UART_Init>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d001      	beq.n	800279c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002798:	f000 f9c2 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800279c:	46c0      	nop			@ (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	200003c4 	.word	0x200003c4
 80027a8:	40004800 	.word	0x40004800

080027ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027b0:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027b2:	4a15      	ldr	r2, [pc, #84]	@ (8002808 <MX_USART1_UART_Init+0x5c>)
 80027b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027b8:	22e1      	movs	r2, #225	@ 0xe1
 80027ba:	0252      	lsls	r2, r2, #9
 80027bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027d2:	220c      	movs	r2, #12
 80027d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027dc:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ee:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027f0:	0018      	movs	r0, r3
 80027f2:	f003 fac1 	bl	8005d78 <HAL_UART_Init>
 80027f6:	1e03      	subs	r3, r0, #0
 80027f8:	d001      	beq.n	80027fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80027fa:	f000 f991 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027fe:	46c0      	nop			@ (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	2000044c 	.word	0x2000044c
 8002808:	40013800 	.word	0x40013800

0800280c <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	@ 0x28
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002812:	2318      	movs	r3, #24
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	0018      	movs	r0, r3
 8002818:	2310      	movs	r3, #16
 800281a:	001a      	movs	r2, r3
 800281c:	2100      	movs	r1, #0
 800281e:	f006 f8d6 	bl	80089ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002822:	2310      	movs	r3, #16
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	0018      	movs	r0, r3
 8002828:	2308      	movs	r3, #8
 800282a:	001a      	movs	r2, r3
 800282c:	2100      	movs	r1, #0
 800282e:	f006 f8ce 	bl	80089ce <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002832:	003b      	movs	r3, r7
 8002834:	0018      	movs	r0, r3
 8002836:	2310      	movs	r3, #16
 8002838:	001a      	movs	r2, r3
 800283a:	2100      	movs	r1, #0
 800283c:	f006 f8c7 	bl	80089ce <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8002840:	4b2f      	ldr	r3, [pc, #188]	@ (8002900 <MX_TIM22_Init+0xf4>)
 8002842:	4a30      	ldr	r2, [pc, #192]	@ (8002904 <MX_TIM22_Init+0xf8>)
 8002844:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8002846:	4b2e      	ldr	r3, [pc, #184]	@ (8002900 <MX_TIM22_Init+0xf4>)
 8002848:	2200      	movs	r2, #0
 800284a:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284c:	4b2c      	ldr	r3, [pc, #176]	@ (8002900 <MX_TIM22_Init+0xf4>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65535;
 8002852:	4b2b      	ldr	r3, [pc, #172]	@ (8002900 <MX_TIM22_Init+0xf4>)
 8002854:	4a2c      	ldr	r2, [pc, #176]	@ (8002908 <MX_TIM22_Init+0xfc>)
 8002856:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002858:	4b29      	ldr	r3, [pc, #164]	@ (8002900 <MX_TIM22_Init+0xf4>)
 800285a:	2200      	movs	r2, #0
 800285c:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285e:	4b28      	ldr	r3, [pc, #160]	@ (8002900 <MX_TIM22_Init+0xf4>)
 8002860:	2200      	movs	r2, #0
 8002862:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8002864:	4b26      	ldr	r3, [pc, #152]	@ (8002900 <MX_TIM22_Init+0xf4>)
 8002866:	0018      	movs	r0, r3
 8002868:	f002 fd4e 	bl	8005308 <HAL_TIM_Base_Init>
 800286c:	1e03      	subs	r3, r0, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM22_Init+0x68>
  {
    Error_Handler();
 8002870:	f000 f956 	bl	8002b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002874:	2118      	movs	r1, #24
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2280      	movs	r2, #128	@ 0x80
 800287a:	0152      	lsls	r2, r2, #5
 800287c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 800287e:	187a      	adds	r2, r7, r1
 8002880:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <MX_TIM22_Init+0xf4>)
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f002 ff1f 	bl	80056c8 <HAL_TIM_ConfigClockSource>
 800288a:	1e03      	subs	r3, r0, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM22_Init+0x86>
  {
    Error_Handler();
 800288e:	f000 f947 	bl	8002b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8002892:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <MX_TIM22_Init+0xf4>)
 8002894:	0018      	movs	r0, r3
 8002896:	f002 fd77 	bl	8005388 <HAL_TIM_PWM_Init>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 800289e:	f000 f93f 	bl	8002b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a2:	2110      	movs	r1, #16
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2200      	movs	r2, #0
 80028ae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80028b0:	187a      	adds	r2, r7, r1
 80028b2:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <MX_TIM22_Init+0xf4>)
 80028b4:	0011      	movs	r1, r2
 80028b6:	0018      	movs	r0, r3
 80028b8:	f003 fa00 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 80028bc:	1e03      	subs	r3, r0, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM22_Init+0xb8>
  {
    Error_Handler();
 80028c0:	f000 f92e 	bl	8002b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c4:	003b      	movs	r3, r7
 80028c6:	2260      	movs	r2, #96	@ 0x60
 80028c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80028ca:	003b      	movs	r3, r7
 80028cc:	2200      	movs	r2, #0
 80028ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028d0:	003b      	movs	r3, r7
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d6:	003b      	movs	r3, r7
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028dc:	0039      	movs	r1, r7
 80028de:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <MX_TIM22_Init+0xf4>)
 80028e0:	2204      	movs	r2, #4
 80028e2:	0018      	movs	r0, r3
 80028e4:	f002 fe2a 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM22_Init+0xe4>
  {
    Error_Handler();
 80028ec:	f000 f918 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 80028f0:	4b03      	ldr	r3, [pc, #12]	@ (8002900 <MX_TIM22_Init+0xf4>)
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 fa56 	bl	8002da4 <HAL_TIM_MspPostInit>

}
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b00a      	add	sp, #40	@ 0x28
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200004d4 	.word	0x200004d4
 8002904:	40011400 	.word	0x40011400
 8002908:	0000ffff 	.word	0x0000ffff

0800290c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b089      	sub	sp, #36	@ 0x24
 8002910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002912:	240c      	movs	r4, #12
 8002914:	193b      	adds	r3, r7, r4
 8002916:	0018      	movs	r0, r3
 8002918:	2314      	movs	r3, #20
 800291a:	001a      	movs	r2, r3
 800291c:	2100      	movs	r1, #0
 800291e:	f006 f856 	bl	80089ce <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002922:	4b54      	ldr	r3, [pc, #336]	@ (8002a74 <MX_GPIO_Init+0x168>)
 8002924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002926:	4b53      	ldr	r3, [pc, #332]	@ (8002a74 <MX_GPIO_Init+0x168>)
 8002928:	2104      	movs	r1, #4
 800292a:	430a      	orrs	r2, r1
 800292c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800292e:	4b51      	ldr	r3, [pc, #324]	@ (8002a74 <MX_GPIO_Init+0x168>)
 8002930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002932:	2204      	movs	r2, #4
 8002934:	4013      	ands	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a74 <MX_GPIO_Init+0x168>)
 800293c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800293e:	4b4d      	ldr	r3, [pc, #308]	@ (8002a74 <MX_GPIO_Init+0x168>)
 8002940:	2101      	movs	r1, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002946:	4b4b      	ldr	r3, [pc, #300]	@ (8002a74 <MX_GPIO_Init+0x168>)
 8002948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294a:	2201      	movs	r2, #1
 800294c:	4013      	ands	r3, r2
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002952:	4b48      	ldr	r3, [pc, #288]	@ (8002a74 <MX_GPIO_Init+0x168>)
 8002954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002956:	4b47      	ldr	r3, [pc, #284]	@ (8002a74 <MX_GPIO_Init+0x168>)
 8002958:	2102      	movs	r1, #2
 800295a:	430a      	orrs	r2, r1
 800295c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800295e:	4b45      	ldr	r3, [pc, #276]	@ (8002a74 <MX_GPIO_Init+0x168>)
 8002960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIG_OE_Pin|TRIG_SEL0_Pin|TRIG_SEL1_Pin, GPIO_PIN_RESET);
 800296a:	23e0      	movs	r3, #224	@ 0xe0
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	4842      	ldr	r0, [pc, #264]	@ (8002a78 <MX_GPIO_Init+0x16c>)
 8002970:	2200      	movs	r2, #0
 8002972:	0019      	movs	r1, r3
 8002974:	f001 fd76 	bl	8004464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BOOST_ENABLE_Pin|SW_5V_ENABLE_Pin|
 8002978:	4940      	ldr	r1, [pc, #256]	@ (8002a7c <MX_GPIO_Init+0x170>)
 800297a:	23a0      	movs	r3, #160	@ 0xa0
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	2200      	movs	r2, #0
 8002980:	0018      	movs	r0, r3
 8002982:	f001 fd6f 	bl	8004464 <HAL_GPIO_WritePin>
		    BIAS_ENABLE_LED_Pin|IMON_RESET_Pin|
		    LED_OE5_Pin, GPIO_PIN_RESET);
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_OE1_Pin|LED_OE2_Pin|LED_OE3_Pin|LED_OE6_Pin
 8002986:	493e      	ldr	r1, [pc, #248]	@ (8002a80 <MX_GPIO_Init+0x174>)
 8002988:	4b3e      	ldr	r3, [pc, #248]	@ (8002a84 <MX_GPIO_Init+0x178>)
 800298a:	2200      	movs	r2, #0
 800298c:	0018      	movs	r0, r3
 800298e:	f001 fd69 	bl	8004464 <HAL_GPIO_WritePin>
                          |LED_OE7_Pin|LED_OE4_Pin|SW_3V3_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TRIG_OE_Pin TRIG_SEL0_Pin TRIG_SEL1_Pin */
  GPIO_InitStruct.Pin = TRIG_OE_Pin|TRIG_SEL0_Pin|TRIG_SEL1_Pin;
 8002992:	193b      	adds	r3, r7, r4
 8002994:	22e0      	movs	r2, #224	@ 0xe0
 8002996:	0212      	lsls	r2, r2, #8
 8002998:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299a:	193b      	adds	r3, r7, r4
 800299c:	2201      	movs	r2, #1
 800299e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ac:	193b      	adds	r3, r7, r4
 80029ae:	4a32      	ldr	r2, [pc, #200]	@ (8002a78 <MX_GPIO_Init+0x16c>)
 80029b0:	0019      	movs	r1, r3
 80029b2:	0010      	movs	r0, r2
 80029b4:	f001 fbd8 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOST_ENABLE_Pin SW_5V_ENABLE_Pin BIAS_ENABLE_LED_Pin IMON_RESET_Pin
                           LED_OE5_Pin */
  GPIO_InitStruct.Pin = BOOST_ENABLE_Pin|SW_5V_ENABLE_Pin|BIAS_ENABLE_LED_Pin
 80029b8:	193b      	adds	r3, r7, r4
 80029ba:	4a30      	ldr	r2, [pc, #192]	@ (8002a7c <MX_GPIO_Init+0x170>)
 80029bc:	601a      	str	r2, [r3, #0]
    |IMON_RESET_Pin|LED_OE5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	2201      	movs	r2, #1
 80029c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	193a      	adds	r2, r7, r4
 80029d2:	23a0      	movs	r3, #160	@ 0xa0
 80029d4:	05db      	lsls	r3, r3, #23
 80029d6:	0011      	movs	r1, r2
 80029d8:	0018      	movs	r0, r3
 80029da:	f001 fbc5 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_OE1_Pin LED_OE2_Pin LED_OE3_Pin LED_OE6_Pin
                           LED_OE7_Pin LED_OE4_Pin SW_3V3_ENABLE_Pin */
  GPIO_InitStruct.Pin = LED_OE1_Pin|LED_OE2_Pin|LED_OE3_Pin|LED_OE6_Pin
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	4a27      	ldr	r2, [pc, #156]	@ (8002a80 <MX_GPIO_Init+0x174>)
 80029e2:	601a      	str	r2, [r3, #0]
                          |LED_OE7_Pin|LED_OE4_Pin|SW_3V3_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e4:	193b      	adds	r3, r7, r4
 80029e6:	2201      	movs	r2, #1
 80029e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	4a22      	ldr	r2, [pc, #136]	@ (8002a84 <MX_GPIO_Init+0x178>)
 80029fa:	0019      	movs	r1, r3
 80029fc:	0010      	movs	r0, r2
 80029fe:	f001 fbb3 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_ADC_Pin SCLK_ADC_Pin SDATA_ADC_Pin */
  GPIO_InitStruct.Pin = CS_ADC_Pin|SCLK_ADC_Pin|SDATA_ADC_Pin;
 8002a02:	0021      	movs	r1, r4
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	22e0      	movs	r2, #224	@ 0xe0
 8002a08:	01d2      	lsls	r2, r2, #7
 8002a0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a0c:	000c      	movs	r4, r1
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2200      	movs	r2, #0
 8002a12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	4a19      	ldr	r2, [pc, #100]	@ (8002a84 <MX_GPIO_Init+0x178>)
 8002a1e:	0019      	movs	r1, r3
 8002a20:	0010      	movs	r0, r2
 8002a22:	f001 fba1 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMON_N_ALERT_Pin */
  GPIO_InitStruct.Pin = IMON_N_ALERT_Pin;
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	0152      	lsls	r2, r2, #5
 8002a2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a2e:	193b      	adds	r3, r7, r4
 8002a30:	2288      	movs	r2, #136	@ 0x88
 8002a32:	0352      	lsls	r2, r2, #13
 8002a34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMON_N_ALERT_GPIO_Port, &GPIO_InitStruct);
 8002a3c:	193a      	adds	r2, r7, r4
 8002a3e:	23a0      	movs	r3, #160	@ 0xa0
 8002a40:	05db      	lsls	r3, r3, #23
 8002a42:	0011      	movs	r1, r2
 8002a44:	0018      	movs	r0, r3
 8002a46:	f001 fb8f 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pin : uC_IN_TRIG_Pin */
  GPIO_InitStruct.Pin = uC_IN_TRIG_Pin;
 8002a4a:	0021      	movs	r1, r4
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2210      	movs	r2, #16
 8002a50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2288      	movs	r2, #136	@ 0x88
 8002a56:	0352      	lsls	r2, r2, #13
 8002a58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(uC_IN_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	4a08      	ldr	r2, [pc, #32]	@ (8002a84 <MX_GPIO_Init+0x178>)
 8002a64:	0019      	movs	r1, r3
 8002a66:	0010      	movs	r0, r2
 8002a68:	f001 fb7e 	bl	8004168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b009      	add	sp, #36	@ 0x24
 8002a72:	bd90      	pop	{r4, r7, pc}
 8002a74:	40021000 	.word	0x40021000
 8002a78:	50000800 	.word	0x50000800
 8002a7c:	000088e0 	.word	0x000088e0
 8002a80:	000003c7 	.word	0x000003c7
 8002a84:	50000400 	.word	0x50000400

08002a88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char c='0';
 8002a90:	230f      	movs	r3, #15
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	2230      	movs	r2, #48	@ 0x30
 8002a96:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8002a98:	2064      	movs	r0, #100	@ 0x64
 8002a9a:	f004 fe4b 	bl	8007734 <osDelay>
    c++;
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	3201      	adds	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
    if ( c > '9' )
 8002aaa:	187b      	adds	r3, r7, r1
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b39      	cmp	r3, #57	@ 0x39
 8002ab0:	d902      	bls.n	8002ab8 <StartDefaultTask+0x30>
      c='0';
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	2230      	movs	r2, #48	@ 0x30
 8002ab6:	701a      	strb	r2, [r3, #0]
    msg[0]=c;
 8002ab8:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <StartDefaultTask+0x88>)
 8002aba:	220f      	movs	r2, #15
 8002abc:	18ba      	adds	r2, r7, r2
 8002abe:	7812      	ldrb	r2, [r2, #0]
 8002ac0:	701a      	strb	r2, [r3, #0]
    if(power_changed)
 8002ac2:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <StartDefaultTask+0x8c>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d014      	beq.n	8002af4 <StartDefaultTask+0x6c>
      {
	if (modbusMaskRead(coils, R_POWER_ON) )
 8002aca:	4b13      	ldr	r3, [pc, #76]	@ (8002b18 <StartDefaultTask+0x90>)
 8002acc:	2100      	movs	r1, #0
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7fd fcea 	bl	80004a8 <modbusMaskRead>
 8002ad4:	1e03      	subs	r3, r0, #0
 8002ad6:	d005      	beq.n	8002ae4 <StartDefaultTask+0x5c>
	  {
	    msg[2]='1';
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b10 <StartDefaultTask+0x88>)
 8002ada:	2231      	movs	r2, #49	@ 0x31
 8002adc:	709a      	strb	r2, [r3, #2]
	    PowerOn();
 8002ade:	f7ff f84f 	bl	8001b80 <PowerOn>
 8002ae2:	e004      	b.n	8002aee <StartDefaultTask+0x66>
	  }
	else
	  {
	    msg[2]='0';
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <StartDefaultTask+0x88>)
 8002ae6:	2230      	movs	r2, #48	@ 0x30
 8002ae8:	709a      	strb	r2, [r3, #2]
	    PowerOff();
 8002aea:	f7ff f8e7 	bl	8001cbc <PowerOff>
	  }
	power_changed=false;
 8002aee:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <StartDefaultTask+0x8c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
      }
#if USE_SERIAL_1
    serial_1_print(msg);
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <StartDefaultTask+0x88>)
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7fe feb6 	bl	8001868 <serial_1_print>
    serial_1_println(" in StartDefaultTask");
 8002afc:	4b07      	ldr	r3, [pc, #28]	@ (8002b1c <StartDefaultTask+0x94>)
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7fe fecc 	bl	800189c <serial_1_println>
    osDelay(1000);
 8002b04:	23fa      	movs	r3, #250	@ 0xfa
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f004 fe13 	bl	8007734 <osDelay>
    osDelay(100);
 8002b0e:	e7c3      	b.n	8002a98 <StartDefaultTask+0x10>
 8002b10:	2000007c 	.word	0x2000007c
 8002b14:	200005c0 	.word	0x200005c0
 8002b18:	20000584 	.word	0x20000584
 8002b1c:	08008d98 	.word	0x08008d98

08002b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b24:	b672      	cpsid	i
}
 8002b26:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b28:	46c0      	nop			@ (mov r8, r8)
 8002b2a:	e7fd      	b.n	8002b28 <Error_Handler+0x8>

08002b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b30:	4b0f      	ldr	r3, [pc, #60]	@ (8002b70 <HAL_MspInit+0x44>)
 8002b32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b34:	4b0e      	ldr	r3, [pc, #56]	@ (8002b70 <HAL_MspInit+0x44>)
 8002b36:	2101      	movs	r1, #1
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <HAL_MspInit+0x44>)
 8002b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b40:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <HAL_MspInit+0x44>)
 8002b42:	2180      	movs	r1, #128	@ 0x80
 8002b44:	0549      	lsls	r1, r1, #21
 8002b46:	430a      	orrs	r2, r1
 8002b48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	425b      	negs	r3, r3
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2103      	movs	r1, #3
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 ffb2 	bl	8003abc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 3, 0);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2103      	movs	r1, #3
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	f000 ffad 	bl	8003abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002b62:	2003      	movs	r0, #3
 8002b64:	f000 ffbf 	bl	8003ae6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b089      	sub	sp, #36	@ 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	240c      	movs	r4, #12
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	0018      	movs	r0, r3
 8002b82:	2314      	movs	r3, #20
 8002b84:	001a      	movs	r2, r3
 8002b86:	2100      	movs	r1, #0
 8002b88:	f005 ff21 	bl	80089ce <memset>
  if(hadc->Instance==ADC1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a14      	ldr	r2, [pc, #80]	@ (8002be4 <HAL_ADC_MspInit+0x70>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d122      	bne.n	8002bdc <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b96:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <HAL_ADC_MspInit+0x74>)
 8002b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b9a:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <HAL_ADC_MspInit+0x74>)
 8002b9c:	2180      	movs	r1, #128	@ 0x80
 8002b9e:	0089      	lsls	r1, r1, #2
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba4:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_ADC_MspInit+0x74>)
 8002ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8002be8 <HAL_ADC_MspInit+0x74>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	430a      	orrs	r2, r1
 8002bae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_ADC_MspInit+0x74>)
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = BIAS_MON_LED_Pin|IMON_OUT_Pin;
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bce:	193a      	adds	r2, r7, r4
 8002bd0:	23a0      	movs	r3, #160	@ 0xa0
 8002bd2:	05db      	lsls	r3, r3, #23
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f001 fac6 	bl	8004168 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002bdc:	46c0      	nop			@ (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b009      	add	sp, #36	@ 0x24
 8002be2:	bd90      	pop	{r4, r7, pc}
 8002be4:	40012400 	.word	0x40012400
 8002be8:	40021000 	.word	0x40021000

08002bec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b089      	sub	sp, #36	@ 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	240c      	movs	r4, #12
 8002bf6:	193b      	adds	r3, r7, r4
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	2314      	movs	r3, #20
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	2100      	movs	r1, #0
 8002c00:	f005 fee5 	bl	80089ce <memset>
  if(hdac->Instance==DAC)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a14      	ldr	r2, [pc, #80]	@ (8002c5c <HAL_DAC_MspInit+0x70>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d122      	bne.n	8002c54 <HAL_DAC_MspInit+0x68>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002c0e:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <HAL_DAC_MspInit+0x74>)
 8002c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c12:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <HAL_DAC_MspInit+0x74>)
 8002c14:	2180      	movs	r1, #128	@ 0x80
 8002c16:	0589      	lsls	r1, r1, #22
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1c:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <HAL_DAC_MspInit+0x74>)
 8002c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c20:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <HAL_DAC_MspInit+0x74>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	430a      	orrs	r2, r1
 8002c26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c28:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <HAL_DAC_MspInit+0x74>)
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BIAS_ADJUST_LED_Pin;
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	2210      	movs	r2, #16
 8002c38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	193b      	adds	r3, r7, r4
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BIAS_ADJUST_LED_GPIO_Port, &GPIO_InitStruct);
 8002c46:	193a      	adds	r2, r7, r4
 8002c48:	23a0      	movs	r3, #160	@ 0xa0
 8002c4a:	05db      	lsls	r3, r3, #23
 8002c4c:	0011      	movs	r1, r2
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f001 fa8a 	bl	8004168 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b009      	add	sp, #36	@ 0x24
 8002c5a:	bd90      	pop	{r4, r7, pc}
 8002c5c:	40007400 	.word	0x40007400
 8002c60:	40021000 	.word	0x40021000

08002c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b08b      	sub	sp, #44	@ 0x2c
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	2414      	movs	r4, #20
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	0018      	movs	r0, r3
 8002c72:	2314      	movs	r3, #20
 8002c74:	001a      	movs	r2, r3
 8002c76:	2100      	movs	r1, #0
 8002c78:	f005 fea9 	bl	80089ce <memset>
  if(huart->Instance==LPUART1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a38      	ldr	r2, [pc, #224]	@ (8002d64 <HAL_UART_MspInit+0x100>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d132      	bne.n	8002cec <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002c86:	4b38      	ldr	r3, [pc, #224]	@ (8002d68 <HAL_UART_MspInit+0x104>)
 8002c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c8a:	4b37      	ldr	r3, [pc, #220]	@ (8002d68 <HAL_UART_MspInit+0x104>)
 8002c8c:	2180      	movs	r1, #128	@ 0x80
 8002c8e:	02c9      	lsls	r1, r1, #11
 8002c90:	430a      	orrs	r2, r1
 8002c92:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c94:	4b34      	ldr	r3, [pc, #208]	@ (8002d68 <HAL_UART_MspInit+0x104>)
 8002c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c98:	4b33      	ldr	r3, [pc, #204]	@ (8002d68 <HAL_UART_MspInit+0x104>)
 8002c9a:	2102      	movs	r1, #2
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ca0:	4b31      	ldr	r3, [pc, #196]	@ (8002d68 <HAL_UART_MspInit+0x104>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002cac:	193b      	adds	r3, r7, r4
 8002cae:	22c0      	movs	r2, #192	@ 0xc0
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	0021      	movs	r1, r4
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	2202      	movs	r2, #2
 8002cba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	187b      	adds	r3, r7, r1
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	2204      	movs	r2, #4
 8002ccc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	4a26      	ldr	r2, [pc, #152]	@ (8002d6c <HAL_UART_MspInit+0x108>)
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	0010      	movs	r0, r2
 8002cd6:	f001 fa47 	bl	8004168 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 3, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2103      	movs	r1, #3
 8002cde:	201d      	movs	r0, #29
 8002ce0:	f000 feec 	bl	8003abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8002ce4:	201d      	movs	r0, #29
 8002ce6:	f000 fefe 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cea:	e037      	b.n	8002d5c <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d70 <HAL_UART_MspInit+0x10c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d132      	bne.n	8002d5c <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d68 <HAL_UART_MspInit+0x104>)
 8002cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <HAL_UART_MspInit+0x104>)
 8002cfc:	2180      	movs	r1, #128	@ 0x80
 8002cfe:	01c9      	lsls	r1, r1, #7
 8002d00:	430a      	orrs	r2, r1
 8002d02:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <HAL_UART_MspInit+0x104>)
 8002d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d08:	4b17      	ldr	r3, [pc, #92]	@ (8002d68 <HAL_UART_MspInit+0x104>)
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d10:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <HAL_UART_MspInit+0x104>)
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	2201      	movs	r2, #1
 8002d16:	4013      	ands	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8002d1c:	2114      	movs	r1, #20
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	22c0      	movs	r2, #192	@ 0xc0
 8002d22:	00d2      	lsls	r2, r2, #3
 8002d24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	2202      	movs	r2, #2
 8002d2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	2203      	movs	r2, #3
 8002d36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3e:	187a      	adds	r2, r7, r1
 8002d40:	23a0      	movs	r3, #160	@ 0xa0
 8002d42:	05db      	lsls	r3, r3, #23
 8002d44:	0011      	movs	r1, r2
 8002d46:	0018      	movs	r0, r3
 8002d48:	f001 fa0e 	bl	8004168 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2103      	movs	r1, #3
 8002d50:	201b      	movs	r0, #27
 8002d52:	f000 feb3 	bl	8003abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d56:	201b      	movs	r0, #27
 8002d58:	f000 fec5 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b00b      	add	sp, #44	@ 0x2c
 8002d62:	bd90      	pop	{r4, r7, pc}
 8002d64:	40004800 	.word	0x40004800
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	50000400 	.word	0x50000400
 8002d70:	40013800 	.word	0x40013800

08002d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM22)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a06      	ldr	r2, [pc, #24]	@ (8002d9c <HAL_TIM_Base_MspInit+0x28>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d105      	bne.n	8002d92 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM22_MspInit 0 */

  /* USER CODE END TIM22_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM22_CLK_ENABLE();
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_TIM_Base_MspInit+0x2c>)
 8002d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d8a:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <HAL_TIM_Base_MspInit+0x2c>)
 8002d8c:	2120      	movs	r1, #32
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* USER CODE END TIM22_MspInit 1 */

  }

}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b002      	add	sp, #8
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	40011400 	.word	0x40011400
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b089      	sub	sp, #36	@ 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	240c      	movs	r4, #12
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	0018      	movs	r0, r3
 8002db2:	2314      	movs	r3, #20
 8002db4:	001a      	movs	r2, r3
 8002db6:	2100      	movs	r1, #0
 8002db8:	f005 fe09 	bl	80089ce <memset>
  if(htim->Instance==TIM22)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a14      	ldr	r2, [pc, #80]	@ (8002e14 <HAL_TIM_MspPostInit+0x70>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d121      	bne.n	8002e0a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM22_MspPostInit 0 */

  /* USER CODE END TIM22_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <HAL_TIM_MspPostInit+0x74>)
 8002dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dca:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <HAL_TIM_MspPostInit+0x74>)
 8002dcc:	2102      	movs	r1, #2
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002dd2:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <HAL_TIM_MspPostInit+0x74>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
    /**TIM22 GPIO Configuration
    PB5     ------> TIM22_CH2
    */
    GPIO_InitStruct.Pin = uC_OUT_TRIG_Pin;
 8002dde:	0021      	movs	r1, r4
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2220      	movs	r2, #32
 8002de4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2202      	movs	r2, #2
 8002dea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2200      	movs	r2, #0
 8002df6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(uC_OUT_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	4a06      	ldr	r2, [pc, #24]	@ (8002e1c <HAL_TIM_MspPostInit+0x78>)
 8002e02:	0019      	movs	r1, r3
 8002e04:	0010      	movs	r0, r2
 8002e06:	f001 f9af 	bl	8004168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b009      	add	sp, #36	@ 0x24
 8002e10:	bd90      	pop	{r4, r7, pc}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	40011400 	.word	0x40011400
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	50000400 	.word	0x50000400

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e24:	46c0      	nop			@ (mov r8, r8)
 8002e26:	e7fd      	b.n	8002e24 <NMI_Handler+0x4>

08002e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2c:	46c0      	nop			@ (mov r8, r8)
 8002e2e:	e7fd      	b.n	8002e2c <HardFault_Handler+0x4>

08002e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e34:	f000 f8e4 	bl	8003000 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002e38:	f005 f98a 	bl	8008150 <xTaskGetSchedulerState>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d001      	beq.n	8002e46 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002e42:	f005 fae9 	bl	8008418 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash and EEPROM global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002e50:	f000 ffe8 	bl	8003e24 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e60:	4b03      	ldr	r3, [pc, #12]	@ (8002e70 <USART1_IRQHandler+0x14>)
 8002e62:	0018      	movs	r0, r3
 8002e64:	f003 f8da 	bl	800601c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e68:	46c0      	nop			@ (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	2000044c 	.word	0x2000044c

08002e74 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002e78:	4b03      	ldr	r3, [pc, #12]	@ (8002e88 <RNG_LPUART1_IRQHandler+0x14>)
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f003 f8ce 	bl	800601c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	200003c4 	.word	0x200003c4

08002e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e94:	4a14      	ldr	r2, [pc, #80]	@ (8002ee8 <_sbrk+0x5c>)
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <_sbrk+0x60>)
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea0:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <_sbrk+0x64>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <_sbrk+0x64>)
 8002eaa:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <_sbrk+0x68>)
 8002eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <_sbrk+0x64>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	18d3      	adds	r3, r2, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d207      	bcs.n	8002ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ebc:	f005 fda2 	bl	8008a04 <__errno>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	425b      	negs	r3, r3
 8002eca:	e009      	b.n	8002ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ecc:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <_sbrk+0x64>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ed2:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <_sbrk+0x64>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	18d2      	adds	r2, r2, r3
 8002eda:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <_sbrk+0x64>)
 8002edc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b006      	add	sp, #24
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20005000 	.word	0x20005000
 8002eec:	00000400 	.word	0x00000400
 8002ef0:	200005c8 	.word	0x200005c8
 8002ef4:	20001478 	.word	0x20001478

08002ef8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002efc:	46c0      	nop			@ (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002f04:	480d      	ldr	r0, [pc, #52]	@ (8002f3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002f06:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f08:	f7ff fff6 	bl	8002ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f0c:	480c      	ldr	r0, [pc, #48]	@ (8002f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f0e:	490d      	ldr	r1, [pc, #52]	@ (8002f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f10:	4a0d      	ldr	r2, [pc, #52]	@ (8002f48 <LoopForever+0xe>)
  movs r3, #0
 8002f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f14:	e002      	b.n	8002f1c <LoopCopyDataInit>

08002f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f1a:	3304      	adds	r3, #4

08002f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f20:	d3f9      	bcc.n	8002f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f22:	4a0a      	ldr	r2, [pc, #40]	@ (8002f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f24:	4c0a      	ldr	r4, [pc, #40]	@ (8002f50 <LoopForever+0x16>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f28:	e001      	b.n	8002f2e <LoopFillZerobss>

08002f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f2c:	3204      	adds	r2, #4

08002f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f30:	d3fb      	bcc.n	8002f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f32:	f005 fd6d 	bl	8008a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f36:	f7ff f965 	bl	8002204 <main>

08002f3a <LoopForever>:

LoopForever:
    b LoopForever
 8002f3a:	e7fe      	b.n	8002f3a <LoopForever>
   ldr   r0, =_estack
 8002f3c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f44:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8002f48:	08008e4c 	.word	0x08008e4c
  ldr r2, =_sbss
 8002f4c:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8002f50:	20001474 	.word	0x20001474

08002f54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f54:	e7fe      	b.n	8002f54 <ADC1_COMP_IRQHandler>
	...

08002f58 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f64:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <HAL_Init+0x3c>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <HAL_Init+0x3c>)
 8002f6a:	2140      	movs	r1, #64	@ 0x40
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f70:	2003      	movs	r0, #3
 8002f72:	f000 f811 	bl	8002f98 <HAL_InitTick>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002f7a:	1dfb      	adds	r3, r7, #7
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	e001      	b.n	8002f86 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f82:	f7ff fdd3 	bl	8002b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f86:	1dfb      	adds	r3, r7, #7
 8002f88:	781b      	ldrb	r3, [r3, #0]
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b002      	add	sp, #8
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	40022000 	.word	0x40022000

08002f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fa0:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <HAL_InitTick+0x5c>)
 8002fa2:	681c      	ldr	r4, [r3, #0]
 8002fa4:	4b14      	ldr	r3, [pc, #80]	@ (8002ff8 <HAL_InitTick+0x60>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	0019      	movs	r1, r3
 8002faa:	23fa      	movs	r3, #250	@ 0xfa
 8002fac:	0098      	lsls	r0, r3, #2
 8002fae:	f7fd f8b3 	bl	8000118 <__udivsi3>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	0020      	movs	r0, r4
 8002fb8:	f7fd f8ae 	bl	8000118 <__udivsi3>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 fda1 	bl	8003b06 <HAL_SYSTICK_Config>
 8002fc4:	1e03      	subs	r3, r0, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e00f      	b.n	8002fec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d80b      	bhi.n	8002fea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	425b      	negs	r3, r3
 8002fd8:	2200      	movs	r2, #0
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 fd6e 	bl	8003abc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_InitTick+0x64>)
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b003      	add	sp, #12
 8002ff2:	bd90      	pop	{r4, r7, pc}
 8002ff4:	20000084 	.word	0x20000084
 8002ff8:	2000008c 	.word	0x2000008c
 8002ffc:	20000088 	.word	0x20000088

08003000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <HAL_IncTick+0x1c>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	001a      	movs	r2, r3
 800300a:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_IncTick+0x20>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	18d2      	adds	r2, r2, r3
 8003010:	4b03      	ldr	r3, [pc, #12]	@ (8003020 <HAL_IncTick+0x20>)
 8003012:	601a      	str	r2, [r3, #0]
}
 8003014:	46c0      	nop			@ (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	2000008c 	.word	0x2000008c
 8003020:	200005cc 	.word	0x200005cc

08003024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  return uwTick;
 8003028:	4b02      	ldr	r3, [pc, #8]	@ (8003034 <HAL_GetTick+0x10>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	200005cc 	.word	0x200005cc

08003038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff fff0 	bl	8003024 <HAL_GetTick>
 8003044:	0003      	movs	r3, r0
 8003046:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3301      	adds	r3, #1
 8003050:	d005      	beq.n	800305e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003052:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <HAL_Delay+0x44>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	001a      	movs	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	189b      	adds	r3, r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	f7ff ffe0 	bl	8003024 <HAL_GetTick>
 8003064:	0002      	movs	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d8f7      	bhi.n	8003060 <HAL_Delay+0x28>
  {
  }
}
 8003070:	46c0      	nop			@ (mov r8, r8)
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b004      	add	sp, #16
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	2000008c 	.word	0x2000008c

08003080 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e159      	b.n	8003346 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2250      	movs	r2, #80	@ 0x50
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7ff fd62 	bl	8002b74 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b4:	2210      	movs	r2, #16
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d005      	beq.n	80030c8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2204      	movs	r2, #4
 80030c4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80030c6:	d00b      	beq.n	80030e0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030cc:	2210      	movs	r2, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2250      	movs	r2, #80	@ 0x50
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e132      	b.n	8003346 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e4:	4a9a      	ldr	r2, [pc, #616]	@ (8003350 <HAL_ADC_Init+0x2d0>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	2202      	movs	r2, #2
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2203      	movs	r2, #3
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d108      	bne.n	8003110 <HAL_ADC_Init+0x90>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	4013      	ands	r3, r2
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_ADC_Init+0x90>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_ADC_Init+0x92>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d149      	bne.n	80031aa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	23c0      	movs	r3, #192	@ 0xc0
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	429a      	cmp	r2, r3
 8003120:	d00b      	beq.n	800313a <HAL_ADC_Init+0xba>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	2380      	movs	r3, #128	@ 0x80
 8003128:	05db      	lsls	r3, r3, #23
 800312a:	429a      	cmp	r2, r3
 800312c:	d005      	beq.n	800313a <HAL_ADC_Init+0xba>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	429a      	cmp	r2, r3
 8003138:	d111      	bne.n	800315e <HAL_ADC_Init+0xde>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0092      	lsls	r2, r2, #2
 8003146:	0892      	lsrs	r2, r2, #2
 8003148:	611a      	str	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6919      	ldr	r1, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	611a      	str	r2, [r3, #16]
 800315c:	e014      	b.n	8003188 <HAL_ADC_Init+0x108>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0092      	lsls	r2, r2, #2
 800316a:	0892      	lsrs	r2, r2, #2
 800316c:	611a      	str	r2, [r3, #16]
 800316e:	4b79      	ldr	r3, [pc, #484]	@ (8003354 <HAL_ADC_Init+0x2d4>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4b78      	ldr	r3, [pc, #480]	@ (8003354 <HAL_ADC_Init+0x2d4>)
 8003174:	4978      	ldr	r1, [pc, #480]	@ (8003358 <HAL_ADC_Init+0x2d8>)
 8003176:	400a      	ands	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	4b76      	ldr	r3, [pc, #472]	@ (8003354 <HAL_ADC_Init+0x2d4>)
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4b74      	ldr	r3, [pc, #464]	@ (8003354 <HAL_ADC_Init+0x2d4>)
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2118      	movs	r1, #24
 8003194:	438a      	bics	r2, r1
 8003196:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68d9      	ldr	r1, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80031aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003354 <HAL_ADC_Init+0x2d4>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b69      	ldr	r3, [pc, #420]	@ (8003354 <HAL_ADC_Init+0x2d4>)
 80031b0:	496a      	ldr	r1, [pc, #424]	@ (800335c <HAL_ADC_Init+0x2dc>)
 80031b2:	400a      	ands	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80031b6:	4b67      	ldr	r3, [pc, #412]	@ (8003354 <HAL_ADC_Init+0x2d4>)
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031be:	065a      	lsls	r2, r3, #25
 80031c0:	4b64      	ldr	r3, [pc, #400]	@ (8003354 <HAL_ADC_Init+0x2d4>)
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	2380      	movs	r3, #128	@ 0x80
 80031ce:	055b      	lsls	r3, r3, #21
 80031d0:	4013      	ands	r3, r2
 80031d2:	d108      	bne.n	80031e6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2180      	movs	r1, #128	@ 0x80
 80031e0:	0549      	lsls	r1, r1, #21
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	495b      	ldr	r1, [pc, #364]	@ (8003360 <HAL_ADC_Init+0x2e0>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68d9      	ldr	r1, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d101      	bne.n	800320c <HAL_ADC_Init+0x18c>
 8003208:	2304      	movs	r3, #4
 800320a:	e000      	b.n	800320e <HAL_ADC_Init+0x18e>
 800320c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800320e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2020      	movs	r0, #32
 8003214:	5c1b      	ldrb	r3, [r3, r0]
 8003216:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003218:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	202c      	movs	r0, #44	@ 0x2c
 800321e:	5c1b      	ldrb	r3, [r3, r0]
 8003220:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003222:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003228:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003230:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003238:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003246:	23c2      	movs	r3, #194	@ 0xc2
 8003248:	33ff      	adds	r3, #255	@ 0xff
 800324a:	429a      	cmp	r2, r3
 800324c:	d00b      	beq.n	8003266 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68d9      	ldr	r1, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2221      	movs	r2, #33	@ 0x21
 800326a:	5c9b      	ldrb	r3, [r3, r2]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d11a      	bne.n	80032a6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2180      	movs	r1, #128	@ 0x80
 8003286:	0249      	lsls	r1, r1, #9
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]
 800328c:	e00b      	b.n	80032a6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003292:	2220      	movs	r2, #32
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329e:	2201      	movs	r2, #1
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d11f      	bne.n	80032ee <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	492a      	ldr	r1, [pc, #168]	@ (8003364 <HAL_ADC_Init+0x2e4>)
 80032ba:	400a      	ands	r2, r1
 80032bc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6919      	ldr	r1, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80032cc:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80032d2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2101      	movs	r1, #1
 80032e8:	430a      	orrs	r2, r1
 80032ea:	611a      	str	r2, [r3, #16]
 80032ec:	e00e      	b.n	800330c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2201      	movs	r2, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d107      	bne.n	800330c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2101      	movs	r1, #1
 8003308:	438a      	bics	r2, r1
 800330a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2107      	movs	r1, #7
 8003318:	438a      	bics	r2, r1
 800331a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6959      	ldr	r1, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003338:	2203      	movs	r2, #3
 800333a:	4393      	bics	r3, r2
 800333c:	2201      	movs	r2, #1
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	fffffefd 	.word	0xfffffefd
 8003354:	40012708 	.word	0x40012708
 8003358:	ffc3ffff 	.word	0xffc3ffff
 800335c:	fdffffff 	.word	0xfdffffff
 8003360:	fffe0219 	.word	0xfffe0219
 8003364:	fffffc03 	.word	0xfffffc03

08003368 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003370:	230f      	movs	r3, #15
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2204      	movs	r2, #4
 8003380:	4013      	ands	r3, r2
 8003382:	d138      	bne.n	80033f6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2250      	movs	r2, #80	@ 0x50
 8003388:	5c9b      	ldrb	r3, [r3, r2]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_ADC_Start+0x2a>
 800338e:	2302      	movs	r3, #2
 8003390:	e038      	b.n	8003404 <HAL_ADC_Start+0x9c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2250      	movs	r2, #80	@ 0x50
 8003396:	2101      	movs	r1, #1
 8003398:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d007      	beq.n	80033b2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80033a2:	230f      	movs	r3, #15
 80033a4:	18fc      	adds	r4, r7, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f000 f99f 	bl	80036ec <ADC_Enable>
 80033ae:	0003      	movs	r3, r0
 80033b0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033b2:	230f      	movs	r3, #15
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d120      	bne.n	80033fe <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c0:	4a12      	ldr	r2, [pc, #72]	@ (800340c <HAL_ADC_Start+0xa4>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	2280      	movs	r2, #128	@ 0x80
 80033c6:	0052      	lsls	r2, r2, #1
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2250      	movs	r2, #80	@ 0x50
 80033d8:	2100      	movs	r1, #0
 80033da:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	221c      	movs	r2, #28
 80033e2:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2104      	movs	r1, #4
 80033f0:	430a      	orrs	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	e003      	b.n	80033fe <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033f6:	230f      	movs	r3, #15
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	2202      	movs	r2, #2
 80033fc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80033fe:	230f      	movs	r3, #15
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	781b      	ldrb	r3, [r3, #0]
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b005      	add	sp, #20
 800340a:	bd90      	pop	{r4, r7, pc}
 800340c:	fffff0fe 	.word	0xfffff0fe

08003410 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003418:	230f      	movs	r3, #15
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2250      	movs	r2, #80	@ 0x50
 8003424:	5c9b      	ldrb	r3, [r3, r2]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_ADC_Stop+0x1e>
 800342a:	2302      	movs	r3, #2
 800342c:	e029      	b.n	8003482 <HAL_ADC_Stop+0x72>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2250      	movs	r2, #80	@ 0x50
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003436:	250f      	movs	r5, #15
 8003438:	197c      	adds	r4, r7, r5
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0018      	movs	r0, r3
 800343e:	f000 fa24 	bl	800388a <ADC_ConversionStop>
 8003442:	0003      	movs	r3, r0
 8003444:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003446:	197b      	adds	r3, r7, r5
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d112      	bne.n	8003474 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800344e:	197c      	adds	r4, r7, r5
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0018      	movs	r0, r3
 8003454:	f000 f9b2 	bl	80037bc <ADC_Disable>
 8003458:	0003      	movs	r3, r0
 800345a:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800345c:	197b      	adds	r3, r7, r5
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003468:	4a08      	ldr	r2, [pc, #32]	@ (800348c <HAL_ADC_Stop+0x7c>)
 800346a:	4013      	ands	r3, r2
 800346c:	2201      	movs	r2, #1
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2250      	movs	r2, #80	@ 0x50
 8003478:	2100      	movs	r1, #0
 800347a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800347c:	230f      	movs	r3, #15
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	781b      	ldrb	r3, [r3, #0]
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b004      	add	sp, #16
 8003488:	bdb0      	pop	{r4, r5, r7, pc}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	fffffefe 	.word	0xfffffefe

08003490 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d102      	bne.n	80034b0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80034aa:	2308      	movs	r3, #8
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	e014      	b.n	80034da <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d10b      	bne.n	80034d6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c2:	2220      	movs	r2, #32
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2250      	movs	r2, #80	@ 0x50
 80034ce:	2100      	movs	r1, #0
 80034d0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e072      	b.n	80035bc <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80034d6:	230c      	movs	r3, #12
 80034d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80034da:	f7ff fda3 	bl	8003024 <HAL_GetTick>
 80034de:	0003      	movs	r3, r0
 80034e0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80034e2:	e01f      	b.n	8003524 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	d01c      	beq.n	8003524 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_ADC_PollForConversion+0x70>
 80034f0:	f7ff fd98 	bl	8003024 <HAL_GetTick>
 80034f4:	0002      	movs	r2, r0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d211      	bcs.n	8003524 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	d10b      	bne.n	8003524 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003510:	2204      	movs	r2, #4
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2250      	movs	r2, #80	@ 0x50
 800351c:	2100      	movs	r1, #0
 800351e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e04b      	b.n	80035bc <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4013      	ands	r3, r2
 800352e:	d0d9      	beq.n	80034e4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003534:	2280      	movs	r2, #128	@ 0x80
 8003536:	0092      	lsls	r2, r2, #2
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	23c0      	movs	r3, #192	@ 0xc0
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	4013      	ands	r3, r2
 800354a:	d12e      	bne.n	80035aa <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003552:	2b00      	cmp	r3, #0
 8003554:	d129      	bne.n	80035aa <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2208      	movs	r2, #8
 800355e:	4013      	ands	r3, r2
 8003560:	2b08      	cmp	r3, #8
 8003562:	d122      	bne.n	80035aa <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2204      	movs	r2, #4
 800356c:	4013      	ands	r3, r2
 800356e:	d110      	bne.n	8003592 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	210c      	movs	r1, #12
 800357c:	438a      	bics	r2, r1
 800357e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003584:	4a0f      	ldr	r2, [pc, #60]	@ (80035c4 <HAL_ADC_PollForConversion+0x134>)
 8003586:	4013      	ands	r3, r2
 8003588:	2201      	movs	r2, #1
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003590:	e00b      	b.n	80035aa <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003596:	2220      	movs	r2, #32
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a2:	2201      	movs	r2, #1
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	220c      	movs	r2, #12
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b004      	add	sp, #16
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	fffffefe 	.word	0xfffffefe

080035c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80035d6:	0018      	movs	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2250      	movs	r2, #80	@ 0x50
 80035ee:	5c9b      	ldrb	r3, [r3, r2]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x18>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e06c      	b.n	80036d2 <HAL_ADC_ConfigChannel+0xf2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2250      	movs	r2, #80	@ 0x50
 80035fc:	2101      	movs	r1, #1
 80035fe:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2204      	movs	r2, #4
 8003608:	4013      	ands	r3, r2
 800360a:	d00b      	beq.n	8003624 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003610:	2220      	movs	r2, #32
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2250      	movs	r2, #80	@ 0x50
 800361c:	2100      	movs	r1, #0
 800361e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e056      	b.n	80036d2 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a2c      	ldr	r2, [pc, #176]	@ (80036dc <HAL_ADC_ConfigChannel+0xfc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d028      	beq.n	8003680 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	035b      	lsls	r3, r3, #13
 800363a:	0b5a      	lsrs	r2, r3, #13
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	02db      	lsls	r3, r3, #11
 800364c:	4013      	ands	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8003650:	4b23      	ldr	r3, [pc, #140]	@ (80036e0 <HAL_ADC_ConfigChannel+0x100>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b22      	ldr	r3, [pc, #136]	@ (80036e0 <HAL_ADC_ConfigChannel+0x100>)
 8003656:	2180      	movs	r1, #128	@ 0x80
 8003658:	0409      	lsls	r1, r1, #16
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800365e:	200a      	movs	r0, #10
 8003660:	f000 f960 	bl	8003924 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	2380      	movs	r3, #128	@ 0x80
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	4013      	ands	r3, r2
 800366e:	d02b      	beq.n	80036c8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003670:	4b1b      	ldr	r3, [pc, #108]	@ (80036e0 <HAL_ADC_ConfigChannel+0x100>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b1a      	ldr	r3, [pc, #104]	@ (80036e0 <HAL_ADC_ConfigChannel+0x100>)
 8003676:	2180      	movs	r1, #128	@ 0x80
 8003678:	03c9      	lsls	r1, r1, #15
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e023      	b.n	80036c8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	035b      	lsls	r3, r3, #13
 800368c:	0b5b      	lsrs	r3, r3, #13
 800368e:	43d9      	mvns	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	400a      	ands	r2, r1
 8003696:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2380      	movs	r3, #128	@ 0x80
 800369e:	02db      	lsls	r3, r3, #11
 80036a0:	4013      	ands	r3, r2
 80036a2:	d005      	beq.n	80036b0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80036a4:	4b0e      	ldr	r3, [pc, #56]	@ (80036e0 <HAL_ADC_ConfigChannel+0x100>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <HAL_ADC_ConfigChannel+0x100>)
 80036aa:	490e      	ldr	r1, [pc, #56]	@ (80036e4 <HAL_ADC_ConfigChannel+0x104>)
 80036ac:	400a      	ands	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2380      	movs	r3, #128	@ 0x80
 80036b6:	029b      	lsls	r3, r3, #10
 80036b8:	4013      	ands	r3, r2
 80036ba:	d005      	beq.n	80036c8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80036bc:	4b08      	ldr	r3, [pc, #32]	@ (80036e0 <HAL_ADC_ConfigChannel+0x100>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b07      	ldr	r3, [pc, #28]	@ (80036e0 <HAL_ADC_ConfigChannel+0x100>)
 80036c2:	4909      	ldr	r1, [pc, #36]	@ (80036e8 <HAL_ADC_ConfigChannel+0x108>)
 80036c4:	400a      	ands	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2250      	movs	r2, #80	@ 0x50
 80036cc:	2100      	movs	r1, #0
 80036ce:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b002      	add	sp, #8
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	00001001 	.word	0x00001001
 80036e0:	40012708 	.word	0x40012708
 80036e4:	ff7fffff 	.word	0xff7fffff
 80036e8:	ffbfffff 	.word	0xffbfffff

080036ec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2203      	movs	r2, #3
 8003700:	4013      	ands	r3, r2
 8003702:	2b01      	cmp	r3, #1
 8003704:	d108      	bne.n	8003718 <ADC_Enable+0x2c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2201      	movs	r2, #1
 800370e:	4013      	ands	r3, r2
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <ADC_Enable+0x2c>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <ADC_Enable+0x2e>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d146      	bne.n	80037ac <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a24      	ldr	r2, [pc, #144]	@ (80037b8 <ADC_Enable+0xcc>)
 8003726:	4013      	ands	r3, r2
 8003728:	d00d      	beq.n	8003746 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	2210      	movs	r2, #16
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	2201      	movs	r2, #1
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e033      	b.n	80037ae <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	430a      	orrs	r2, r1
 8003754:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003756:	2001      	movs	r0, #1
 8003758:	f000 f8e4 	bl	8003924 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800375c:	f7ff fc62 	bl	8003024 <HAL_GetTick>
 8003760:	0003      	movs	r3, r0
 8003762:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003764:	e01b      	b.n	800379e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003766:	f7ff fc5d 	bl	8003024 <HAL_GetTick>
 800376a:	0002      	movs	r2, r0
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b0a      	cmp	r3, #10
 8003772:	d914      	bls.n	800379e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2201      	movs	r2, #1
 800377c:	4013      	ands	r3, r2
 800377e:	2b01      	cmp	r3, #1
 8003780:	d00d      	beq.n	800379e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003786:	2210      	movs	r2, #16
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	2201      	movs	r2, #1
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e007      	b.n	80037ae <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2201      	movs	r2, #1
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d1dc      	bne.n	8003766 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	80000017 	.word	0x80000017

080037bc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2203      	movs	r2, #3
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d108      	bne.n	80037e8 <ADC_Disable+0x2c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	4013      	ands	r3, r2
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <ADC_Disable+0x2c>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <ADC_Disable+0x2e>
 80037e8:	2300      	movs	r3, #0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d048      	beq.n	8003880 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2205      	movs	r2, #5
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d110      	bne.n	800381e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2102      	movs	r1, #2
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2203      	movs	r2, #3
 8003812:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003814:	f7ff fc06 	bl	8003024 <HAL_GetTick>
 8003818:	0003      	movs	r3, r0
 800381a:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800381c:	e029      	b.n	8003872 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003822:	2210      	movs	r2, #16
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	2201      	movs	r2, #1
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e023      	b.n	8003882 <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800383a:	f7ff fbf3 	bl	8003024 <HAL_GetTick>
 800383e:	0002      	movs	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b0a      	cmp	r3, #10
 8003846:	d914      	bls.n	8003872 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2201      	movs	r2, #1
 8003850:	4013      	ands	r3, r2
 8003852:	2b01      	cmp	r3, #1
 8003854:	d10d      	bne.n	8003872 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385a:	2210      	movs	r2, #16
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	2201      	movs	r2, #1
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e007      	b.n	8003882 <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2201      	movs	r2, #1
 800387a:	4013      	ands	r3, r2
 800387c:	2b01      	cmp	r3, #1
 800387e:	d0dc      	beq.n	800383a <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b004      	add	sp, #16
 8003888:	bd80      	pop	{r7, pc}

0800388a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2204      	movs	r2, #4
 800389e:	4013      	ands	r3, r2
 80038a0:	d03a      	beq.n	8003918 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2204      	movs	r2, #4
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d10d      	bne.n	80038cc <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2202      	movs	r2, #2
 80038b8:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80038ba:	d107      	bne.n	80038cc <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2110      	movs	r1, #16
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038cc:	f7ff fbaa 	bl	8003024 <HAL_GetTick>
 80038d0:	0003      	movs	r3, r0
 80038d2:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80038d4:	e01a      	b.n	800390c <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80038d6:	f7ff fba5 	bl	8003024 <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b0a      	cmp	r3, #10
 80038e2:	d913      	bls.n	800390c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2204      	movs	r2, #4
 80038ec:	4013      	ands	r3, r2
 80038ee:	d00d      	beq.n	800390c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f4:	2210      	movs	r2, #16
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003900:	2201      	movs	r2, #1
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e006      	b.n	800391a <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2204      	movs	r2, #4
 8003914:	4013      	ands	r3, r2
 8003916:	d1de      	bne.n	80038d6 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b004      	add	sp, #16
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800392c:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <ADC_DelayMicroSecond+0x38>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	490b      	ldr	r1, [pc, #44]	@ (8003960 <ADC_DelayMicroSecond+0x3c>)
 8003932:	0018      	movs	r0, r3
 8003934:	f7fc fbf0 	bl	8000118 <__udivsi3>
 8003938:	0003      	movs	r3, r0
 800393a:	001a      	movs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4353      	muls	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8003942:	e002      	b.n	800394a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3b01      	subs	r3, #1
 8003948:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f9      	bne.n	8003944 <ADC_DelayMicroSecond+0x20>
  }
}
 8003950:	46c0      	nop			@ (mov r8, r8)
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b004      	add	sp, #16
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	20000084 	.word	0x20000084
 8003960:	000f4240 	.word	0x000f4240

08003964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	0002      	movs	r2, r0
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003970:	1dfb      	adds	r3, r7, #7
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b7f      	cmp	r3, #127	@ 0x7f
 8003976:	d809      	bhi.n	800398c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003978:	1dfb      	adds	r3, r7, #7
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	001a      	movs	r2, r3
 800397e:	231f      	movs	r3, #31
 8003980:	401a      	ands	r2, r3
 8003982:	4b04      	ldr	r3, [pc, #16]	@ (8003994 <__NVIC_EnableIRQ+0x30>)
 8003984:	2101      	movs	r1, #1
 8003986:	4091      	lsls	r1, r2
 8003988:	000a      	movs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]
  }
}
 800398c:	46c0      	nop			@ (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}
 8003994:	e000e100 	.word	0xe000e100

08003998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	0002      	movs	r2, r0
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	1dfb      	adds	r3, r7, #7
 80039a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039a6:	1dfb      	adds	r3, r7, #7
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80039ac:	d828      	bhi.n	8003a00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039ae:	4a2f      	ldr	r2, [pc, #188]	@ (8003a6c <__NVIC_SetPriority+0xd4>)
 80039b0:	1dfb      	adds	r3, r7, #7
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	b25b      	sxtb	r3, r3
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	33c0      	adds	r3, #192	@ 0xc0
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	589b      	ldr	r3, [r3, r2]
 80039be:	1dfa      	adds	r2, r7, #7
 80039c0:	7812      	ldrb	r2, [r2, #0]
 80039c2:	0011      	movs	r1, r2
 80039c4:	2203      	movs	r2, #3
 80039c6:	400a      	ands	r2, r1
 80039c8:	00d2      	lsls	r2, r2, #3
 80039ca:	21ff      	movs	r1, #255	@ 0xff
 80039cc:	4091      	lsls	r1, r2
 80039ce:	000a      	movs	r2, r1
 80039d0:	43d2      	mvns	r2, r2
 80039d2:	401a      	ands	r2, r3
 80039d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	019b      	lsls	r3, r3, #6
 80039da:	22ff      	movs	r2, #255	@ 0xff
 80039dc:	401a      	ands	r2, r3
 80039de:	1dfb      	adds	r3, r7, #7
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	0018      	movs	r0, r3
 80039e4:	2303      	movs	r3, #3
 80039e6:	4003      	ands	r3, r0
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039ec:	481f      	ldr	r0, [pc, #124]	@ (8003a6c <__NVIC_SetPriority+0xd4>)
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	430a      	orrs	r2, r1
 80039f8:	33c0      	adds	r3, #192	@ 0xc0
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039fe:	e031      	b.n	8003a64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a00:	4a1b      	ldr	r2, [pc, #108]	@ (8003a70 <__NVIC_SetPriority+0xd8>)
 8003a02:	1dfb      	adds	r3, r7, #7
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	0019      	movs	r1, r3
 8003a08:	230f      	movs	r3, #15
 8003a0a:	400b      	ands	r3, r1
 8003a0c:	3b08      	subs	r3, #8
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	3306      	adds	r3, #6
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	18d3      	adds	r3, r2, r3
 8003a16:	3304      	adds	r3, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	1dfa      	adds	r2, r7, #7
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	0011      	movs	r1, r2
 8003a20:	2203      	movs	r2, #3
 8003a22:	400a      	ands	r2, r1
 8003a24:	00d2      	lsls	r2, r2, #3
 8003a26:	21ff      	movs	r1, #255	@ 0xff
 8003a28:	4091      	lsls	r1, r2
 8003a2a:	000a      	movs	r2, r1
 8003a2c:	43d2      	mvns	r2, r2
 8003a2e:	401a      	ands	r2, r3
 8003a30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	22ff      	movs	r2, #255	@ 0xff
 8003a38:	401a      	ands	r2, r3
 8003a3a:	1dfb      	adds	r3, r7, #7
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	2303      	movs	r3, #3
 8003a42:	4003      	ands	r3, r0
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a48:	4809      	ldr	r0, [pc, #36]	@ (8003a70 <__NVIC_SetPriority+0xd8>)
 8003a4a:	1dfb      	adds	r3, r7, #7
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	001c      	movs	r4, r3
 8003a50:	230f      	movs	r3, #15
 8003a52:	4023      	ands	r3, r4
 8003a54:	3b08      	subs	r3, #8
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	3306      	adds	r3, #6
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	18c3      	adds	r3, r0, r3
 8003a60:	3304      	adds	r3, #4
 8003a62:	601a      	str	r2, [r3, #0]
}
 8003a64:	46c0      	nop			@ (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b003      	add	sp, #12
 8003a6a:	bd90      	pop	{r4, r7, pc}
 8003a6c:	e000e100 	.word	0xe000e100
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	1e5a      	subs	r2, r3, #1
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	045b      	lsls	r3, r3, #17
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d301      	bcc.n	8003a8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e010      	b.n	8003aae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <SysTick_Config+0x44>)
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	3a01      	subs	r2, #1
 8003a92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a94:	2301      	movs	r3, #1
 8003a96:	425b      	negs	r3, r3
 8003a98:	2103      	movs	r1, #3
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f7ff ff7c 	bl	8003998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa0:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <SysTick_Config+0x44>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aa6:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <SysTick_Config+0x44>)
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	0018      	movs	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b002      	add	sp, #8
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	e000e010 	.word	0xe000e010

08003abc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	210f      	movs	r1, #15
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	1c02      	adds	r2, r0, #0
 8003acc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	b25b      	sxtb	r3, r3
 8003ad6:	0011      	movs	r1, r2
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7ff ff5d 	bl	8003998 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b004      	add	sp, #16
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	0002      	movs	r2, r0
 8003aee:	1dfb      	adds	r3, r7, #7
 8003af0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003af2:	1dfb      	adds	r3, r7, #7
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b25b      	sxtb	r3, r3
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7ff ff33 	bl	8003964 <__NVIC_EnableIRQ>
}
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b002      	add	sp, #8
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7ff ffaf 	bl	8003a74 <SysTick_Config>
 8003b16:	0003      	movs	r3, r0
}
 8003b18:	0018      	movs	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e015      	b.n	8003b5e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	791b      	ldrb	r3, [r3, #4]
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7ff f851 	bl	8002bec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	795b      	ldrb	r3, [r3, #5]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_DAC_ConfigChannel+0x20>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e035      	b.n	8003bf4 <HAL_DAC_ConfigChannel+0x8c>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2202      	movs	r2, #2
 8003b92:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003b9c:	4a17      	ldr	r2, [pc, #92]	@ (8003bfc <HAL_DAC_ConfigChannel+0x94>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	0013      	movs	r3, r2
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	0013      	movs	r3, r2
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	21c0      	movs	r1, #192	@ 0xc0
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4099      	lsls	r1, r3
 8003bda:	000b      	movs	r3, r1
 8003bdc:	43d9      	mvns	r1, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	400a      	ands	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b006      	add	sp, #24
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	00000ffe 	.word	0x00000ffe

08003c00 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	795b      	ldrb	r3, [r3, #5]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_DAC_Start+0x1e>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e054      	b.n	8003cc8 <HAL_DAC_Start+0xc8>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6819      	ldr	r1, [r3, #0]
 8003c30:	2201      	movs	r2, #1
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	409a      	lsls	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]

  if(Channel == DAC_CHANNEL_1)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d11a      	bne.n	8003c7a <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2238      	movs	r2, #56	@ 0x38
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d12b      	bne.n	8003cba <HAL_DAC_Start+0xba>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b38      	cmp	r3, #56	@ 0x38
 8003c66:	d128      	bne.n	8003cba <HAL_DAC_Start+0xba>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2101      	movs	r1, #1
 8003c74:	430a      	orrs	r2, r1
 8003c76:	605a      	str	r2, [r3, #4]
 8003c78:	e01f      	b.n	8003cba <HAL_DAC_Start+0xba>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	02db      	lsls	r3, r3, #11
 8003c84:	4013      	ands	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	23e0      	movs	r3, #224	@ 0xe0
 8003c90:	039b      	lsls	r3, r3, #14
 8003c92:	4013      	ands	r3, r2
 8003c94:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	2380      	movs	r3, #128	@ 0x80
 8003c9a:	02db      	lsls	r3, r3, #11
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d10c      	bne.n	8003cba <HAL_DAC_Start+0xba>
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	23e0      	movs	r3, #224	@ 0xe0
 8003ca4:	039b      	lsls	r3, r3, #14
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d107      	bne.n	8003cba <HAL_DAC_Start+0xba>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b004      	add	sp, #16
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance; 
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d105      	bne.n	8003cfa <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	18d3      	adds	r3, r2, r3
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e004      	b.n	8003d04 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	18d3      	adds	r3, r2, r3
 8003d00:	3314      	adds	r3, #20
 8003d02:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b006      	add	sp, #24
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1c:	230f      	movs	r3, #15
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2225      	movs	r2, #37	@ 0x25
 8003d28:	5c9b      	ldrb	r3, [r3, r2]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d008      	beq.n	8003d42 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2204      	movs	r2, #4
 8003d34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2224      	movs	r2, #36	@ 0x24
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e024      	b.n	8003d8c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	210e      	movs	r1, #14
 8003d4e:	438a      	bics	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	438a      	bics	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	221c      	movs	r2, #28
 8003d68:	401a      	ands	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	2101      	movs	r1, #1
 8003d70:	4091      	lsls	r1, r2
 8003d72:	000a      	movs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2225      	movs	r2, #37	@ 0x25
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2224      	movs	r2, #36	@ 0x24
 8003d82:	2100      	movs	r1, #0
 8003d84:	5499      	strb	r1, [r3, r2]

    return status;
 8003d86:	230f      	movs	r3, #15
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b004      	add	sp, #16
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9c:	210f      	movs	r1, #15
 8003d9e:	187b      	adds	r3, r7, r1
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2225      	movs	r2, #37	@ 0x25
 8003da8:	5c9b      	ldrb	r3, [r3, r2]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d006      	beq.n	8003dbe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2204      	movs	r2, #4
 8003db4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003db6:	187b      	adds	r3, r7, r1
 8003db8:	2201      	movs	r2, #1
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	e02a      	b.n	8003e14 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	210e      	movs	r1, #14
 8003dca:	438a      	bics	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2101      	movs	r1, #1
 8003dda:	438a      	bics	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	221c      	movs	r2, #28
 8003de4:	401a      	ands	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	2101      	movs	r1, #1
 8003dec:	4091      	lsls	r1, r2
 8003dee:	000a      	movs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2225      	movs	r2, #37	@ 0x25
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2224      	movs	r2, #36	@ 0x24
 8003dfe:	2100      	movs	r1, #0
 8003e00:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	0010      	movs	r0, r2
 8003e12:	4798      	blx	r3
    }
  }
  return status;
 8003e14:	230f      	movs	r3, #15
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	781b      	ldrb	r3, [r3, #0]
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b004      	add	sp, #16
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]
   *           Note :The revId of the device can be retrieved via the HAL_GetREVID()
   *           function.
   *
   */

  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003e2e:	4b62      	ldr	r3, [pc, #392]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	401a      	ands	r2, r3
 8003e38:	2380      	movs	r3, #128	@ 0x80
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d035      	beq.n	8003eac <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003e40:	4b5d      	ldr	r3, [pc, #372]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	2380      	movs	r3, #128	@ 0x80
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003e4a:	2380      	movs	r3, #128	@ 0x80
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d02c      	beq.n	8003eac <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003e52:	4b59      	ldr	r3, [pc, #356]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	2380      	movs	r3, #128	@ 0x80
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d023      	beq.n	8003eac <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003e64:	4b54      	ldr	r3, [pc, #336]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003e6e:	2380      	movs	r3, #128	@ 0x80
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d01a      	beq.n	8003eac <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003e76:	4b50      	ldr	r3, [pc, #320]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	2380      	movs	r3, #128	@ 0x80
 8003e7c:	019b      	lsls	r3, r3, #6
 8003e7e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	019b      	lsls	r3, r3, #6
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d011      	beq.n	8003eac <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003e88:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003e8a:	699a      	ldr	r2, [r3, #24]
 8003e8c:	2380      	movs	r3, #128	@ 0x80
 8003e8e:	029b      	lsls	r3, r3, #10
 8003e90:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003e92:	2380      	movs	r3, #128	@ 0x80
 8003e94:	029b      	lsls	r3, r3, #10
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d008      	beq.n	8003eac <HAL_FLASH_IRQHandler+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003e9a:	4b47      	ldr	r3, [pc, #284]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	2380      	movs	r3, #128	@ 0x80
 8003ea0:	025b      	lsls	r3, r3, #9
 8003ea2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003ea4:	2380      	movs	r3, #128	@ 0x80
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d118      	bne.n	8003ede <HAL_FLASH_IRQHandler+0xba>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8003eac:	4b43      	ldr	r3, [pc, #268]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <HAL_FLASH_IRQHandler+0xa2>
    {
      /* Return the faulty sector */
      addresstmp = pFlash.Page;
 8003eb6:	4b41      	ldr	r3, [pc, #260]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	607b      	str	r3, [r7, #4]
      pFlash.Page = 0xFFFFFFFFU;
 8003ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4252      	negs	r2, r2
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	e002      	b.n	8003ecc <HAL_FLASH_IRQHandler+0xa8>
    }
    else
    {
      /* Return the faulty address */
      addresstmp = pFlash.Address;
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	607b      	str	r3, [r7, #4]
    }
    /* Save the Error code */
    FLASH_SetErrorCode();
 8003ecc:	f000 f88e 	bl	8003fec <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 f882 	bl	8003fdc <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003ed8:	4b38      	ldr	r3, [pc, #224]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003ede:	4b36      	ldr	r3, [pc, #216]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d14e      	bne.n	8003f88 <HAL_FLASH_IRQHandler+0x164>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003eea:	4b33      	ldr	r3, [pc, #204]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003eec:	2202      	movs	r2, #2
 8003eee:	619a      	str	r2, [r3, #24]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8003ef0:	4b32      	ldr	r3, [pc, #200]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d046      	beq.n	8003f88 <HAL_FLASH_IRQHandler+0x164>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8003efa:	4b30      	ldr	r3, [pc, #192]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d12f      	bne.n	8003f64 <HAL_FLASH_IRQHandler+0x140>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.NbPagesToErase--;
 8003f04:	4b2d      	ldr	r3, [pc, #180]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f0c:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.NbPagesToErase != 0U)
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d018      	beq.n	8003f48 <HAL_FLASH_IRQHandler+0x124>
        {
          addresstmp = pFlash.Page;
 8003f16:	4b29      	ldr	r3, [pc, #164]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f000 f854 	bl	8003fcc <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Page + FLASH_PAGE_SIZE;
 8003f24:	4b25      	ldr	r3, [pc, #148]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	3380      	adds	r3, #128	@ 0x80
 8003f2a:	607b      	str	r3, [r7, #4]
          pFlash.Page = addresstmp;
 8003f2c:	4b23      	ldr	r3, [pc, #140]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	60da      	str	r2, [r3, #12]

          /* If the erase operation is completed, disable the ERASE Bit */
          CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8003f32:	4b21      	ldr	r3, [pc, #132]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003f38:	4921      	ldr	r1, [pc, #132]	@ (8003fc0 <HAL_FLASH_IRQHandler+0x19c>)
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]

          FLASH_PageErase(addresstmp);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	0018      	movs	r0, r3
 8003f42:	f000 f8ef 	bl	8004124 <FLASH_PageErase>
 8003f46:	e01f      	b.n	8003f88 <HAL_FLASH_IRQHandler+0x164>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Page = addresstmp = 0xFFFFFFFFU;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	425b      	negs	r3, r3
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	60da      	str	r2, [r3, #12]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003f54:	4b19      	ldr	r3, [pc, #100]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f000 f835 	bl	8003fcc <HAL_FLASH_EndOfOperationCallback>
 8003f62:	e011      	b.n	8003f88 <HAL_FLASH_IRQHandler+0x164>
        }
      }
      else
      {
          /* If the program operation is completed, disable the PROG Bit */
          CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8003f64:	4b14      	ldr	r3, [pc, #80]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003f6a:	2108      	movs	r1, #8
 8003f6c:	438a      	bics	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]

          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003f70:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	0018      	movs	r0, r3
 8003f76:	f000 f829 	bl	8003fcc <HAL_FLASH_EndOfOperationCallback>
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8003f7a:	4b10      	ldr	r3, [pc, #64]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4252      	negs	r2, r2
 8003f80:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003f82:	4b0e      	ldr	r3, [pc, #56]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003f88:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10e      	bne.n	8003fb0 <HAL_FLASH_IRQHandler+0x18c>
  {
    /* Operation is completed, disable the PROG and ERASE */
    CLEAR_BIT(FLASH->PECR, (FLASH_PECR_ERASE | FLASH_PECR_PROG));
 8003f92:	4b09      	ldr	r3, [pc, #36]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003f98:	490a      	ldr	r1, [pc, #40]	@ (8003fc4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003f9a:	400a      	ands	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8003f9e:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <HAL_FLASH_IRQHandler+0x194>)
 8003fa4:	4908      	ldr	r1, [pc, #32]	@ (8003fc8 <HAL_FLASH_IRQHandler+0x1a4>)
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003faa:	4b04      	ldr	r3, [pc, #16]	@ (8003fbc <HAL_FLASH_IRQHandler+0x198>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	741a      	strb	r2, [r3, #16]
  }
}
 8003fb0:	46c0      	nop			@ (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40022000 	.word	0x40022000
 8003fbc:	200005d0 	.word	0x200005d0
 8003fc0:	fffffdff 	.word	0xfffffdff
 8003fc4:	fffffdf7 	.word	0xfffffdf7
 8003fc8:	fffcffff 	.word	0xfffcffff

08003fcc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8003fd4:	46c0      	nop			@ (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8003fe4:	46c0      	nop			@ (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}

08003fec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003ff6:	4b49      	ldr	r3, [pc, #292]	@ (800411c <FLASH_SetErrorCode+0x130>)
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	2380      	movs	r3, #128	@ 0x80
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	401a      	ands	r2, r3
 8004000:	2380      	movs	r3, #128	@ 0x80
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	429a      	cmp	r2, r3
 8004006:	d10a      	bne.n	800401e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004008:	4b45      	ldr	r3, [pc, #276]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	2202      	movs	r2, #2
 800400e:	431a      	orrs	r2, r3
 8004010:	4b43      	ldr	r3, [pc, #268]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 8004012:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2280      	movs	r2, #128	@ 0x80
 8004018:	0052      	lsls	r2, r2, #1
 800401a:	4313      	orrs	r3, r2
 800401c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800401e:	4b3f      	ldr	r3, [pc, #252]	@ (800411c <FLASH_SetErrorCode+0x130>)
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	2380      	movs	r3, #128	@ 0x80
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	401a      	ands	r2, r3
 8004028:	2380      	movs	r3, #128	@ 0x80
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	429a      	cmp	r2, r3
 800402e:	d10a      	bne.n	8004046 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004030:	4b3b      	ldr	r3, [pc, #236]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	2201      	movs	r2, #1
 8004036:	431a      	orrs	r2, r3
 8004038:	4b39      	ldr	r3, [pc, #228]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 800403a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2280      	movs	r2, #128	@ 0x80
 8004040:	0092      	lsls	r2, r2, #2
 8004042:	4313      	orrs	r3, r2
 8004044:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8004046:	4b35      	ldr	r3, [pc, #212]	@ (800411c <FLASH_SetErrorCode+0x130>)
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	2380      	movs	r3, #128	@ 0x80
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	401a      	ands	r2, r3
 8004050:	2380      	movs	r3, #128	@ 0x80
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	429a      	cmp	r2, r3
 8004056:	d10a      	bne.n	800406e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8004058:	4b31      	ldr	r3, [pc, #196]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	2208      	movs	r2, #8
 800405e:	431a      	orrs	r2, r3
 8004060:	4b2f      	ldr	r3, [pc, #188]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 8004062:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2280      	movs	r2, #128	@ 0x80
 8004068:	00d2      	lsls	r2, r2, #3
 800406a:	4313      	orrs	r3, r2
 800406c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800406e:	4b2b      	ldr	r3, [pc, #172]	@ (800411c <FLASH_SetErrorCode+0x130>)
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	2380      	movs	r3, #128	@ 0x80
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	401a      	ands	r2, r3
 8004078:	2380      	movs	r3, #128	@ 0x80
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	429a      	cmp	r2, r3
 800407e:	d10a      	bne.n	8004096 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004080:	4b27      	ldr	r3, [pc, #156]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	2204      	movs	r2, #4
 8004086:	431a      	orrs	r2, r3
 8004088:	4b25      	ldr	r3, [pc, #148]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 800408a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2280      	movs	r2, #128	@ 0x80
 8004090:	0112      	lsls	r2, r2, #4
 8004092:	4313      	orrs	r3, r2
 8004094:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8004096:	4b21      	ldr	r3, [pc, #132]	@ (800411c <FLASH_SetErrorCode+0x130>)
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	019b      	lsls	r3, r3, #6
 800409e:	401a      	ands	r2, r3
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	019b      	lsls	r3, r3, #6
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d10a      	bne.n	80040be <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	2210      	movs	r2, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 80040b2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2280      	movs	r2, #128	@ 0x80
 80040b8:	0192      	lsls	r2, r2, #6
 80040ba:	4313      	orrs	r3, r2
 80040bc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80040be:	4b17      	ldr	r3, [pc, #92]	@ (800411c <FLASH_SetErrorCode+0x130>)
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	2380      	movs	r3, #128	@ 0x80
 80040c4:	029b      	lsls	r3, r3, #10
 80040c6:	401a      	ands	r2, r3
 80040c8:	2380      	movs	r3, #128	@ 0x80
 80040ca:	029b      	lsls	r3, r3, #10
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d109      	bne.n	80040e4 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80040d0:	4b13      	ldr	r3, [pc, #76]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	2220      	movs	r2, #32
 80040d6:	431a      	orrs	r2, r3
 80040d8:	4b11      	ldr	r3, [pc, #68]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 80040da:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	4313      	orrs	r3, r2
 80040e2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80040e4:	4b0d      	ldr	r3, [pc, #52]	@ (800411c <FLASH_SetErrorCode+0x130>)
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	2380      	movs	r3, #128	@ 0x80
 80040ea:	025b      	lsls	r3, r3, #9
 80040ec:	401a      	ands	r2, r3
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	025b      	lsls	r3, r3, #9
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d10a      	bne.n	800410c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80040f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	2240      	movs	r2, #64	@ 0x40
 80040fc:	431a      	orrs	r2, r3
 80040fe:	4b08      	ldr	r3, [pc, #32]	@ (8004120 <FLASH_SetErrorCode+0x134>)
 8004100:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2280      	movs	r2, #128	@ 0x80
 8004106:	0252      	lsls	r2, r2, #9
 8004108:	4313      	orrs	r3, r2
 800410a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800410c:	4b03      	ldr	r3, [pc, #12]	@ (800411c <FLASH_SetErrorCode+0x130>)
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	619a      	str	r2, [r3, #24]
}  
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	46bd      	mov	sp, r7
 8004116:	b002      	add	sp, #8
 8004118:	bd80      	pop	{r7, pc}
 800411a:	46c0      	nop			@ (mov r8, r8)
 800411c:	40022000 	.word	0x40022000
 8004120:	200005d0 	.word	0x200005d0

08004124 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <FLASH_PageErase+0x3c>)
 800412e:	2200      	movs	r2, #0
 8004130:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8004132:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <FLASH_PageErase+0x40>)
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <FLASH_PageErase+0x40>)
 8004138:	2180      	movs	r1, #128	@ 0x80
 800413a:	0089      	lsls	r1, r1, #2
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8004140:	4b08      	ldr	r3, [pc, #32]	@ (8004164 <FLASH_PageErase+0x40>)
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	4b07      	ldr	r3, [pc, #28]	@ (8004164 <FLASH_PageErase+0x40>)
 8004146:	2108      	movs	r1, #8
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	227f      	movs	r2, #127	@ 0x7f
 8004150:	4393      	bics	r3, r2
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
}
 8004156:	46c0      	nop			@ (mov r8, r8)
 8004158:	46bd      	mov	sp, r7
 800415a:	b002      	add	sp, #8
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	200005d0 	.word	0x200005d0
 8004164:	40022000 	.word	0x40022000

08004168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800417e:	e155      	b.n	800442c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2101      	movs	r1, #1
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4091      	lsls	r1, r2
 800418a:	000a      	movs	r2, r1
 800418c:	4013      	ands	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d100      	bne.n	8004198 <HAL_GPIO_Init+0x30>
 8004196:	e146      	b.n	8004426 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2203      	movs	r2, #3
 800419e:	4013      	ands	r3, r2
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d005      	beq.n	80041b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2203      	movs	r2, #3
 80041aa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d130      	bne.n	8004212 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	2203      	movs	r2, #3
 80041bc:	409a      	lsls	r2, r3
 80041be:	0013      	movs	r3, r2
 80041c0:	43da      	mvns	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	409a      	lsls	r2, r3
 80041d2:	0013      	movs	r3, r2
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041e6:	2201      	movs	r2, #1
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	409a      	lsls	r2, r3
 80041ec:	0013      	movs	r3, r2
 80041ee:	43da      	mvns	r2, r3
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	2201      	movs	r2, #1
 80041fe:	401a      	ands	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	409a      	lsls	r2, r3
 8004204:	0013      	movs	r3, r2
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2203      	movs	r2, #3
 8004218:	4013      	ands	r3, r2
 800421a:	2b03      	cmp	r3, #3
 800421c:	d017      	beq.n	800424e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	2203      	movs	r2, #3
 800422a:	409a      	lsls	r2, r3
 800422c:	0013      	movs	r3, r2
 800422e:	43da      	mvns	r2, r3
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4013      	ands	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	409a      	lsls	r2, r3
 8004240:	0013      	movs	r3, r2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2203      	movs	r2, #3
 8004254:	4013      	ands	r3, r2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d123      	bne.n	80042a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	08da      	lsrs	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3208      	adds	r2, #8
 8004262:	0092      	lsls	r2, r2, #2
 8004264:	58d3      	ldr	r3, [r2, r3]
 8004266:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2207      	movs	r2, #7
 800426c:	4013      	ands	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	409a      	lsls	r2, r3
 8004274:	0013      	movs	r3, r2
 8004276:	43da      	mvns	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2107      	movs	r1, #7
 8004286:	400b      	ands	r3, r1
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	409a      	lsls	r2, r3
 800428c:	0013      	movs	r3, r2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	08da      	lsrs	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3208      	adds	r2, #8
 800429c:	0092      	lsls	r2, r2, #2
 800429e:	6939      	ldr	r1, [r7, #16]
 80042a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	2203      	movs	r2, #3
 80042ae:	409a      	lsls	r2, r3
 80042b0:	0013      	movs	r3, r2
 80042b2:	43da      	mvns	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2203      	movs	r2, #3
 80042c0:	401a      	ands	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	409a      	lsls	r2, r3
 80042c8:	0013      	movs	r3, r2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	23c0      	movs	r3, #192	@ 0xc0
 80042dc:	029b      	lsls	r3, r3, #10
 80042de:	4013      	ands	r3, r2
 80042e0:	d100      	bne.n	80042e4 <HAL_GPIO_Init+0x17c>
 80042e2:	e0a0      	b.n	8004426 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e4:	4b57      	ldr	r3, [pc, #348]	@ (8004444 <HAL_GPIO_Init+0x2dc>)
 80042e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042e8:	4b56      	ldr	r3, [pc, #344]	@ (8004444 <HAL_GPIO_Init+0x2dc>)
 80042ea:	2101      	movs	r1, #1
 80042ec:	430a      	orrs	r2, r1
 80042ee:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80042f0:	4a55      	ldr	r2, [pc, #340]	@ (8004448 <HAL_GPIO_Init+0x2e0>)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	089b      	lsrs	r3, r3, #2
 80042f6:	3302      	adds	r3, #2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	589b      	ldr	r3, [r3, r2]
 80042fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2203      	movs	r2, #3
 8004302:	4013      	ands	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	220f      	movs	r2, #15
 8004308:	409a      	lsls	r2, r3
 800430a:	0013      	movs	r3, r2
 800430c:	43da      	mvns	r2, r3
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4013      	ands	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	23a0      	movs	r3, #160	@ 0xa0
 8004318:	05db      	lsls	r3, r3, #23
 800431a:	429a      	cmp	r2, r3
 800431c:	d01f      	beq.n	800435e <HAL_GPIO_Init+0x1f6>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a4a      	ldr	r2, [pc, #296]	@ (800444c <HAL_GPIO_Init+0x2e4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d019      	beq.n	800435a <HAL_GPIO_Init+0x1f2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a49      	ldr	r2, [pc, #292]	@ (8004450 <HAL_GPIO_Init+0x2e8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_GPIO_Init+0x1ee>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a48      	ldr	r2, [pc, #288]	@ (8004454 <HAL_GPIO_Init+0x2ec>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00d      	beq.n	8004352 <HAL_GPIO_Init+0x1ea>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a47      	ldr	r2, [pc, #284]	@ (8004458 <HAL_GPIO_Init+0x2f0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <HAL_GPIO_Init+0x1e6>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a46      	ldr	r2, [pc, #280]	@ (800445c <HAL_GPIO_Init+0x2f4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <HAL_GPIO_Init+0x1e2>
 8004346:	2305      	movs	r3, #5
 8004348:	e00a      	b.n	8004360 <HAL_GPIO_Init+0x1f8>
 800434a:	2306      	movs	r3, #6
 800434c:	e008      	b.n	8004360 <HAL_GPIO_Init+0x1f8>
 800434e:	2304      	movs	r3, #4
 8004350:	e006      	b.n	8004360 <HAL_GPIO_Init+0x1f8>
 8004352:	2303      	movs	r3, #3
 8004354:	e004      	b.n	8004360 <HAL_GPIO_Init+0x1f8>
 8004356:	2302      	movs	r3, #2
 8004358:	e002      	b.n	8004360 <HAL_GPIO_Init+0x1f8>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_GPIO_Init+0x1f8>
 800435e:	2300      	movs	r3, #0
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	2103      	movs	r1, #3
 8004364:	400a      	ands	r2, r1
 8004366:	0092      	lsls	r2, r2, #2
 8004368:	4093      	lsls	r3, r2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004370:	4935      	ldr	r1, [pc, #212]	@ (8004448 <HAL_GPIO_Init+0x2e0>)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	3302      	adds	r3, #2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800437e:	4b38      	ldr	r3, [pc, #224]	@ (8004460 <HAL_GPIO_Init+0x2f8>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	43da      	mvns	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	2380      	movs	r3, #128	@ 0x80
 8004394:	035b      	lsls	r3, r3, #13
 8004396:	4013      	ands	r3, r2
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004460 <HAL_GPIO_Init+0x2f8>)
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004460 <HAL_GPIO_Init+0x2f8>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	43da      	mvns	r2, r3
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	2380      	movs	r3, #128	@ 0x80
 80043be:	039b      	lsls	r3, r3, #14
 80043c0:	4013      	ands	r3, r2
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043cc:	4b24      	ldr	r3, [pc, #144]	@ (8004460 <HAL_GPIO_Init+0x2f8>)
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80043d2:	4b23      	ldr	r3, [pc, #140]	@ (8004460 <HAL_GPIO_Init+0x2f8>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	43da      	mvns	r2, r3
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4013      	ands	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	2380      	movs	r3, #128	@ 0x80
 80043e8:	029b      	lsls	r3, r3, #10
 80043ea:	4013      	ands	r3, r2
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004460 <HAL_GPIO_Init+0x2f8>)
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043fc:	4b18      	ldr	r3, [pc, #96]	@ (8004460 <HAL_GPIO_Init+0x2f8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	43da      	mvns	r2, r3
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4013      	ands	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	2380      	movs	r3, #128	@ 0x80
 8004412:	025b      	lsls	r3, r3, #9
 8004414:	4013      	ands	r3, r2
 8004416:	d003      	beq.n	8004420 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004420:	4b0f      	ldr	r3, [pc, #60]	@ (8004460 <HAL_GPIO_Init+0x2f8>)
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	3301      	adds	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	40da      	lsrs	r2, r3
 8004434:	1e13      	subs	r3, r2, #0
 8004436:	d000      	beq.n	800443a <HAL_GPIO_Init+0x2d2>
 8004438:	e6a2      	b.n	8004180 <HAL_GPIO_Init+0x18>
  }
}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	46c0      	nop			@ (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b006      	add	sp, #24
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	40010000 	.word	0x40010000
 800444c:	50000400 	.word	0x50000400
 8004450:	50000800 	.word	0x50000800
 8004454:	50000c00 	.word	0x50000c00
 8004458:	50001000 	.word	0x50001000
 800445c:	50001c00 	.word	0x50001c00
 8004460:	40010400 	.word	0x40010400

08004464 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	0008      	movs	r0, r1
 800446e:	0011      	movs	r1, r2
 8004470:	1cbb      	adds	r3, r7, #2
 8004472:	1c02      	adds	r2, r0, #0
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	1c7b      	adds	r3, r7, #1
 8004478:	1c0a      	adds	r2, r1, #0
 800447a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800447c:	1c7b      	adds	r3, r7, #1
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004484:	1cbb      	adds	r3, r7, #2
 8004486:	881a      	ldrh	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800448c:	e003      	b.n	8004496 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800448e:	1cbb      	adds	r3, r7, #2
 8004490:	881a      	ldrh	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004496:	46c0      	nop			@ (mov r8, r8)
 8004498:	46bd      	mov	sp, r7
 800449a:	b002      	add	sp, #8
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b5b0      	push	{r4, r5, r7, lr}
 80044a2:	b08a      	sub	sp, #40	@ 0x28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d102      	bne.n	80044b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f000 fbbf 	bl	8004c32 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b4:	4bc9      	ldr	r3, [pc, #804]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	220c      	movs	r2, #12
 80044ba:	4013      	ands	r3, r2
 80044bc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044be:	4bc7      	ldr	r3, [pc, #796]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	2380      	movs	r3, #128	@ 0x80
 80044c4:	025b      	lsls	r3, r3, #9
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2201      	movs	r2, #1
 80044d0:	4013      	ands	r3, r2
 80044d2:	d100      	bne.n	80044d6 <HAL_RCC_OscConfig+0x36>
 80044d4:	e07e      	b.n	80045d4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d007      	beq.n	80044ec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b0c      	cmp	r3, #12
 80044e0:	d112      	bne.n	8004508 <HAL_RCC_OscConfig+0x68>
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	2380      	movs	r3, #128	@ 0x80
 80044e6:	025b      	lsls	r3, r3, #9
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d10d      	bne.n	8004508 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	4bbb      	ldr	r3, [pc, #748]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	2380      	movs	r3, #128	@ 0x80
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	4013      	ands	r3, r2
 80044f6:	d100      	bne.n	80044fa <HAL_RCC_OscConfig+0x5a>
 80044f8:	e06b      	b.n	80045d2 <HAL_RCC_OscConfig+0x132>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d167      	bne.n	80045d2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f000 fb95 	bl	8004c32 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	025b      	lsls	r3, r3, #9
 8004510:	429a      	cmp	r2, r3
 8004512:	d107      	bne.n	8004524 <HAL_RCC_OscConfig+0x84>
 8004514:	4bb1      	ldr	r3, [pc, #708]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4bb0      	ldr	r3, [pc, #704]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 800451a:	2180      	movs	r1, #128	@ 0x80
 800451c:	0249      	lsls	r1, r1, #9
 800451e:	430a      	orrs	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e027      	b.n	8004574 <HAL_RCC_OscConfig+0xd4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	23a0      	movs	r3, #160	@ 0xa0
 800452a:	02db      	lsls	r3, r3, #11
 800452c:	429a      	cmp	r2, r3
 800452e:	d10e      	bne.n	800454e <HAL_RCC_OscConfig+0xae>
 8004530:	4baa      	ldr	r3, [pc, #680]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4ba9      	ldr	r3, [pc, #676]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004536:	2180      	movs	r1, #128	@ 0x80
 8004538:	02c9      	lsls	r1, r1, #11
 800453a:	430a      	orrs	r2, r1
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	4ba7      	ldr	r3, [pc, #668]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4ba6      	ldr	r3, [pc, #664]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004544:	2180      	movs	r1, #128	@ 0x80
 8004546:	0249      	lsls	r1, r1, #9
 8004548:	430a      	orrs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e012      	b.n	8004574 <HAL_RCC_OscConfig+0xd4>
 800454e:	4ba3      	ldr	r3, [pc, #652]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4ba2      	ldr	r3, [pc, #648]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004554:	49a2      	ldr	r1, [pc, #648]	@ (80047e0 <HAL_RCC_OscConfig+0x340>)
 8004556:	400a      	ands	r2, r1
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	4ba0      	ldr	r3, [pc, #640]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	2380      	movs	r3, #128	@ 0x80
 8004560:	025b      	lsls	r3, r3, #9
 8004562:	4013      	ands	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4b9c      	ldr	r3, [pc, #624]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b9b      	ldr	r3, [pc, #620]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 800456e:	499d      	ldr	r1, [pc, #628]	@ (80047e4 <HAL_RCC_OscConfig+0x344>)
 8004570:	400a      	ands	r2, r1
 8004572:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d015      	beq.n	80045a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fe fd52 	bl	8003024 <HAL_GetTick>
 8004580:	0003      	movs	r3, r0
 8004582:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004584:	e009      	b.n	800459a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004586:	f7fe fd4d 	bl	8003024 <HAL_GetTick>
 800458a:	0002      	movs	r2, r0
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b64      	cmp	r3, #100	@ 0x64
 8004592:	d902      	bls.n	800459a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	f000 fb4c 	bl	8004c32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800459a:	4b90      	ldr	r3, [pc, #576]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	2380      	movs	r3, #128	@ 0x80
 80045a0:	029b      	lsls	r3, r3, #10
 80045a2:	4013      	ands	r3, r2
 80045a4:	d0ef      	beq.n	8004586 <HAL_RCC_OscConfig+0xe6>
 80045a6:	e015      	b.n	80045d4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fe fd3c 	bl	8003024 <HAL_GetTick>
 80045ac:	0003      	movs	r3, r0
 80045ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b2:	f7fe fd37 	bl	8003024 <HAL_GetTick>
 80045b6:	0002      	movs	r2, r0
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b64      	cmp	r3, #100	@ 0x64
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e336      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045c4:	4b85      	ldr	r3, [pc, #532]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	2380      	movs	r3, #128	@ 0x80
 80045ca:	029b      	lsls	r3, r3, #10
 80045cc:	4013      	ands	r3, r2
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x112>
 80045d0:	e000      	b.n	80045d4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2202      	movs	r2, #2
 80045da:	4013      	ands	r3, r2
 80045dc:	d100      	bne.n	80045e0 <HAL_RCC_OscConfig+0x140>
 80045de:	e099      	b.n	8004714 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	2220      	movs	r2, #32
 80045ea:	4013      	ands	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80045ee:	4b7b      	ldr	r3, [pc, #492]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b7a      	ldr	r3, [pc, #488]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80045f4:	2120      	movs	r1, #32
 80045f6:	430a      	orrs	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	2220      	movs	r2, #32
 80045fe:	4393      	bics	r3, r2
 8004600:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d005      	beq.n	8004614 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b0c      	cmp	r3, #12
 800460c:	d13e      	bne.n	800468c <HAL_RCC_OscConfig+0x1ec>
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d13b      	bne.n	800468c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004614:	4b71      	ldr	r3, [pc, #452]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2204      	movs	r2, #4
 800461a:	4013      	ands	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_RCC_OscConfig+0x188>
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e304      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004628:	4b6c      	ldr	r3, [pc, #432]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4a6e      	ldr	r2, [pc, #440]	@ (80047e8 <HAL_RCC_OscConfig+0x348>)
 800462e:	4013      	ands	r3, r2
 8004630:	0019      	movs	r1, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	021a      	lsls	r2, r3, #8
 8004638:	4b68      	ldr	r3, [pc, #416]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800463e:	4b67      	ldr	r3, [pc, #412]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2209      	movs	r2, #9
 8004644:	4393      	bics	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	4b64      	ldr	r3, [pc, #400]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 800464a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464c:	430a      	orrs	r2, r1
 800464e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004650:	f000 fc42 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8004654:	0001      	movs	r1, r0
 8004656:	4b61      	ldr	r3, [pc, #388]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	220f      	movs	r2, #15
 800465e:	4013      	ands	r3, r2
 8004660:	4a62      	ldr	r2, [pc, #392]	@ (80047ec <HAL_RCC_OscConfig+0x34c>)
 8004662:	5cd3      	ldrb	r3, [r2, r3]
 8004664:	000a      	movs	r2, r1
 8004666:	40da      	lsrs	r2, r3
 8004668:	4b61      	ldr	r3, [pc, #388]	@ (80047f0 <HAL_RCC_OscConfig+0x350>)
 800466a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800466c:	4b61      	ldr	r3, [pc, #388]	@ (80047f4 <HAL_RCC_OscConfig+0x354>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2513      	movs	r5, #19
 8004672:	197c      	adds	r4, r7, r5
 8004674:	0018      	movs	r0, r3
 8004676:	f7fe fc8f 	bl	8002f98 <HAL_InitTick>
 800467a:	0003      	movs	r3, r0
 800467c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800467e:	197b      	adds	r3, r7, r5
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d046      	beq.n	8004714 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004686:	197b      	adds	r3, r7, r5
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	e2d2      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468e:	2b00      	cmp	r3, #0
 8004690:	d027      	beq.n	80046e2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004692:	4b52      	ldr	r3, [pc, #328]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2209      	movs	r2, #9
 8004698:	4393      	bics	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	4b4f      	ldr	r3, [pc, #316]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 800469e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fe fcbe 	bl	8003024 <HAL_GetTick>
 80046a8:	0003      	movs	r3, r0
 80046aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ae:	f7fe fcb9 	bl	8003024 <HAL_GetTick>
 80046b2:	0002      	movs	r2, r0
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e2b8      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046c0:	4b46      	ldr	r3, [pc, #280]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2204      	movs	r2, #4
 80046c6:	4013      	ands	r3, r2
 80046c8:	d0f1      	beq.n	80046ae <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ca:	4b44      	ldr	r3, [pc, #272]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4a46      	ldr	r2, [pc, #280]	@ (80047e8 <HAL_RCC_OscConfig+0x348>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	0019      	movs	r1, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	021a      	lsls	r2, r3, #8
 80046da:	4b40      	ldr	r3, [pc, #256]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	e018      	b.n	8004714 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e2:	4b3e      	ldr	r3, [pc, #248]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b3d      	ldr	r3, [pc, #244]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80046e8:	2101      	movs	r1, #1
 80046ea:	438a      	bics	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ee:	f7fe fc99 	bl	8003024 <HAL_GetTick>
 80046f2:	0003      	movs	r3, r0
 80046f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f8:	f7fe fc94 	bl	8003024 <HAL_GetTick>
 80046fc:	0002      	movs	r2, r0
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e293      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800470a:	4b34      	ldr	r3, [pc, #208]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2204      	movs	r2, #4
 8004710:	4013      	ands	r3, r2
 8004712:	d1f1      	bne.n	80046f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2210      	movs	r2, #16
 800471a:	4013      	ands	r3, r2
 800471c:	d100      	bne.n	8004720 <HAL_RCC_OscConfig+0x280>
 800471e:	e0a2      	b.n	8004866 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d140      	bne.n	80047a8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004726:	4b2d      	ldr	r3, [pc, #180]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	2380      	movs	r3, #128	@ 0x80
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4013      	ands	r3, r2
 8004730:	d005      	beq.n	800473e <HAL_RCC_OscConfig+0x29e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e279      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800473e:	4b27      	ldr	r3, [pc, #156]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4a2d      	ldr	r2, [pc, #180]	@ (80047f8 <HAL_RCC_OscConfig+0x358>)
 8004744:	4013      	ands	r3, r2
 8004746:	0019      	movs	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800474c:	4b23      	ldr	r3, [pc, #140]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004752:	4b22      	ldr	r3, [pc, #136]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	0a19      	lsrs	r1, r3, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	061a      	lsls	r2, r3, #24
 8004760:	4b1e      	ldr	r3, [pc, #120]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	0b5b      	lsrs	r3, r3, #13
 800476c:	3301      	adds	r3, #1
 800476e:	2280      	movs	r2, #128	@ 0x80
 8004770:	0212      	lsls	r2, r2, #8
 8004772:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004774:	4b19      	ldr	r3, [pc, #100]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	210f      	movs	r1, #15
 800477c:	400b      	ands	r3, r1
 800477e:	491b      	ldr	r1, [pc, #108]	@ (80047ec <HAL_RCC_OscConfig+0x34c>)
 8004780:	5ccb      	ldrb	r3, [r1, r3]
 8004782:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004784:	4b1a      	ldr	r3, [pc, #104]	@ (80047f0 <HAL_RCC_OscConfig+0x350>)
 8004786:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004788:	4b1a      	ldr	r3, [pc, #104]	@ (80047f4 <HAL_RCC_OscConfig+0x354>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2513      	movs	r5, #19
 800478e:	197c      	adds	r4, r7, r5
 8004790:	0018      	movs	r0, r3
 8004792:	f7fe fc01 	bl	8002f98 <HAL_InitTick>
 8004796:	0003      	movs	r3, r0
 8004798:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800479a:	197b      	adds	r3, r7, r5
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d061      	beq.n	8004866 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80047a2:	197b      	adds	r3, r7, r5
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	e244      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d040      	beq.n	8004832 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047b0:	4b0a      	ldr	r3, [pc, #40]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <HAL_RCC_OscConfig+0x33c>)
 80047b6:	2180      	movs	r1, #128	@ 0x80
 80047b8:	0049      	lsls	r1, r1, #1
 80047ba:	430a      	orrs	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047be:	f7fe fc31 	bl	8003024 <HAL_GetTick>
 80047c2:	0003      	movs	r3, r0
 80047c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047c6:	e019      	b.n	80047fc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047c8:	f7fe fc2c 	bl	8003024 <HAL_GetTick>
 80047cc:	0002      	movs	r2, r0
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d912      	bls.n	80047fc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e22b      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
 80047da:	46c0      	nop			@ (mov r8, r8)
 80047dc:	40021000 	.word	0x40021000
 80047e0:	fffeffff 	.word	0xfffeffff
 80047e4:	fffbffff 	.word	0xfffbffff
 80047e8:	ffffe0ff 	.word	0xffffe0ff
 80047ec:	08008dd0 	.word	0x08008dd0
 80047f0:	20000084 	.word	0x20000084
 80047f4:	20000088 	.word	0x20000088
 80047f8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047fc:	4bca      	ldr	r3, [pc, #808]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2380      	movs	r3, #128	@ 0x80
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4013      	ands	r3, r2
 8004806:	d0df      	beq.n	80047c8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004808:	4bc7      	ldr	r3, [pc, #796]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4ac7      	ldr	r2, [pc, #796]	@ (8004b2c <HAL_RCC_OscConfig+0x68c>)
 800480e:	4013      	ands	r3, r2
 8004810:	0019      	movs	r1, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004816:	4bc4      	ldr	r3, [pc, #784]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800481c:	4bc2      	ldr	r3, [pc, #776]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	0a19      	lsrs	r1, r3, #8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	061a      	lsls	r2, r3, #24
 800482a:	4bbf      	ldr	r3, [pc, #764]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	e019      	b.n	8004866 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004832:	4bbd      	ldr	r3, [pc, #756]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4bbc      	ldr	r3, [pc, #752]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004838:	49bd      	ldr	r1, [pc, #756]	@ (8004b30 <HAL_RCC_OscConfig+0x690>)
 800483a:	400a      	ands	r2, r1
 800483c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483e:	f7fe fbf1 	bl	8003024 <HAL_GetTick>
 8004842:	0003      	movs	r3, r0
 8004844:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004848:	f7fe fbec 	bl	8003024 <HAL_GetTick>
 800484c:	0002      	movs	r2, r0
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e1eb      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800485a:	4bb3      	ldr	r3, [pc, #716]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	2380      	movs	r3, #128	@ 0x80
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4013      	ands	r3, r2
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2208      	movs	r2, #8
 800486c:	4013      	ands	r3, r2
 800486e:	d036      	beq.n	80048de <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d019      	beq.n	80048ac <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004878:	4bab      	ldr	r3, [pc, #684]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 800487a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800487c:	4baa      	ldr	r3, [pc, #680]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 800487e:	2101      	movs	r1, #1
 8004880:	430a      	orrs	r2, r1
 8004882:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004884:	f7fe fbce 	bl	8003024 <HAL_GetTick>
 8004888:	0003      	movs	r3, r0
 800488a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800488e:	f7fe fbc9 	bl	8003024 <HAL_GetTick>
 8004892:	0002      	movs	r2, r0
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e1c8      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048a0:	4ba1      	ldr	r3, [pc, #644]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80048a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a4:	2202      	movs	r2, #2
 80048a6:	4013      	ands	r3, r2
 80048a8:	d0f1      	beq.n	800488e <HAL_RCC_OscConfig+0x3ee>
 80048aa:	e018      	b.n	80048de <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ac:	4b9e      	ldr	r3, [pc, #632]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80048ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048b0:	4b9d      	ldr	r3, [pc, #628]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80048b2:	2101      	movs	r1, #1
 80048b4:	438a      	bics	r2, r1
 80048b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b8:	f7fe fbb4 	bl	8003024 <HAL_GetTick>
 80048bc:	0003      	movs	r3, r0
 80048be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c2:	f7fe fbaf 	bl	8003024 <HAL_GetTick>
 80048c6:	0002      	movs	r2, r0
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e1ae      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048d4:	4b94      	ldr	r3, [pc, #592]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80048d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d8:	2202      	movs	r2, #2
 80048da:	4013      	ands	r3, r2
 80048dc:	d1f1      	bne.n	80048c2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2204      	movs	r2, #4
 80048e4:	4013      	ands	r3, r2
 80048e6:	d100      	bne.n	80048ea <HAL_RCC_OscConfig+0x44a>
 80048e8:	e0ae      	b.n	8004a48 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ea:	2023      	movs	r0, #35	@ 0x23
 80048ec:	183b      	adds	r3, r7, r0
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80048f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048f6:	2380      	movs	r3, #128	@ 0x80
 80048f8:	055b      	lsls	r3, r3, #21
 80048fa:	4013      	ands	r3, r2
 80048fc:	d109      	bne.n	8004912 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048fe:	4b8a      	ldr	r3, [pc, #552]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004902:	4b89      	ldr	r3, [pc, #548]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004904:	2180      	movs	r1, #128	@ 0x80
 8004906:	0549      	lsls	r1, r1, #21
 8004908:	430a      	orrs	r2, r1
 800490a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800490c:	183b      	adds	r3, r7, r0
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004912:	4b88      	ldr	r3, [pc, #544]	@ (8004b34 <HAL_RCC_OscConfig+0x694>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	2380      	movs	r3, #128	@ 0x80
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4013      	ands	r3, r2
 800491c:	d11a      	bne.n	8004954 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800491e:	4b85      	ldr	r3, [pc, #532]	@ (8004b34 <HAL_RCC_OscConfig+0x694>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b84      	ldr	r3, [pc, #528]	@ (8004b34 <HAL_RCC_OscConfig+0x694>)
 8004924:	2180      	movs	r1, #128	@ 0x80
 8004926:	0049      	lsls	r1, r1, #1
 8004928:	430a      	orrs	r2, r1
 800492a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800492c:	f7fe fb7a 	bl	8003024 <HAL_GetTick>
 8004930:	0003      	movs	r3, r0
 8004932:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004936:	f7fe fb75 	bl	8003024 <HAL_GetTick>
 800493a:	0002      	movs	r2, r0
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b64      	cmp	r3, #100	@ 0x64
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e174      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004948:	4b7a      	ldr	r3, [pc, #488]	@ (8004b34 <HAL_RCC_OscConfig+0x694>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	2380      	movs	r3, #128	@ 0x80
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4013      	ands	r3, r2
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	2380      	movs	r3, #128	@ 0x80
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	429a      	cmp	r2, r3
 800495e:	d107      	bne.n	8004970 <HAL_RCC_OscConfig+0x4d0>
 8004960:	4b71      	ldr	r3, [pc, #452]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004962:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004964:	4b70      	ldr	r3, [pc, #448]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004966:	2180      	movs	r1, #128	@ 0x80
 8004968:	0049      	lsls	r1, r1, #1
 800496a:	430a      	orrs	r2, r1
 800496c:	651a      	str	r2, [r3, #80]	@ 0x50
 800496e:	e031      	b.n	80049d4 <HAL_RCC_OscConfig+0x534>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10c      	bne.n	8004992 <HAL_RCC_OscConfig+0x4f2>
 8004978:	4b6b      	ldr	r3, [pc, #428]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 800497a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800497c:	4b6a      	ldr	r3, [pc, #424]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 800497e:	496c      	ldr	r1, [pc, #432]	@ (8004b30 <HAL_RCC_OscConfig+0x690>)
 8004980:	400a      	ands	r2, r1
 8004982:	651a      	str	r2, [r3, #80]	@ 0x50
 8004984:	4b68      	ldr	r3, [pc, #416]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004986:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004988:	4b67      	ldr	r3, [pc, #412]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 800498a:	496b      	ldr	r1, [pc, #428]	@ (8004b38 <HAL_RCC_OscConfig+0x698>)
 800498c:	400a      	ands	r2, r1
 800498e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004990:	e020      	b.n	80049d4 <HAL_RCC_OscConfig+0x534>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	23a0      	movs	r3, #160	@ 0xa0
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	429a      	cmp	r2, r3
 800499c:	d10e      	bne.n	80049bc <HAL_RCC_OscConfig+0x51c>
 800499e:	4b62      	ldr	r3, [pc, #392]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80049a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049a2:	4b61      	ldr	r3, [pc, #388]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80049a4:	2180      	movs	r1, #128	@ 0x80
 80049a6:	00c9      	lsls	r1, r1, #3
 80049a8:	430a      	orrs	r2, r1
 80049aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80049ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80049ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049b0:	4b5d      	ldr	r3, [pc, #372]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80049b2:	2180      	movs	r1, #128	@ 0x80
 80049b4:	0049      	lsls	r1, r1, #1
 80049b6:	430a      	orrs	r2, r1
 80049b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80049ba:	e00b      	b.n	80049d4 <HAL_RCC_OscConfig+0x534>
 80049bc:	4b5a      	ldr	r3, [pc, #360]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80049be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049c0:	4b59      	ldr	r3, [pc, #356]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80049c2:	495b      	ldr	r1, [pc, #364]	@ (8004b30 <HAL_RCC_OscConfig+0x690>)
 80049c4:	400a      	ands	r2, r1
 80049c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80049c8:	4b57      	ldr	r3, [pc, #348]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80049ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049cc:	4b56      	ldr	r3, [pc, #344]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80049ce:	495a      	ldr	r1, [pc, #360]	@ (8004b38 <HAL_RCC_OscConfig+0x698>)
 80049d0:	400a      	ands	r2, r1
 80049d2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d015      	beq.n	8004a08 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049dc:	f7fe fb22 	bl	8003024 <HAL_GetTick>
 80049e0:	0003      	movs	r3, r0
 80049e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049e4:	e009      	b.n	80049fa <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e6:	f7fe fb1d 	bl	8003024 <HAL_GetTick>
 80049ea:	0002      	movs	r2, r0
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	4a52      	ldr	r2, [pc, #328]	@ (8004b3c <HAL_RCC_OscConfig+0x69c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e11b      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 80049fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049fe:	2380      	movs	r3, #128	@ 0x80
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4013      	ands	r3, r2
 8004a04:	d0ef      	beq.n	80049e6 <HAL_RCC_OscConfig+0x546>
 8004a06:	e014      	b.n	8004a32 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a08:	f7fe fb0c 	bl	8003024 <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a10:	e009      	b.n	8004a26 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a12:	f7fe fb07 	bl	8003024 <HAL_GetTick>
 8004a16:	0002      	movs	r2, r0
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	4a47      	ldr	r2, [pc, #284]	@ (8004b3c <HAL_RCC_OscConfig+0x69c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e105      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a26:	4b40      	ldr	r3, [pc, #256]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004a28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a2a:	2380      	movs	r3, #128	@ 0x80
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d1ef      	bne.n	8004a12 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a32:	2323      	movs	r3, #35	@ 0x23
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004a3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a40:	4b39      	ldr	r3, [pc, #228]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004a42:	493f      	ldr	r1, [pc, #252]	@ (8004b40 <HAL_RCC_OscConfig+0x6a0>)
 8004a44:	400a      	ands	r2, r1
 8004a46:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d049      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d026      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004a5a:	4b33      	ldr	r3, [pc, #204]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	4b32      	ldr	r3, [pc, #200]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004a60:	2101      	movs	r1, #1
 8004a62:	430a      	orrs	r2, r1
 8004a64:	609a      	str	r2, [r3, #8]
 8004a66:	4b30      	ldr	r3, [pc, #192]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a72:	4b34      	ldr	r3, [pc, #208]	@ (8004b44 <HAL_RCC_OscConfig+0x6a4>)
 8004a74:	6a1a      	ldr	r2, [r3, #32]
 8004a76:	4b33      	ldr	r3, [pc, #204]	@ (8004b44 <HAL_RCC_OscConfig+0x6a4>)
 8004a78:	2180      	movs	r1, #128	@ 0x80
 8004a7a:	0189      	lsls	r1, r1, #6
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fe fad0 	bl	8003024 <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a8a:	f7fe facb 	bl	8003024 <HAL_GetTick>
 8004a8e:	0002      	movs	r2, r0
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e0ca      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a9c:	4b22      	ldr	r3, [pc, #136]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d0f1      	beq.n	8004a8a <HAL_RCC_OscConfig+0x5ea>
 8004aa6:	e01e      	b.n	8004ae6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	4b1e      	ldr	r3, [pc, #120]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004aae:	2101      	movs	r1, #1
 8004ab0:	438a      	bics	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	4b23      	ldr	r3, [pc, #140]	@ (8004b44 <HAL_RCC_OscConfig+0x6a4>)
 8004ab6:	6a1a      	ldr	r2, [r3, #32]
 8004ab8:	4b22      	ldr	r3, [pc, #136]	@ (8004b44 <HAL_RCC_OscConfig+0x6a4>)
 8004aba:	4923      	ldr	r1, [pc, #140]	@ (8004b48 <HAL_RCC_OscConfig+0x6a8>)
 8004abc:	400a      	ands	r2, r1
 8004abe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fe fab0 	bl	8003024 <HAL_GetTick>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aca:	f7fe faab 	bl	8003024 <HAL_GetTick>
 8004ace:	0002      	movs	r2, r0
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e0aa      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004adc:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d1f1      	bne.n	8004aca <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d100      	bne.n	8004af0 <HAL_RCC_OscConfig+0x650>
 8004aee:	e09f      	b.n	8004c30 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b0c      	cmp	r3, #12
 8004af4:	d100      	bne.n	8004af8 <HAL_RCC_OscConfig+0x658>
 8004af6:	e078      	b.n	8004bea <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d159      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b00:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b08      	ldr	r3, [pc, #32]	@ (8004b28 <HAL_RCC_OscConfig+0x688>)
 8004b06:	4911      	ldr	r1, [pc, #68]	@ (8004b4c <HAL_RCC_OscConfig+0x6ac>)
 8004b08:	400a      	ands	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7fe fa8a 	bl	8003024 <HAL_GetTick>
 8004b10:	0003      	movs	r3, r0
 8004b12:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b14:	e01c      	b.n	8004b50 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fe fa85 	bl	8003024 <HAL_GetTick>
 8004b1a:	0002      	movs	r2, r0
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d915      	bls.n	8004b50 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e084      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	ffff1fff 	.word	0xffff1fff
 8004b30:	fffffeff 	.word	0xfffffeff
 8004b34:	40007000 	.word	0x40007000
 8004b38:	fffffbff 	.word	0xfffffbff
 8004b3c:	00001388 	.word	0x00001388
 8004b40:	efffffff 	.word	0xefffffff
 8004b44:	40010000 	.word	0x40010000
 8004b48:	ffffdfff 	.word	0xffffdfff
 8004b4c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b50:	4b3a      	ldr	r3, [pc, #232]	@ (8004c3c <HAL_RCC_OscConfig+0x79c>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	049b      	lsls	r3, r3, #18
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d1dc      	bne.n	8004b16 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b5c:	4b37      	ldr	r3, [pc, #220]	@ (8004c3c <HAL_RCC_OscConfig+0x79c>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	4a37      	ldr	r2, [pc, #220]	@ (8004c40 <HAL_RCC_OscConfig+0x7a0>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	0019      	movs	r1, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b74:	431a      	orrs	r2, r3
 8004b76:	4b31      	ldr	r3, [pc, #196]	@ (8004c3c <HAL_RCC_OscConfig+0x79c>)
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c3c <HAL_RCC_OscConfig+0x79c>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b2e      	ldr	r3, [pc, #184]	@ (8004c3c <HAL_RCC_OscConfig+0x79c>)
 8004b82:	2180      	movs	r1, #128	@ 0x80
 8004b84:	0449      	lsls	r1, r1, #17
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8a:	f7fe fa4b 	bl	8003024 <HAL_GetTick>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fe fa46 	bl	8003024 <HAL_GetTick>
 8004b98:	0002      	movs	r2, r0
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e045      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004ba6:	4b25      	ldr	r3, [pc, #148]	@ (8004c3c <HAL_RCC_OscConfig+0x79c>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	049b      	lsls	r3, r3, #18
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x6f4>
 8004bb2:	e03d      	b.n	8004c30 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb4:	4b21      	ldr	r3, [pc, #132]	@ (8004c3c <HAL_RCC_OscConfig+0x79c>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4b20      	ldr	r3, [pc, #128]	@ (8004c3c <HAL_RCC_OscConfig+0x79c>)
 8004bba:	4922      	ldr	r1, [pc, #136]	@ (8004c44 <HAL_RCC_OscConfig+0x7a4>)
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc0:	f7fe fa30 	bl	8003024 <HAL_GetTick>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bca:	f7fe fa2b 	bl	8003024 <HAL_GetTick>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e02a      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004bdc:	4b17      	ldr	r3, [pc, #92]	@ (8004c3c <HAL_RCC_OscConfig+0x79c>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	2380      	movs	r3, #128	@ 0x80
 8004be2:	049b      	lsls	r3, r3, #18
 8004be4:	4013      	ands	r3, r2
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0x72a>
 8004be8:	e022      	b.n	8004c30 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e01d      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bf6:	4b11      	ldr	r3, [pc, #68]	@ (8004c3c <HAL_RCC_OscConfig+0x79c>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	2380      	movs	r3, #128	@ 0x80
 8004c00:	025b      	lsls	r3, r3, #9
 8004c02:	401a      	ands	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d10f      	bne.n	8004c2c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	23f0      	movs	r3, #240	@ 0xf0
 8004c10:	039b      	lsls	r3, r3, #14
 8004c12:	401a      	ands	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	23c0      	movs	r3, #192	@ 0xc0
 8004c20:	041b      	lsls	r3, r3, #16
 8004c22:	401a      	ands	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	0018      	movs	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b00a      	add	sp, #40	@ 0x28
 8004c38:	bdb0      	pop	{r4, r5, r7, pc}
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	ff02ffff 	.word	0xff02ffff
 8004c44:	feffffff 	.word	0xfeffffff

08004c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c48:	b5b0      	push	{r4, r5, r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e128      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b96      	ldr	r3, [pc, #600]	@ (8004eb8 <HAL_RCC_ClockConfig+0x270>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2201      	movs	r2, #1
 8004c62:	4013      	ands	r3, r2
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d91e      	bls.n	8004ca8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b93      	ldr	r3, [pc, #588]	@ (8004eb8 <HAL_RCC_ClockConfig+0x270>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	4393      	bics	r3, r2
 8004c72:	0019      	movs	r1, r3
 8004c74:	4b90      	ldr	r3, [pc, #576]	@ (8004eb8 <HAL_RCC_ClockConfig+0x270>)
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c7c:	f7fe f9d2 	bl	8003024 <HAL_GetTick>
 8004c80:	0003      	movs	r3, r0
 8004c82:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c84:	e009      	b.n	8004c9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c86:	f7fe f9cd 	bl	8003024 <HAL_GetTick>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	4a8a      	ldr	r2, [pc, #552]	@ (8004ebc <HAL_RCC_ClockConfig+0x274>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e109      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b87      	ldr	r3, [pc, #540]	@ (8004eb8 <HAL_RCC_ClockConfig+0x270>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d1ee      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2202      	movs	r2, #2
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb2:	4b83      	ldr	r3, [pc, #524]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	22f0      	movs	r2, #240	@ 0xf0
 8004cb8:	4393      	bics	r3, r2
 8004cba:	0019      	movs	r1, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x8a>
 8004cd0:	e089      	b.n	8004de6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cda:	4b79      	ldr	r3, [pc, #484]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	2380      	movs	r3, #128	@ 0x80
 8004ce0:	029b      	lsls	r3, r3, #10
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d120      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0e1      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d107      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cf2:	4b73      	ldr	r3, [pc, #460]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	2380      	movs	r3, #128	@ 0x80
 8004cf8:	049b      	lsls	r3, r3, #18
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d114      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e0d5      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d106      	bne.n	8004d18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2204      	movs	r2, #4
 8004d10:	4013      	ands	r3, r2
 8004d12:	d109      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0ca      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d18:	4b69      	ldr	r3, [pc, #420]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	2380      	movs	r3, #128	@ 0x80
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4013      	ands	r3, r2
 8004d22:	d101      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0c2      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d28:	4b65      	ldr	r3, [pc, #404]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	4393      	bics	r3, r2
 8004d30:	0019      	movs	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	4b62      	ldr	r3, [pc, #392]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d3c:	f7fe f972 	bl	8003024 <HAL_GetTick>
 8004d40:	0003      	movs	r3, r0
 8004d42:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d111      	bne.n	8004d70 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d4c:	e009      	b.n	8004d62 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d4e:	f7fe f969 	bl	8003024 <HAL_GetTick>
 8004d52:	0002      	movs	r2, r0
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	4a58      	ldr	r2, [pc, #352]	@ (8004ebc <HAL_RCC_ClockConfig+0x274>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e0a5      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d62:	4b57      	ldr	r3, [pc, #348]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	220c      	movs	r2, #12
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d1ef      	bne.n	8004d4e <HAL_RCC_ClockConfig+0x106>
 8004d6e:	e03a      	b.n	8004de6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d111      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d78:	e009      	b.n	8004d8e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7a:	f7fe f953 	bl	8003024 <HAL_GetTick>
 8004d7e:	0002      	movs	r2, r0
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	4a4d      	ldr	r2, [pc, #308]	@ (8004ebc <HAL_RCC_ClockConfig+0x274>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e08f      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	220c      	movs	r2, #12
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d1ef      	bne.n	8004d7a <HAL_RCC_ClockConfig+0x132>
 8004d9a:	e024      	b.n	8004de6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d11b      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004da4:	e009      	b.n	8004dba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da6:	f7fe f93d 	bl	8003024 <HAL_GetTick>
 8004daa:	0002      	movs	r2, r0
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	4a42      	ldr	r2, [pc, #264]	@ (8004ebc <HAL_RCC_ClockConfig+0x274>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e079      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dba:	4b41      	ldr	r3, [pc, #260]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	220c      	movs	r2, #12
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d1ef      	bne.n	8004da6 <HAL_RCC_ClockConfig+0x15e>
 8004dc6:	e00e      	b.n	8004de6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc8:	f7fe f92c 	bl	8003024 <HAL_GetTick>
 8004dcc:	0002      	movs	r2, r0
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	4a3a      	ldr	r2, [pc, #232]	@ (8004ebc <HAL_RCC_ClockConfig+0x274>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e068      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ddc:	4b38      	ldr	r3, [pc, #224]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	220c      	movs	r2, #12
 8004de2:	4013      	ands	r3, r2
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004de6:	4b34      	ldr	r3, [pc, #208]	@ (8004eb8 <HAL_RCC_ClockConfig+0x270>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2201      	movs	r2, #1
 8004dec:	4013      	ands	r3, r2
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d21e      	bcs.n	8004e32 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df4:	4b30      	ldr	r3, [pc, #192]	@ (8004eb8 <HAL_RCC_ClockConfig+0x270>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	4393      	bics	r3, r2
 8004dfc:	0019      	movs	r1, r3
 8004dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8004eb8 <HAL_RCC_ClockConfig+0x270>)
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e06:	f7fe f90d 	bl	8003024 <HAL_GetTick>
 8004e0a:	0003      	movs	r3, r0
 8004e0c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0e:	e009      	b.n	8004e24 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e10:	f7fe f908 	bl	8003024 <HAL_GetTick>
 8004e14:	0002      	movs	r2, r0
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	4a28      	ldr	r2, [pc, #160]	@ (8004ebc <HAL_RCC_ClockConfig+0x274>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e044      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e24:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <HAL_RCC_ClockConfig+0x270>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d1ee      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2204      	movs	r2, #4
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e3c:	4b20      	ldr	r3, [pc, #128]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4a20      	ldr	r2, [pc, #128]	@ (8004ec4 <HAL_RCC_ClockConfig+0x27c>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	0019      	movs	r1, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2208      	movs	r2, #8
 8004e56:	4013      	ands	r3, r2
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e5a:	4b19      	ldr	r3, [pc, #100]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec8 <HAL_RCC_ClockConfig+0x280>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	00da      	lsls	r2, r3, #3
 8004e6a:	4b15      	ldr	r3, [pc, #84]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e70:	f000 f832 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8004e74:	0001      	movs	r1, r0
 8004e76:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <HAL_RCC_ClockConfig+0x278>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	220f      	movs	r2, #15
 8004e7e:	4013      	ands	r3, r2
 8004e80:	4a12      	ldr	r2, [pc, #72]	@ (8004ecc <HAL_RCC_ClockConfig+0x284>)
 8004e82:	5cd3      	ldrb	r3, [r2, r3]
 8004e84:	000a      	movs	r2, r1
 8004e86:	40da      	lsrs	r2, r3
 8004e88:	4b11      	ldr	r3, [pc, #68]	@ (8004ed0 <HAL_RCC_ClockConfig+0x288>)
 8004e8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <HAL_RCC_ClockConfig+0x28c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	250b      	movs	r5, #11
 8004e92:	197c      	adds	r4, r7, r5
 8004e94:	0018      	movs	r0, r3
 8004e96:	f7fe f87f 	bl	8002f98 <HAL_InitTick>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004e9e:	197b      	adds	r3, r7, r5
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004ea6:	197b      	adds	r3, r7, r5
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	e000      	b.n	8004eae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b004      	add	sp, #16
 8004eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	40022000 	.word	0x40022000
 8004ebc:	00001388 	.word	0x00001388
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	fffff8ff 	.word	0xfffff8ff
 8004ec8:	ffffc7ff 	.word	0xffffc7ff
 8004ecc:	08008dd0 	.word	0x08008dd0
 8004ed0:	20000084 	.word	0x20000084
 8004ed4:	20000088 	.word	0x20000088

08004ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004ede:	4b3c      	ldr	r3, [pc, #240]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	220c      	movs	r2, #12
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b0c      	cmp	r3, #12
 8004eec:	d013      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0x3e>
 8004eee:	d85c      	bhi.n	8004faa <HAL_RCC_GetSysClockFreq+0xd2>
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d002      	beq.n	8004efa <HAL_RCC_GetSysClockFreq+0x22>
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d00b      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x38>
 8004ef8:	e057      	b.n	8004faa <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004efa:	4b35      	ldr	r3, [pc, #212]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2210      	movs	r2, #16
 8004f00:	4013      	ands	r3, r2
 8004f02:	d002      	beq.n	8004f0a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004f04:	4b33      	ldr	r3, [pc, #204]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f06:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004f08:	e05d      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8004f0a:	4b33      	ldr	r3, [pc, #204]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004f0c:	613b      	str	r3, [r7, #16]
      break;
 8004f0e:	e05a      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f10:	4b32      	ldr	r3, [pc, #200]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x104>)
 8004f12:	613b      	str	r3, [r7, #16]
      break;
 8004f14:	e057      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	0c9b      	lsrs	r3, r3, #18
 8004f1a:	220f      	movs	r2, #15
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	4a30      	ldr	r2, [pc, #192]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f20:	5cd3      	ldrb	r3, [r2, r3]
 8004f22:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	0d9b      	lsrs	r3, r3, #22
 8004f28:	2203      	movs	r2, #3
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f30:	4b27      	ldr	r3, [pc, #156]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	2380      	movs	r3, #128	@ 0x80
 8004f36:	025b      	lsls	r3, r3, #9
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d00f      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	000a      	movs	r2, r1
 8004f40:	0152      	lsls	r2, r2, #5
 8004f42:	1a52      	subs	r2, r2, r1
 8004f44:	0193      	lsls	r3, r2, #6
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	185b      	adds	r3, r3, r1
 8004f4c:	025b      	lsls	r3, r3, #9
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7fb f8e1 	bl	8000118 <__udivsi3>
 8004f56:	0003      	movs	r3, r0
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e023      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2210      	movs	r2, #16
 8004f62:	4013      	ands	r3, r2
 8004f64:	d00f      	beq.n	8004f86 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	000a      	movs	r2, r1
 8004f6a:	0152      	lsls	r2, r2, #5
 8004f6c:	1a52      	subs	r2, r2, r1
 8004f6e:	0193      	lsls	r3, r2, #6
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	185b      	adds	r3, r3, r1
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f7fb f8cc 	bl	8000118 <__udivsi3>
 8004f80:	0003      	movs	r3, r0
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	e00e      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	000a      	movs	r2, r1
 8004f8a:	0152      	lsls	r2, r2, #5
 8004f8c:	1a52      	subs	r2, r2, r1
 8004f8e:	0193      	lsls	r3, r2, #6
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	185b      	adds	r3, r3, r1
 8004f96:	029b      	lsls	r3, r3, #10
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f7fb f8bc 	bl	8000118 <__udivsi3>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	613b      	str	r3, [r7, #16]
      break;
 8004fa8:	e00d      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004faa:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	0b5b      	lsrs	r3, r3, #13
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	2280      	movs	r2, #128	@ 0x80
 8004fbc:	0212      	lsls	r2, r2, #8
 8004fbe:	409a      	lsls	r2, r3
 8004fc0:	0013      	movs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
      break;
 8004fc4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004fc6:	693b      	ldr	r3, [r7, #16]
}
 8004fc8:	0018      	movs	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b006      	add	sp, #24
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	003d0900 	.word	0x003d0900
 8004fd8:	00f42400 	.word	0x00f42400
 8004fdc:	007a1200 	.word	0x007a1200
 8004fe0:	08008de8 	.word	0x08008de8

08004fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe8:	4b02      	ldr	r3, [pc, #8]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	0018      	movs	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	20000084 	.word	0x20000084

08004ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ffc:	f7ff fff2 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005000:	0001      	movs	r1, r0
 8005002:	4b06      	ldr	r3, [pc, #24]	@ (800501c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	2207      	movs	r2, #7
 800500a:	4013      	ands	r3, r2
 800500c:	4a04      	ldr	r2, [pc, #16]	@ (8005020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800500e:	5cd3      	ldrb	r3, [r2, r3]
 8005010:	40d9      	lsrs	r1, r3
 8005012:	000b      	movs	r3, r1
}
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	46c0      	nop			@ (mov r8, r8)
 800501c:	40021000 	.word	0x40021000
 8005020:	08008de0 	.word	0x08008de0

08005024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005028:	f7ff ffdc 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 800502c:	0001      	movs	r1, r0
 800502e:	4b06      	ldr	r3, [pc, #24]	@ (8005048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	0adb      	lsrs	r3, r3, #11
 8005034:	2207      	movs	r2, #7
 8005036:	4013      	ands	r3, r2
 8005038:	4a04      	ldr	r2, [pc, #16]	@ (800504c <HAL_RCC_GetPCLK2Freq+0x28>)
 800503a:	5cd3      	ldrb	r3, [r2, r3]
 800503c:	40d9      	lsrs	r1, r3
 800503e:	000b      	movs	r3, r1
}
 8005040:	0018      	movs	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	46c0      	nop			@ (mov r8, r8)
 8005048:	40021000 	.word	0x40021000
 800504c:	08008de0 	.word	0x08008de0

08005050 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005058:	2017      	movs	r0, #23
 800505a:	183b      	adds	r3, r7, r0
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2220      	movs	r2, #32
 8005066:	4013      	ands	r3, r2
 8005068:	d100      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800506a:	e0c7      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506c:	4b9b      	ldr	r3, [pc, #620]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800506e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005070:	2380      	movs	r3, #128	@ 0x80
 8005072:	055b      	lsls	r3, r3, #21
 8005074:	4013      	ands	r3, r2
 8005076:	d109      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005078:	4b98      	ldr	r3, [pc, #608]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800507a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800507c:	4b97      	ldr	r3, [pc, #604]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800507e:	2180      	movs	r1, #128	@ 0x80
 8005080:	0549      	lsls	r1, r1, #21
 8005082:	430a      	orrs	r2, r1
 8005084:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005086:	183b      	adds	r3, r7, r0
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508c:	4b94      	ldr	r3, [pc, #592]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	2380      	movs	r3, #128	@ 0x80
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	4013      	ands	r3, r2
 8005096:	d11a      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005098:	4b91      	ldr	r3, [pc, #580]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4b90      	ldr	r3, [pc, #576]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800509e:	2180      	movs	r1, #128	@ 0x80
 80050a0:	0049      	lsls	r1, r1, #1
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a6:	f7fd ffbd 	bl	8003024 <HAL_GetTick>
 80050aa:	0003      	movs	r3, r0
 80050ac:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ae:	e008      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b0:	f7fd ffb8 	bl	8003024 <HAL_GetTick>
 80050b4:	0002      	movs	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	@ 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e107      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c2:	4b87      	ldr	r3, [pc, #540]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	2380      	movs	r3, #128	@ 0x80
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4013      	ands	r3, r2
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80050ce:	4b83      	ldr	r3, [pc, #524]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	23c0      	movs	r3, #192	@ 0xc0
 80050d4:	039b      	lsls	r3, r3, #14
 80050d6:	4013      	ands	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	23c0      	movs	r3, #192	@ 0xc0
 80050e0:	039b      	lsls	r3, r3, #14
 80050e2:	4013      	ands	r3, r2
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d013      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	23c0      	movs	r3, #192	@ 0xc0
 80050f0:	029b      	lsls	r3, r3, #10
 80050f2:	401a      	ands	r2, r3
 80050f4:	23c0      	movs	r3, #192	@ 0xc0
 80050f6:	029b      	lsls	r3, r3, #10
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d10a      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050fc:	4b77      	ldr	r3, [pc, #476]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	2380      	movs	r3, #128	@ 0x80
 8005102:	029b      	lsls	r3, r3, #10
 8005104:	401a      	ands	r2, r3
 8005106:	2380      	movs	r3, #128	@ 0x80
 8005108:	029b      	lsls	r3, r3, #10
 800510a:	429a      	cmp	r2, r3
 800510c:	d101      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e0df      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005112:	4b72      	ldr	r3, [pc, #456]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005116:	23c0      	movs	r3, #192	@ 0xc0
 8005118:	029b      	lsls	r3, r3, #10
 800511a:	4013      	ands	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d03b      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	23c0      	movs	r3, #192	@ 0xc0
 800512a:	029b      	lsls	r3, r3, #10
 800512c:	4013      	ands	r3, r2
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	429a      	cmp	r2, r3
 8005132:	d033      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2220      	movs	r2, #32
 800513a:	4013      	ands	r3, r2
 800513c:	d02e      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800513e:	4b67      	ldr	r3, [pc, #412]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005142:	4a68      	ldr	r2, [pc, #416]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005144:	4013      	ands	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005148:	4b64      	ldr	r3, [pc, #400]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800514a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800514c:	4b63      	ldr	r3, [pc, #396]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800514e:	2180      	movs	r1, #128	@ 0x80
 8005150:	0309      	lsls	r1, r1, #12
 8005152:	430a      	orrs	r2, r1
 8005154:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005156:	4b61      	ldr	r3, [pc, #388]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005158:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800515a:	4b60      	ldr	r3, [pc, #384]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800515c:	4962      	ldr	r1, [pc, #392]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800515e:	400a      	ands	r2, r1
 8005160:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005162:	4b5e      	ldr	r3, [pc, #376]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	2380      	movs	r3, #128	@ 0x80
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4013      	ands	r3, r2
 8005170:	d014      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005172:	f7fd ff57 	bl	8003024 <HAL_GetTick>
 8005176:	0003      	movs	r3, r0
 8005178:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800517a:	e009      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7fd ff52 	bl	8003024 <HAL_GetTick>
 8005180:	0002      	movs	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	4a59      	ldr	r2, [pc, #356]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d901      	bls.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e0a0      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005190:	4b52      	ldr	r3, [pc, #328]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005192:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4013      	ands	r3, r2
 800519a:	d0ef      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2220      	movs	r2, #32
 80051a2:	4013      	ands	r3, r2
 80051a4:	d01f      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	23c0      	movs	r3, #192	@ 0xc0
 80051ac:	029b      	lsls	r3, r3, #10
 80051ae:	401a      	ands	r2, r3
 80051b0:	23c0      	movs	r3, #192	@ 0xc0
 80051b2:	029b      	lsls	r3, r3, #10
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d10c      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80051b8:	4b48      	ldr	r3, [pc, #288]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a4c      	ldr	r2, [pc, #304]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80051be:	4013      	ands	r3, r2
 80051c0:	0019      	movs	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	23c0      	movs	r3, #192	@ 0xc0
 80051c8:	039b      	lsls	r3, r3, #14
 80051ca:	401a      	ands	r2, r3
 80051cc:	4b43      	ldr	r3, [pc, #268]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051ce:	430a      	orrs	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	4b42      	ldr	r3, [pc, #264]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	23c0      	movs	r3, #192	@ 0xc0
 80051dc:	029b      	lsls	r3, r3, #10
 80051de:	401a      	ands	r2, r3
 80051e0:	4b3e      	ldr	r3, [pc, #248]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051e2:	430a      	orrs	r2, r1
 80051e4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051e6:	2317      	movs	r3, #23
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d105      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f0:	4b3a      	ldr	r3, [pc, #232]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051f4:	4b39      	ldr	r3, [pc, #228]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051f6:	493f      	ldr	r1, [pc, #252]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80051f8:	400a      	ands	r2, r1
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2201      	movs	r2, #1
 8005202:	4013      	ands	r3, r2
 8005204:	d009      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005206:	4b35      	ldr	r3, [pc, #212]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800520a:	2203      	movs	r2, #3
 800520c:	4393      	bics	r3, r2
 800520e:	0019      	movs	r1, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	4b31      	ldr	r3, [pc, #196]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005216:	430a      	orrs	r2, r1
 8005218:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2202      	movs	r2, #2
 8005220:	4013      	ands	r3, r2
 8005222:	d009      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005224:	4b2d      	ldr	r3, [pc, #180]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005228:	220c      	movs	r2, #12
 800522a:	4393      	bics	r3, r2
 800522c:	0019      	movs	r1, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	4b2a      	ldr	r3, [pc, #168]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005234:	430a      	orrs	r2, r1
 8005236:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2204      	movs	r2, #4
 800523e:	4013      	ands	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005242:	4b26      	ldr	r3, [pc, #152]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005246:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005248:	4013      	ands	r3, r2
 800524a:	0019      	movs	r1, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	4b22      	ldr	r3, [pc, #136]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005252:	430a      	orrs	r2, r1
 8005254:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2208      	movs	r2, #8
 800525c:	4013      	ands	r3, r2
 800525e:	d009      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005260:	4b1e      	ldr	r3, [pc, #120]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005264:	4a25      	ldr	r2, [pc, #148]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005266:	4013      	ands	r3, r2
 8005268:	0019      	movs	r1, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695a      	ldr	r2, [r3, #20]
 800526e:	4b1b      	ldr	r3, [pc, #108]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005270:	430a      	orrs	r2, r1
 8005272:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	2380      	movs	r3, #128	@ 0x80
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	4013      	ands	r3, r2
 800527e:	d009      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005280:	4b16      	ldr	r3, [pc, #88]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005284:	4a17      	ldr	r2, [pc, #92]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005286:	4013      	ands	r3, r2
 8005288:	0019      	movs	r1, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	4b13      	ldr	r3, [pc, #76]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005290:	430a      	orrs	r2, r1
 8005292:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2240      	movs	r2, #64	@ 0x40
 800529a:	4013      	ands	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800529e:	4b0f      	ldr	r3, [pc, #60]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80052a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a2:	4a17      	ldr	r2, [pc, #92]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	0019      	movs	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1a      	ldr	r2, [r3, #32]
 80052ac:	4b0b      	ldr	r3, [pc, #44]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80052ae:	430a      	orrs	r2, r1
 80052b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2280      	movs	r2, #128	@ 0x80
 80052b8:	4013      	ands	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80052bc:	4b07      	ldr	r3, [pc, #28]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80052be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052c0:	4a10      	ldr	r2, [pc, #64]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	0019      	movs	r1, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69da      	ldr	r2, [r3, #28]
 80052ca:	4b04      	ldr	r3, [pc, #16]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80052cc:	430a      	orrs	r2, r1
 80052ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	0018      	movs	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b006      	add	sp, #24
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	46c0      	nop			@ (mov r8, r8)
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40007000 	.word	0x40007000
 80052e4:	fffcffff 	.word	0xfffcffff
 80052e8:	fff7ffff 	.word	0xfff7ffff
 80052ec:	00001388 	.word	0x00001388
 80052f0:	ffcfffff 	.word	0xffcfffff
 80052f4:	efffffff 	.word	0xefffffff
 80052f8:	fffff3ff 	.word	0xfffff3ff
 80052fc:	ffffcfff 	.word	0xffffcfff
 8005300:	fbffffff 	.word	0xfbffffff
 8005304:	fff3ffff 	.word	0xfff3ffff

08005308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e032      	b.n	8005380 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2239      	movs	r2, #57	@ 0x39
 800531e:	5c9b      	ldrb	r3, [r3, r2]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d107      	bne.n	8005336 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2238      	movs	r2, #56	@ 0x38
 800532a:	2100      	movs	r1, #0
 800532c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	0018      	movs	r0, r3
 8005332:	f7fd fd1f 	bl	8002d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2239      	movs	r2, #57	@ 0x39
 800533a:	2102      	movs	r1, #2
 800533c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3304      	adds	r3, #4
 8005346:	0019      	movs	r1, r3
 8005348:	0010      	movs	r0, r2
 800534a:	f000 fa91 	bl	8005870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	223e      	movs	r2, #62	@ 0x3e
 8005352:	2101      	movs	r1, #1
 8005354:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	223a      	movs	r2, #58	@ 0x3a
 800535a:	2101      	movs	r1, #1
 800535c:	5499      	strb	r1, [r3, r2]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	223b      	movs	r2, #59	@ 0x3b
 8005362:	2101      	movs	r1, #1
 8005364:	5499      	strb	r1, [r3, r2]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	223c      	movs	r2, #60	@ 0x3c
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	223d      	movs	r2, #61	@ 0x3d
 8005372:	2101      	movs	r1, #1
 8005374:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2239      	movs	r2, #57	@ 0x39
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b002      	add	sp, #8
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e032      	b.n	8005400 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2239      	movs	r2, #57	@ 0x39
 800539e:	5c9b      	ldrb	r3, [r3, r2]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2238      	movs	r2, #56	@ 0x38
 80053aa:	2100      	movs	r1, #0
 80053ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f000 f829 	bl	8005408 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2239      	movs	r2, #57	@ 0x39
 80053ba:	2102      	movs	r1, #2
 80053bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3304      	adds	r3, #4
 80053c6:	0019      	movs	r1, r3
 80053c8:	0010      	movs	r0, r2
 80053ca:	f000 fa51 	bl	8005870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	223e      	movs	r2, #62	@ 0x3e
 80053d2:	2101      	movs	r1, #1
 80053d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	223a      	movs	r2, #58	@ 0x3a
 80053da:	2101      	movs	r1, #1
 80053dc:	5499      	strb	r1, [r3, r2]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	223b      	movs	r2, #59	@ 0x3b
 80053e2:	2101      	movs	r1, #1
 80053e4:	5499      	strb	r1, [r3, r2]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	223c      	movs	r2, #60	@ 0x3c
 80053ea:	2101      	movs	r1, #1
 80053ec:	5499      	strb	r1, [r3, r2]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	223d      	movs	r2, #61	@ 0x3d
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2239      	movs	r2, #57	@ 0x39
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	0018      	movs	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	b002      	add	sp, #8
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005410:	46c0      	nop			@ (mov r8, r8)
 8005412:	46bd      	mov	sp, r7
 8005414:	b002      	add	sp, #8
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d108      	bne.n	800543a <HAL_TIM_PWM_Start+0x22>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	223a      	movs	r2, #58	@ 0x3a
 800542c:	5c9b      	ldrb	r3, [r3, r2]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	1e5a      	subs	r2, r3, #1
 8005434:	4193      	sbcs	r3, r2
 8005436:	b2db      	uxtb	r3, r3
 8005438:	e01f      	b.n	800547a <HAL_TIM_PWM_Start+0x62>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d108      	bne.n	8005452 <HAL_TIM_PWM_Start+0x3a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	223b      	movs	r2, #59	@ 0x3b
 8005444:	5c9b      	ldrb	r3, [r3, r2]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	1e5a      	subs	r2, r3, #1
 800544c:	4193      	sbcs	r3, r2
 800544e:	b2db      	uxtb	r3, r3
 8005450:	e013      	b.n	800547a <HAL_TIM_PWM_Start+0x62>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d108      	bne.n	800546a <HAL_TIM_PWM_Start+0x52>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	223c      	movs	r2, #60	@ 0x3c
 800545c:	5c9b      	ldrb	r3, [r3, r2]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	1e5a      	subs	r2, r3, #1
 8005464:	4193      	sbcs	r3, r2
 8005466:	b2db      	uxtb	r3, r3
 8005468:	e007      	b.n	800547a <HAL_TIM_PWM_Start+0x62>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	223d      	movs	r2, #61	@ 0x3d
 800546e:	5c9b      	ldrb	r3, [r3, r2]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	1e5a      	subs	r2, r3, #1
 8005476:	4193      	sbcs	r3, r2
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e052      	b.n	8005528 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <HAL_TIM_PWM_Start+0x7a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	223a      	movs	r2, #58	@ 0x3a
 800548c:	2102      	movs	r1, #2
 800548e:	5499      	strb	r1, [r3, r2]
 8005490:	e013      	b.n	80054ba <HAL_TIM_PWM_Start+0xa2>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b04      	cmp	r3, #4
 8005496:	d104      	bne.n	80054a2 <HAL_TIM_PWM_Start+0x8a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	223b      	movs	r2, #59	@ 0x3b
 800549c:	2102      	movs	r1, #2
 800549e:	5499      	strb	r1, [r3, r2]
 80054a0:	e00b      	b.n	80054ba <HAL_TIM_PWM_Start+0xa2>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d104      	bne.n	80054b2 <HAL_TIM_PWM_Start+0x9a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	223c      	movs	r2, #60	@ 0x3c
 80054ac:	2102      	movs	r1, #2
 80054ae:	5499      	strb	r1, [r3, r2]
 80054b0:	e003      	b.n	80054ba <HAL_TIM_PWM_Start+0xa2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	223d      	movs	r2, #61	@ 0x3d
 80054b6:	2102      	movs	r1, #2
 80054b8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6839      	ldr	r1, [r7, #0]
 80054c0:	2201      	movs	r2, #1
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 fbd6 	bl	8005c74 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	2380      	movs	r3, #128	@ 0x80
 80054ce:	05db      	lsls	r3, r3, #23
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d00e      	beq.n	80054f2 <HAL_TIM_PWM_Start+0xda>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a15      	ldr	r2, [pc, #84]	@ (8005530 <HAL_TIM_PWM_Start+0x118>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_TIM_PWM_Start+0xda>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a14      	ldr	r2, [pc, #80]	@ (8005534 <HAL_TIM_PWM_Start+0x11c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_TIM_PWM_Start+0xda>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a12      	ldr	r2, [pc, #72]	@ (8005538 <HAL_TIM_PWM_Start+0x120>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d111      	bne.n	8005516 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2207      	movs	r2, #7
 80054fa:	4013      	ands	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b06      	cmp	r3, #6
 8005502:	d010      	beq.n	8005526 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2101      	movs	r1, #1
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005514:	e007      	b.n	8005526 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2101      	movs	r1, #1
 8005522:	430a      	orrs	r2, r1
 8005524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	0018      	movs	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	b004      	add	sp, #16
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40000400 	.word	0x40000400
 8005534:	40010800 	.word	0x40010800
 8005538:	40011400 	.word	0x40011400

0800553c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005548:	2317      	movs	r3, #23
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	2200      	movs	r2, #0
 800554e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2238      	movs	r2, #56	@ 0x38
 8005554:	5c9b      	ldrb	r3, [r3, r2]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_TIM_PWM_ConfigChannel+0x22>
 800555a:	2302      	movs	r3, #2
 800555c:	e0ad      	b.n	80056ba <HAL_TIM_PWM_ConfigChannel+0x17e>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2238      	movs	r2, #56	@ 0x38
 8005562:	2101      	movs	r1, #1
 8005564:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b0c      	cmp	r3, #12
 800556a:	d100      	bne.n	800556e <HAL_TIM_PWM_ConfigChannel+0x32>
 800556c:	e076      	b.n	800565c <HAL_TIM_PWM_ConfigChannel+0x120>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b0c      	cmp	r3, #12
 8005572:	d900      	bls.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005574:	e095      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d04e      	beq.n	800561a <HAL_TIM_PWM_ConfigChannel+0xde>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b08      	cmp	r3, #8
 8005580:	d900      	bls.n	8005584 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005582:	e08e      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x56>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b04      	cmp	r3, #4
 800558e:	d021      	beq.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005590:	e087      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	0011      	movs	r1, r2
 800559a:	0018      	movs	r0, r3
 800559c:	f000 f9cc 	bl	8005938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2108      	movs	r1, #8
 80055ac:	430a      	orrs	r2, r1
 80055ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2104      	movs	r1, #4
 80055bc:	438a      	bics	r2, r1
 80055be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	619a      	str	r2, [r3, #24]
      break;
 80055d2:	e06b      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	0011      	movs	r1, r2
 80055dc:	0018      	movs	r0, r3
 80055de:	f000 f9e7 	bl	80059b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699a      	ldr	r2, [r3, #24]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2180      	movs	r1, #128	@ 0x80
 80055ee:	0109      	lsls	r1, r1, #4
 80055f0:	430a      	orrs	r2, r1
 80055f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4931      	ldr	r1, [pc, #196]	@ (80056c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005600:	400a      	ands	r2, r1
 8005602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6999      	ldr	r1, [r3, #24]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	021a      	lsls	r2, r3, #8
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	619a      	str	r2, [r3, #24]
      break;
 8005618:	e048      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	0011      	movs	r1, r2
 8005622:	0018      	movs	r0, r3
 8005624:	f000 fa06 	bl	8005a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2108      	movs	r1, #8
 8005634:	430a      	orrs	r2, r1
 8005636:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2104      	movs	r1, #4
 8005644:	438a      	bics	r2, r1
 8005646:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69d9      	ldr	r1, [r3, #28]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	61da      	str	r2, [r3, #28]
      break;
 800565a:	e027      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	0011      	movs	r1, r2
 8005664:	0018      	movs	r0, r3
 8005666:	f000 fa25 	bl	8005ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2180      	movs	r1, #128	@ 0x80
 8005676:	0109      	lsls	r1, r1, #4
 8005678:	430a      	orrs	r2, r1
 800567a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69da      	ldr	r2, [r3, #28]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	490f      	ldr	r1, [pc, #60]	@ (80056c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005688:	400a      	ands	r2, r1
 800568a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69d9      	ldr	r1, [r3, #28]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	021a      	lsls	r2, r3, #8
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	61da      	str	r2, [r3, #28]
      break;
 80056a0:	e004      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80056a2:	2317      	movs	r3, #23
 80056a4:	18fb      	adds	r3, r7, r3
 80056a6:	2201      	movs	r2, #1
 80056a8:	701a      	strb	r2, [r3, #0]
      break;
 80056aa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2238      	movs	r2, #56	@ 0x38
 80056b0:	2100      	movs	r1, #0
 80056b2:	5499      	strb	r1, [r3, r2]

  return status;
 80056b4:	2317      	movs	r3, #23
 80056b6:	18fb      	adds	r3, r7, r3
 80056b8:	781b      	ldrb	r3, [r3, #0]
}
 80056ba:	0018      	movs	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	b006      	add	sp, #24
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	46c0      	nop			@ (mov r8, r8)
 80056c4:	fffffbff 	.word	0xfffffbff

080056c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d2:	230f      	movs	r3, #15
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2238      	movs	r2, #56	@ 0x38
 80056de:	5c9b      	ldrb	r3, [r3, r2]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_TIM_ConfigClockSource+0x20>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0bc      	b.n	8005862 <HAL_TIM_ConfigClockSource+0x19a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2238      	movs	r2, #56	@ 0x38
 80056ec:	2101      	movs	r1, #1
 80056ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2239      	movs	r2, #57	@ 0x39
 80056f4:	2102      	movs	r1, #2
 80056f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2277      	movs	r2, #119	@ 0x77
 8005704:	4393      	bics	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a58      	ldr	r2, [pc, #352]	@ (800586c <HAL_TIM_ConfigClockSource+0x1a4>)
 800570c:	4013      	ands	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2280      	movs	r2, #128	@ 0x80
 800571e:	0192      	lsls	r2, r2, #6
 8005720:	4293      	cmp	r3, r2
 8005722:	d040      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0xde>
 8005724:	2280      	movs	r2, #128	@ 0x80
 8005726:	0192      	lsls	r2, r2, #6
 8005728:	4293      	cmp	r3, r2
 800572a:	d900      	bls.n	800572e <HAL_TIM_ConfigClockSource+0x66>
 800572c:	e088      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 800572e:	2280      	movs	r2, #128	@ 0x80
 8005730:	0152      	lsls	r2, r2, #5
 8005732:	4293      	cmp	r3, r2
 8005734:	d100      	bne.n	8005738 <HAL_TIM_ConfigClockSource+0x70>
 8005736:	e088      	b.n	800584a <HAL_TIM_ConfigClockSource+0x182>
 8005738:	2280      	movs	r2, #128	@ 0x80
 800573a:	0152      	lsls	r2, r2, #5
 800573c:	4293      	cmp	r3, r2
 800573e:	d900      	bls.n	8005742 <HAL_TIM_ConfigClockSource+0x7a>
 8005740:	e07e      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 8005742:	2b70      	cmp	r3, #112	@ 0x70
 8005744:	d018      	beq.n	8005778 <HAL_TIM_ConfigClockSource+0xb0>
 8005746:	d900      	bls.n	800574a <HAL_TIM_ConfigClockSource+0x82>
 8005748:	e07a      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 800574a:	2b60      	cmp	r3, #96	@ 0x60
 800574c:	d04f      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x126>
 800574e:	d900      	bls.n	8005752 <HAL_TIM_ConfigClockSource+0x8a>
 8005750:	e076      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 8005752:	2b50      	cmp	r3, #80	@ 0x50
 8005754:	d03b      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x106>
 8005756:	d900      	bls.n	800575a <HAL_TIM_ConfigClockSource+0x92>
 8005758:	e072      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 800575a:	2b40      	cmp	r3, #64	@ 0x40
 800575c:	d057      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x146>
 800575e:	d900      	bls.n	8005762 <HAL_TIM_ConfigClockSource+0x9a>
 8005760:	e06e      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 8005762:	2b30      	cmp	r3, #48	@ 0x30
 8005764:	d063      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x166>
 8005766:	d86b      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 8005768:	2b20      	cmp	r3, #32
 800576a:	d060      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x166>
 800576c:	d868      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d05d      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x166>
 8005772:	2b10      	cmp	r3, #16
 8005774:	d05b      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x166>
 8005776:	e063      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005788:	f000 fa54 	bl	8005c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2277      	movs	r2, #119	@ 0x77
 8005798:	4313      	orrs	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]
      break;
 80057a4:	e052      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057b6:	f000 fa3d 	bl	8005c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2180      	movs	r1, #128	@ 0x80
 80057c6:	01c9      	lsls	r1, r1, #7
 80057c8:	430a      	orrs	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]
      break;
 80057cc:	e03e      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057da:	001a      	movs	r2, r3
 80057dc:	f000 f9b0 	bl	8005b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2150      	movs	r1, #80	@ 0x50
 80057e6:	0018      	movs	r0, r3
 80057e8:	f000 fa0a 	bl	8005c00 <TIM_ITRx_SetConfig>
      break;
 80057ec:	e02e      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057fa:	001a      	movs	r2, r3
 80057fc:	f000 f9ce 	bl	8005b9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2160      	movs	r1, #96	@ 0x60
 8005806:	0018      	movs	r0, r3
 8005808:	f000 f9fa 	bl	8005c00 <TIM_ITRx_SetConfig>
      break;
 800580c:	e01e      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800581a:	001a      	movs	r2, r3
 800581c:	f000 f990 	bl	8005b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2140      	movs	r1, #64	@ 0x40
 8005826:	0018      	movs	r0, r3
 8005828:	f000 f9ea 	bl	8005c00 <TIM_ITRx_SetConfig>
      break;
 800582c:	e00e      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	0019      	movs	r1, r3
 8005838:	0010      	movs	r0, r2
 800583a:	f000 f9e1 	bl	8005c00 <TIM_ITRx_SetConfig>
      break;
 800583e:	e005      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005840:	230f      	movs	r3, #15
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
      break;
 8005848:	e000      	b.n	800584c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800584a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2239      	movs	r2, #57	@ 0x39
 8005850:	2101      	movs	r1, #1
 8005852:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2238      	movs	r2, #56	@ 0x38
 8005858:	2100      	movs	r1, #0
 800585a:	5499      	strb	r1, [r3, r2]

  return status;
 800585c:	230f      	movs	r3, #15
 800585e:	18fb      	adds	r3, r7, r3
 8005860:	781b      	ldrb	r3, [r3, #0]
}
 8005862:	0018      	movs	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	b004      	add	sp, #16
 8005868:	bd80      	pop	{r7, pc}
 800586a:	46c0      	nop			@ (mov r8, r8)
 800586c:	ffff00ff 	.word	0xffff00ff

08005870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	2380      	movs	r3, #128	@ 0x80
 8005884:	05db      	lsls	r3, r3, #23
 8005886:	429a      	cmp	r2, r3
 8005888:	d00b      	beq.n	80058a2 <TIM_Base_SetConfig+0x32>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a26      	ldr	r2, [pc, #152]	@ (8005928 <TIM_Base_SetConfig+0xb8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d007      	beq.n	80058a2 <TIM_Base_SetConfig+0x32>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a25      	ldr	r2, [pc, #148]	@ (800592c <TIM_Base_SetConfig+0xbc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <TIM_Base_SetConfig+0x32>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a24      	ldr	r2, [pc, #144]	@ (8005930 <TIM_Base_SetConfig+0xc0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d108      	bne.n	80058b4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2270      	movs	r2, #112	@ 0x70
 80058a6:	4393      	bics	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	2380      	movs	r3, #128	@ 0x80
 80058b8:	05db      	lsls	r3, r3, #23
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d00b      	beq.n	80058d6 <TIM_Base_SetConfig+0x66>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a19      	ldr	r2, [pc, #100]	@ (8005928 <TIM_Base_SetConfig+0xb8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d007      	beq.n	80058d6 <TIM_Base_SetConfig+0x66>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a18      	ldr	r2, [pc, #96]	@ (800592c <TIM_Base_SetConfig+0xbc>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_Base_SetConfig+0x66>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a17      	ldr	r2, [pc, #92]	@ (8005930 <TIM_Base_SetConfig+0xc0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d108      	bne.n	80058e8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4a16      	ldr	r2, [pc, #88]	@ (8005934 <TIM_Base_SetConfig+0xc4>)
 80058da:	4013      	ands	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2280      	movs	r2, #128	@ 0x80
 80058ec:	4393      	bics	r3, r2
 80058ee:	001a      	movs	r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2204      	movs	r2, #4
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]
}
 8005920:	46c0      	nop			@ (mov r8, r8)
 8005922:	46bd      	mov	sp, r7
 8005924:	b004      	add	sp, #16
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40000400 	.word	0x40000400
 800592c:	40010800 	.word	0x40010800
 8005930:	40011400 	.word	0x40011400
 8005934:	fffffcff 	.word	0xfffffcff

08005938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	2201      	movs	r2, #1
 800594e:	4393      	bics	r3, r2
 8005950:	001a      	movs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2270      	movs	r2, #112	@ 0x70
 8005966:	4393      	bics	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2203      	movs	r2, #3
 800596e:	4393      	bics	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2202      	movs	r2, #2
 8005980:	4393      	bics	r3, r2
 8005982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	46c0      	nop			@ (mov r8, r8)
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b006      	add	sp, #24
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	2210      	movs	r2, #16
 80059c6:	4393      	bics	r3, r2
 80059c8:	001a      	movs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4a13      	ldr	r2, [pc, #76]	@ (8005a2c <TIM_OC2_SetConfig+0x7c>)
 80059de:	4013      	ands	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4a12      	ldr	r2, [pc, #72]	@ (8005a30 <TIM_OC2_SetConfig+0x80>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2220      	movs	r2, #32
 80059fa:	4393      	bics	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	621a      	str	r2, [r3, #32]
}
 8005a24:	46c0      	nop			@ (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b006      	add	sp, #24
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	ffff8fff 	.word	0xffff8fff
 8005a30:	fffffcff 	.word	0xfffffcff

08005a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	4a18      	ldr	r2, [pc, #96]	@ (8005aac <TIM_OC3_SetConfig+0x78>)
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2270      	movs	r2, #112	@ 0x70
 8005a60:	4393      	bics	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2203      	movs	r2, #3
 8005a68:	4393      	bics	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	4a0d      	ldr	r2, [pc, #52]	@ (8005ab0 <TIM_OC3_SetConfig+0x7c>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	621a      	str	r2, [r3, #32]
}
 8005aa4:	46c0      	nop			@ (mov r8, r8)
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	b006      	add	sp, #24
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	fffffeff 	.word	0xfffffeff
 8005ab0:	fffffdff 	.word	0xfffffdff

08005ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	4a19      	ldr	r2, [pc, #100]	@ (8005b30 <TIM_OC4_SetConfig+0x7c>)
 8005aca:	401a      	ands	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4a15      	ldr	r2, [pc, #84]	@ (8005b34 <TIM_OC4_SetConfig+0x80>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a14      	ldr	r2, [pc, #80]	@ (8005b38 <TIM_OC4_SetConfig+0x84>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4a10      	ldr	r2, [pc, #64]	@ (8005b3c <TIM_OC4_SetConfig+0x88>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	031b      	lsls	r3, r3, #12
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	b006      	add	sp, #24
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	46c0      	nop			@ (mov r8, r8)
 8005b30:	ffffefff 	.word	0xffffefff
 8005b34:	ffff8fff 	.word	0xffff8fff
 8005b38:	fffffcff 	.word	0xfffffcff
 8005b3c:	ffffdfff 	.word	0xffffdfff

08005b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	2201      	movs	r2, #1
 8005b58:	4393      	bics	r3, r2
 8005b5a:	001a      	movs	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	22f0      	movs	r2, #240	@ 0xf0
 8005b6a:	4393      	bics	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	220a      	movs	r2, #10
 8005b7c:	4393      	bics	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	621a      	str	r2, [r3, #32]
}
 8005b94:	46c0      	nop			@ (mov r8, r8)
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b006      	add	sp, #24
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	2210      	movs	r2, #16
 8005bb4:	4393      	bics	r3, r2
 8005bb6:	001a      	movs	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8005bfc <TIM_TI2_ConfigInputStage+0x60>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	031b      	lsls	r3, r3, #12
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	22a0      	movs	r2, #160	@ 0xa0
 8005bd8:	4393      	bics	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	46c0      	nop			@ (mov r8, r8)
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	b006      	add	sp, #24
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	46c0      	nop			@ (mov r8, r8)
 8005bfc:	ffff0fff 	.word	0xffff0fff

08005c00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2270      	movs	r2, #112	@ 0x70
 8005c14:	4393      	bics	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	2207      	movs	r2, #7
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	609a      	str	r2, [r3, #8]
}
 8005c2a:	46c0      	nop			@ (mov r8, r8)
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b004      	add	sp, #16
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	4a09      	ldr	r2, [pc, #36]	@ (8005c70 <TIM_ETR_SetConfig+0x3c>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	46c0      	nop			@ (mov r8, r8)
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	b006      	add	sp, #24
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	ffff00ff 	.word	0xffff00ff

08005c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	221f      	movs	r2, #31
 8005c84:	4013      	ands	r3, r2
 8005c86:	2201      	movs	r2, #1
 8005c88:	409a      	lsls	r2, r3
 8005c8a:	0013      	movs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	43d2      	mvns	r2, r2
 8005c96:	401a      	ands	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1a      	ldr	r2, [r3, #32]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	211f      	movs	r1, #31
 8005ca4:	400b      	ands	r3, r1
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4099      	lsls	r1, r3
 8005caa:	000b      	movs	r3, r1
 8005cac:	431a      	orrs	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	46c0      	nop			@ (mov r8, r8)
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b006      	add	sp, #24
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2238      	movs	r2, #56	@ 0x38
 8005cca:	5c9b      	ldrb	r3, [r3, r2]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e047      	b.n	8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2238      	movs	r2, #56	@ 0x38
 8005cd8:	2101      	movs	r1, #1
 8005cda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2239      	movs	r2, #57	@ 0x39
 8005ce0:	2102      	movs	r1, #2
 8005ce2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2270      	movs	r2, #112	@ 0x70
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	2380      	movs	r3, #128	@ 0x80
 8005d14:	05db      	lsls	r3, r3, #23
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d00e      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a13      	ldr	r2, [pc, #76]	@ (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d009      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a11      	ldr	r2, [pc, #68]	@ (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a10      	ldr	r2, [pc, #64]	@ (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d10c      	bne.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2280      	movs	r2, #128	@ 0x80
 8005d3c:	4393      	bics	r3, r2
 8005d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2239      	movs	r2, #57	@ 0x39
 8005d56:	2101      	movs	r1, #1
 8005d58:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2238      	movs	r2, #56	@ 0x38
 8005d5e:	2100      	movs	r1, #0
 8005d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	0018      	movs	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b004      	add	sp, #16
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40010800 	.word	0x40010800
 8005d74:	40011400 	.word	0x40011400

08005d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e044      	b.n	8005e14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d107      	bne.n	8005da2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2278      	movs	r2, #120	@ 0x78
 8005d96:	2100      	movs	r1, #0
 8005d98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f7fc ff61 	bl	8002c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2224      	movs	r2, #36	@ 0x24
 8005da6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2101      	movs	r1, #1
 8005db4:	438a      	bics	r2, r1
 8005db6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f000 fee0 	bl	8006b88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f000 fc3e 	bl	800664c <UART_SetConfig>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e01c      	b.n	8005e14 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	490d      	ldr	r1, [pc, #52]	@ (8005e1c <HAL_UART_Init+0xa4>)
 8005de6:	400a      	ands	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	212a      	movs	r1, #42	@ 0x2a
 8005df6:	438a      	bics	r2, r1
 8005df8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2101      	movs	r1, #1
 8005e06:	430a      	orrs	r2, r1
 8005e08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f000 ff6f 	bl	8006cf0 <UART_CheckIdleState>
 8005e12:	0003      	movs	r3, r0
}
 8005e14:	0018      	movs	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b002      	add	sp, #8
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	ffffb7ff 	.word	0xffffb7ff

08005e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	@ 0x28
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	1dbb      	adds	r3, r7, #6
 8005e2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d000      	beq.n	8005e3a <HAL_UART_Transmit+0x1a>
 8005e38:	e08c      	b.n	8005f54 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_UART_Transmit+0x28>
 8005e40:	1dbb      	adds	r3, r7, #6
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e084      	b.n	8005f56 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	2380      	movs	r3, #128	@ 0x80
 8005e52:	015b      	lsls	r3, r3, #5
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d109      	bne.n	8005e6c <HAL_UART_Transmit+0x4c>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d105      	bne.n	8005e6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2201      	movs	r2, #1
 8005e64:	4013      	ands	r3, r2
 8005e66:	d001      	beq.n	8005e6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e074      	b.n	8005f56 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2284      	movs	r2, #132	@ 0x84
 8005e70:	2100      	movs	r1, #0
 8005e72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2221      	movs	r2, #33	@ 0x21
 8005e78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e7a:	f7fd f8d3 	bl	8003024 <HAL_GetTick>
 8005e7e:	0003      	movs	r3, r0
 8005e80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1dba      	adds	r2, r7, #6
 8005e86:	2150      	movs	r1, #80	@ 0x50
 8005e88:	8812      	ldrh	r2, [r2, #0]
 8005e8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	1dba      	adds	r2, r7, #6
 8005e90:	2152      	movs	r1, #82	@ 0x52
 8005e92:	8812      	ldrh	r2, [r2, #0]
 8005e94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	2380      	movs	r3, #128	@ 0x80
 8005e9c:	015b      	lsls	r3, r3, #5
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d108      	bne.n	8005eb4 <HAL_UART_Transmit+0x94>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d104      	bne.n	8005eb4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	61bb      	str	r3, [r7, #24]
 8005eb2:	e003      	b.n	8005ebc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ebc:	e02f      	b.n	8005f1e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	0013      	movs	r3, r2
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2180      	movs	r1, #128	@ 0x80
 8005ecc:	f000 ffb8 	bl	8006e40 <UART_WaitOnFlagUntilTimeout>
 8005ed0:	1e03      	subs	r3, r0, #0
 8005ed2:	d004      	beq.n	8005ede <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e03b      	b.n	8005f56 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10b      	bne.n	8005efc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	001a      	movs	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	05d2      	lsls	r2, r2, #23
 8005ef0:	0dd2      	lsrs	r2, r2, #23
 8005ef2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	e007      	b.n	8005f0c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	781a      	ldrb	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2252      	movs	r2, #82	@ 0x52
 8005f10:	5a9b      	ldrh	r3, [r3, r2]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b299      	uxth	r1, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2252      	movs	r2, #82	@ 0x52
 8005f1c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2252      	movs	r2, #82	@ 0x52
 8005f22:	5a9b      	ldrh	r3, [r3, r2]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1c9      	bne.n	8005ebe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	0013      	movs	r3, r2
 8005f34:	2200      	movs	r2, #0
 8005f36:	2140      	movs	r1, #64	@ 0x40
 8005f38:	f000 ff82 	bl	8006e40 <UART_WaitOnFlagUntilTimeout>
 8005f3c:	1e03      	subs	r3, r0, #0
 8005f3e:	d004      	beq.n	8005f4a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2220      	movs	r2, #32
 8005f44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e005      	b.n	8005f56 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e000      	b.n	8005f56 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005f54:	2302      	movs	r3, #2
  }
}
 8005f56:	0018      	movs	r0, r3
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b008      	add	sp, #32
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	1dbb      	adds	r3, r7, #6
 8005f6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2280      	movs	r2, #128	@ 0x80
 8005f72:	589b      	ldr	r3, [r3, r2]
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d14a      	bne.n	800600e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_UART_Receive_IT+0x26>
 8005f7e:	1dbb      	adds	r3, r7, #6
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e042      	b.n	8006010 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	2380      	movs	r3, #128	@ 0x80
 8005f90:	015b      	lsls	r3, r3, #5
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d109      	bne.n	8005faa <HAL_UART_Receive_IT+0x4a>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d105      	bne.n	8005faa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d001      	beq.n	8005faa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e032      	b.n	8006010 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a18      	ldr	r2, [pc, #96]	@ (8006018 <HAL_UART_Receive_IT+0xb8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d020      	beq.n	8005ffc <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	2380      	movs	r3, #128	@ 0x80
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d019      	beq.n	8005ffc <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fcc:	613b      	str	r3, [r7, #16]
  return(result);
 8005fce:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f383 8810 	msr	PRIMASK, r3
}
 8005fdc:	46c0      	nop			@ (mov r8, r8)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2180      	movs	r1, #128	@ 0x80
 8005fea:	04c9      	lsls	r1, r1, #19
 8005fec:	430a      	orrs	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f383 8810 	msr	PRIMASK, r3
}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ffc:	1dbb      	adds	r3, r7, #6
 8005ffe:	881a      	ldrh	r2, [r3, #0]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	0018      	movs	r0, r3
 8006006:	f000 ff8b 	bl	8006f20 <UART_Start_Receive_IT>
 800600a:	0003      	movs	r3, r0
 800600c:	e000      	b.n	8006010 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800600e:	2302      	movs	r3, #2
  }
}
 8006010:	0018      	movs	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	b008      	add	sp, #32
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40004800 	.word	0x40004800

0800601c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b0ab      	sub	sp, #172	@ 0xac
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	22a4      	movs	r2, #164	@ 0xa4
 800602c:	18b9      	adds	r1, r7, r2
 800602e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	20a0      	movs	r0, #160	@ 0xa0
 8006038:	1839      	adds	r1, r7, r0
 800603a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	219c      	movs	r1, #156	@ 0x9c
 8006044:	1879      	adds	r1, r7, r1
 8006046:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006048:	0011      	movs	r1, r2
 800604a:	18bb      	adds	r3, r7, r2
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a99      	ldr	r2, [pc, #612]	@ (80062b4 <HAL_UART_IRQHandler+0x298>)
 8006050:	4013      	ands	r3, r2
 8006052:	2298      	movs	r2, #152	@ 0x98
 8006054:	18bc      	adds	r4, r7, r2
 8006056:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006058:	18bb      	adds	r3, r7, r2
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d114      	bne.n	800608a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006060:	187b      	adds	r3, r7, r1
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2220      	movs	r2, #32
 8006066:	4013      	ands	r3, r2
 8006068:	d00f      	beq.n	800608a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800606a:	183b      	adds	r3, r7, r0
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2220      	movs	r2, #32
 8006070:	4013      	ands	r3, r2
 8006072:	d00a      	beq.n	800608a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006078:	2b00      	cmp	r3, #0
 800607a:	d100      	bne.n	800607e <HAL_UART_IRQHandler+0x62>
 800607c:	e2be      	b.n	80065fc <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	0010      	movs	r0, r2
 8006086:	4798      	blx	r3
      }
      return;
 8006088:	e2b8      	b.n	80065fc <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800608a:	2398      	movs	r3, #152	@ 0x98
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d100      	bne.n	8006096 <HAL_UART_IRQHandler+0x7a>
 8006094:	e114      	b.n	80062c0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006096:	239c      	movs	r3, #156	@ 0x9c
 8006098:	18fb      	adds	r3, r7, r3
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2201      	movs	r2, #1
 800609e:	4013      	ands	r3, r2
 80060a0:	d106      	bne.n	80060b0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80060a2:	23a0      	movs	r3, #160	@ 0xa0
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a83      	ldr	r2, [pc, #524]	@ (80062b8 <HAL_UART_IRQHandler+0x29c>)
 80060aa:	4013      	ands	r3, r2
 80060ac:	d100      	bne.n	80060b0 <HAL_UART_IRQHandler+0x94>
 80060ae:	e107      	b.n	80062c0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060b0:	23a4      	movs	r3, #164	@ 0xa4
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2201      	movs	r2, #1
 80060b8:	4013      	ands	r3, r2
 80060ba:	d012      	beq.n	80060e2 <HAL_UART_IRQHandler+0xc6>
 80060bc:	23a0      	movs	r3, #160	@ 0xa0
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	2380      	movs	r3, #128	@ 0x80
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	4013      	ands	r3, r2
 80060c8:	d00b      	beq.n	80060e2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2201      	movs	r2, #1
 80060d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2284      	movs	r2, #132	@ 0x84
 80060d6:	589b      	ldr	r3, [r3, r2]
 80060d8:	2201      	movs	r2, #1
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2184      	movs	r1, #132	@ 0x84
 80060e0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060e2:	23a4      	movs	r3, #164	@ 0xa4
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2202      	movs	r2, #2
 80060ea:	4013      	ands	r3, r2
 80060ec:	d011      	beq.n	8006112 <HAL_UART_IRQHandler+0xf6>
 80060ee:	239c      	movs	r3, #156	@ 0x9c
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2201      	movs	r2, #1
 80060f6:	4013      	ands	r3, r2
 80060f8:	d00b      	beq.n	8006112 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2202      	movs	r2, #2
 8006100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2284      	movs	r2, #132	@ 0x84
 8006106:	589b      	ldr	r3, [r3, r2]
 8006108:	2204      	movs	r2, #4
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2184      	movs	r1, #132	@ 0x84
 8006110:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006112:	23a4      	movs	r3, #164	@ 0xa4
 8006114:	18fb      	adds	r3, r7, r3
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2204      	movs	r2, #4
 800611a:	4013      	ands	r3, r2
 800611c:	d011      	beq.n	8006142 <HAL_UART_IRQHandler+0x126>
 800611e:	239c      	movs	r3, #156	@ 0x9c
 8006120:	18fb      	adds	r3, r7, r3
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2201      	movs	r2, #1
 8006126:	4013      	ands	r3, r2
 8006128:	d00b      	beq.n	8006142 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2204      	movs	r2, #4
 8006130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2284      	movs	r2, #132	@ 0x84
 8006136:	589b      	ldr	r3, [r3, r2]
 8006138:	2202      	movs	r2, #2
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2184      	movs	r1, #132	@ 0x84
 8006140:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006142:	23a4      	movs	r3, #164	@ 0xa4
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2208      	movs	r2, #8
 800614a:	4013      	ands	r3, r2
 800614c:	d017      	beq.n	800617e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800614e:	23a0      	movs	r3, #160	@ 0xa0
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2220      	movs	r2, #32
 8006156:	4013      	ands	r3, r2
 8006158:	d105      	bne.n	8006166 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800615a:	239c      	movs	r3, #156	@ 0x9c
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2201      	movs	r2, #1
 8006162:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006164:	d00b      	beq.n	800617e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2208      	movs	r2, #8
 800616c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2284      	movs	r2, #132	@ 0x84
 8006172:	589b      	ldr	r3, [r3, r2]
 8006174:	2208      	movs	r2, #8
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2184      	movs	r1, #132	@ 0x84
 800617c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800617e:	23a4      	movs	r3, #164	@ 0xa4
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	2380      	movs	r3, #128	@ 0x80
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	4013      	ands	r3, r2
 800618a:	d013      	beq.n	80061b4 <HAL_UART_IRQHandler+0x198>
 800618c:	23a0      	movs	r3, #160	@ 0xa0
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	2380      	movs	r3, #128	@ 0x80
 8006194:	04db      	lsls	r3, r3, #19
 8006196:	4013      	ands	r3, r2
 8006198:	d00c      	beq.n	80061b4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2280      	movs	r2, #128	@ 0x80
 80061a0:	0112      	lsls	r2, r2, #4
 80061a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2284      	movs	r2, #132	@ 0x84
 80061a8:	589b      	ldr	r3, [r3, r2]
 80061aa:	2220      	movs	r2, #32
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2184      	movs	r1, #132	@ 0x84
 80061b2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2284      	movs	r2, #132	@ 0x84
 80061b8:	589b      	ldr	r3, [r3, r2]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d100      	bne.n	80061c0 <HAL_UART_IRQHandler+0x1a4>
 80061be:	e21f      	b.n	8006600 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061c0:	23a4      	movs	r3, #164	@ 0xa4
 80061c2:	18fb      	adds	r3, r7, r3
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2220      	movs	r2, #32
 80061c8:	4013      	ands	r3, r2
 80061ca:	d00e      	beq.n	80061ea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061cc:	23a0      	movs	r3, #160	@ 0xa0
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2220      	movs	r2, #32
 80061d4:	4013      	ands	r3, r2
 80061d6:	d008      	beq.n	80061ea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	0010      	movs	r0, r2
 80061e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2284      	movs	r2, #132	@ 0x84
 80061ee:	589b      	ldr	r3, [r3, r2]
 80061f0:	2194      	movs	r1, #148	@ 0x94
 80061f2:	187a      	adds	r2, r7, r1
 80061f4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2240      	movs	r2, #64	@ 0x40
 80061fe:	4013      	ands	r3, r2
 8006200:	2b40      	cmp	r3, #64	@ 0x40
 8006202:	d004      	beq.n	800620e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006204:	187b      	adds	r3, r7, r1
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2228      	movs	r2, #40	@ 0x28
 800620a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800620c:	d047      	beq.n	800629e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	0018      	movs	r0, r3
 8006212:	f000 ff4f 	bl	80070b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2240      	movs	r2, #64	@ 0x40
 800621e:	4013      	ands	r3, r2
 8006220:	2b40      	cmp	r3, #64	@ 0x40
 8006222:	d137      	bne.n	8006294 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006224:	f3ef 8310 	mrs	r3, PRIMASK
 8006228:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800622a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800622c:	2090      	movs	r0, #144	@ 0x90
 800622e:	183a      	adds	r2, r7, r0
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	2301      	movs	r3, #1
 8006234:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006238:	f383 8810 	msr	PRIMASK, r3
}
 800623c:	46c0      	nop			@ (mov r8, r8)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2140      	movs	r1, #64	@ 0x40
 800624a:	438a      	bics	r2, r1
 800624c:	609a      	str	r2, [r3, #8]
 800624e:	183b      	adds	r3, r7, r0
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006254:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006256:	f383 8810 	msr	PRIMASK, r3
}
 800625a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006260:	2b00      	cmp	r3, #0
 8006262:	d012      	beq.n	800628a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006268:	4a14      	ldr	r2, [pc, #80]	@ (80062bc <HAL_UART_IRQHandler+0x2a0>)
 800626a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006270:	0018      	movs	r0, r3
 8006272:	f7fd fd8f 	bl	8003d94 <HAL_DMA_Abort_IT>
 8006276:	1e03      	subs	r3, r0, #0
 8006278:	d01a      	beq.n	80062b0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800627e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006284:	0018      	movs	r0, r3
 8006286:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	e012      	b.n	80062b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	0018      	movs	r0, r3
 800628e:	f000 f9d5 	bl	800663c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006292:	e00d      	b.n	80062b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	0018      	movs	r0, r3
 8006298:	f000 f9d0 	bl	800663c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629c:	e008      	b.n	80062b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	0018      	movs	r0, r3
 80062a2:	f000 f9cb 	bl	800663c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2284      	movs	r2, #132	@ 0x84
 80062aa:	2100      	movs	r1, #0
 80062ac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80062ae:	e1a7      	b.n	8006600 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b0:	46c0      	nop			@ (mov r8, r8)
    return;
 80062b2:	e1a5      	b.n	8006600 <HAL_UART_IRQHandler+0x5e4>
 80062b4:	0000080f 	.word	0x0000080f
 80062b8:	04000120 	.word	0x04000120
 80062bc:	0800717d 	.word	0x0800717d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d000      	beq.n	80062ca <HAL_UART_IRQHandler+0x2ae>
 80062c8:	e159      	b.n	800657e <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062ca:	23a4      	movs	r3, #164	@ 0xa4
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2210      	movs	r2, #16
 80062d2:	4013      	ands	r3, r2
 80062d4:	d100      	bne.n	80062d8 <HAL_UART_IRQHandler+0x2bc>
 80062d6:	e152      	b.n	800657e <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062d8:	23a0      	movs	r3, #160	@ 0xa0
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2210      	movs	r2, #16
 80062e0:	4013      	ands	r3, r2
 80062e2:	d100      	bne.n	80062e6 <HAL_UART_IRQHandler+0x2ca>
 80062e4:	e14b      	b.n	800657e <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2210      	movs	r2, #16
 80062ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2240      	movs	r2, #64	@ 0x40
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b40      	cmp	r3, #64	@ 0x40
 80062fa:	d000      	beq.n	80062fe <HAL_UART_IRQHandler+0x2e2>
 80062fc:	e0bf      	b.n	800647e <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	217e      	movs	r1, #126	@ 0x7e
 8006308:	187b      	adds	r3, r7, r1
 800630a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800630c:	187b      	adds	r3, r7, r1
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d100      	bne.n	8006316 <HAL_UART_IRQHandler+0x2fa>
 8006314:	e095      	b.n	8006442 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2258      	movs	r2, #88	@ 0x58
 800631a:	5a9b      	ldrh	r3, [r3, r2]
 800631c:	187a      	adds	r2, r7, r1
 800631e:	8812      	ldrh	r2, [r2, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d300      	bcc.n	8006326 <HAL_UART_IRQHandler+0x30a>
 8006324:	e08d      	b.n	8006442 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	187a      	adds	r2, r7, r1
 800632a:	215a      	movs	r1, #90	@ 0x5a
 800632c:	8812      	ldrh	r2, [r2, #0]
 800632e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2220      	movs	r2, #32
 800633a:	4013      	ands	r3, r2
 800633c:	d16f      	bne.n	800641e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800633e:	f3ef 8310 	mrs	r3, PRIMASK
 8006342:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006346:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006348:	2301      	movs	r3, #1
 800634a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800634c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800634e:	f383 8810 	msr	PRIMASK, r3
}
 8006352:	46c0      	nop			@ (mov r8, r8)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	49ad      	ldr	r1, [pc, #692]	@ (8006614 <HAL_UART_IRQHandler+0x5f8>)
 8006360:	400a      	ands	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006366:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	f383 8810 	msr	PRIMASK, r3
}
 800636e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006370:	f3ef 8310 	mrs	r3, PRIMASK
 8006374:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006378:	677b      	str	r3, [r7, #116]	@ 0x74
 800637a:	2301      	movs	r3, #1
 800637c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006380:	f383 8810 	msr	PRIMASK, r3
}
 8006384:	46c0      	nop			@ (mov r8, r8)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2101      	movs	r1, #1
 8006392:	438a      	bics	r2, r1
 8006394:	609a      	str	r2, [r3, #8]
 8006396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006398:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800639c:	f383 8810 	msr	PRIMASK, r3
}
 80063a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a2:	f3ef 8310 	mrs	r3, PRIMASK
 80063a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80063a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80063ac:	2301      	movs	r3, #1
 80063ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063b2:	f383 8810 	msr	PRIMASK, r3
}
 80063b6:	46c0      	nop			@ (mov r8, r8)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2140      	movs	r1, #64	@ 0x40
 80063c4:	438a      	bics	r2, r1
 80063c6:	609a      	str	r2, [r3, #8]
 80063c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063ca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063ce:	f383 8810 	msr	PRIMASK, r3
}
 80063d2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2280      	movs	r2, #128	@ 0x80
 80063d8:	2120      	movs	r1, #32
 80063da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063e2:	f3ef 8310 	mrs	r3, PRIMASK
 80063e6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80063e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063ec:	2301      	movs	r3, #1
 80063ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063f2:	f383 8810 	msr	PRIMASK, r3
}
 80063f6:	46c0      	nop			@ (mov r8, r8)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2110      	movs	r1, #16
 8006404:	438a      	bics	r2, r1
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800640a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800640c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800640e:	f383 8810 	msr	PRIMASK, r3
}
 8006412:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006418:	0018      	movs	r0, r3
 800641a:	f7fd fc7b 	bl	8003d14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2202      	movs	r2, #2
 8006422:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2258      	movs	r2, #88	@ 0x58
 8006428:	5a9a      	ldrh	r2, [r3, r2]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	215a      	movs	r1, #90	@ 0x5a
 800642e:	5a5b      	ldrh	r3, [r3, r1]
 8006430:	b29b      	uxth	r3, r3
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	0011      	movs	r1, r2
 800643a:	0018      	movs	r0, r3
 800643c:	f7fb fa50 	bl	80018e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006440:	e0e0      	b.n	8006604 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2258      	movs	r2, #88	@ 0x58
 8006446:	5a9b      	ldrh	r3, [r3, r2]
 8006448:	227e      	movs	r2, #126	@ 0x7e
 800644a:	18ba      	adds	r2, r7, r2
 800644c:	8812      	ldrh	r2, [r2, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d000      	beq.n	8006454 <HAL_UART_IRQHandler+0x438>
 8006452:	e0d7      	b.n	8006604 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2220      	movs	r2, #32
 800645e:	4013      	ands	r3, r2
 8006460:	2b20      	cmp	r3, #32
 8006462:	d000      	beq.n	8006466 <HAL_UART_IRQHandler+0x44a>
 8006464:	e0ce      	b.n	8006604 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2258      	movs	r2, #88	@ 0x58
 8006470:	5a9a      	ldrh	r2, [r3, r2]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	0011      	movs	r1, r2
 8006476:	0018      	movs	r0, r3
 8006478:	f7fb fa32 	bl	80018e0 <HAL_UARTEx_RxEventCallback>
      return;
 800647c:	e0c2      	b.n	8006604 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2258      	movs	r2, #88	@ 0x58
 8006482:	5a99      	ldrh	r1, [r3, r2]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	225a      	movs	r2, #90	@ 0x5a
 8006488:	5a9b      	ldrh	r3, [r3, r2]
 800648a:	b29a      	uxth	r2, r3
 800648c:	208e      	movs	r0, #142	@ 0x8e
 800648e:	183b      	adds	r3, r7, r0
 8006490:	1a8a      	subs	r2, r1, r2
 8006492:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	225a      	movs	r2, #90	@ 0x5a
 8006498:	5a9b      	ldrh	r3, [r3, r2]
 800649a:	b29b      	uxth	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d100      	bne.n	80064a2 <HAL_UART_IRQHandler+0x486>
 80064a0:	e0b2      	b.n	8006608 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 80064a2:	183b      	adds	r3, r7, r0
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d100      	bne.n	80064ac <HAL_UART_IRQHandler+0x490>
 80064aa:	e0ad      	b.n	8006608 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ac:	f3ef 8310 	mrs	r3, PRIMASK
 80064b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80064b2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b4:	2488      	movs	r4, #136	@ 0x88
 80064b6:	193a      	adds	r2, r7, r4
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	2301      	movs	r3, #1
 80064bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f383 8810 	msr	PRIMASK, r3
}
 80064c4:	46c0      	nop			@ (mov r8, r8)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4951      	ldr	r1, [pc, #324]	@ (8006618 <HAL_UART_IRQHandler+0x5fc>)
 80064d2:	400a      	ands	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	193b      	adds	r3, r7, r4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f383 8810 	msr	PRIMASK, r3
}
 80064e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e4:	f3ef 8310 	mrs	r3, PRIMASK
 80064e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80064ea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ec:	2484      	movs	r4, #132	@ 0x84
 80064ee:	193a      	adds	r2, r7, r4
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	2301      	movs	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f383 8810 	msr	PRIMASK, r3
}
 80064fc:	46c0      	nop			@ (mov r8, r8)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2101      	movs	r1, #1
 800650a:	438a      	bics	r2, r1
 800650c:	609a      	str	r2, [r3, #8]
 800650e:	193b      	adds	r3, r7, r4
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	f383 8810 	msr	PRIMASK, r3
}
 800651a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2280      	movs	r2, #128	@ 0x80
 8006520:	2120      	movs	r1, #32
 8006522:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006530:	f3ef 8310 	mrs	r3, PRIMASK
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006538:	2480      	movs	r4, #128	@ 0x80
 800653a:	193a      	adds	r2, r7, r4
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	2301      	movs	r3, #1
 8006540:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006544:	f383 8810 	msr	PRIMASK, r3
}
 8006548:	46c0      	nop			@ (mov r8, r8)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2110      	movs	r1, #16
 8006556:	438a      	bics	r2, r1
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	193b      	adds	r3, r7, r4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006562:	f383 8810 	msr	PRIMASK, r3
}
 8006566:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800656e:	183b      	adds	r3, r7, r0
 8006570:	881a      	ldrh	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	0011      	movs	r1, r2
 8006576:	0018      	movs	r0, r3
 8006578:	f7fb f9b2 	bl	80018e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800657c:	e044      	b.n	8006608 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800657e:	23a4      	movs	r3, #164	@ 0xa4
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	2380      	movs	r3, #128	@ 0x80
 8006586:	035b      	lsls	r3, r3, #13
 8006588:	4013      	ands	r3, r2
 800658a:	d010      	beq.n	80065ae <HAL_UART_IRQHandler+0x592>
 800658c:	239c      	movs	r3, #156	@ 0x9c
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	2380      	movs	r3, #128	@ 0x80
 8006594:	03db      	lsls	r3, r3, #15
 8006596:	4013      	ands	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2280      	movs	r2, #128	@ 0x80
 80065a0:	0352      	lsls	r2, r2, #13
 80065a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	0018      	movs	r0, r3
 80065a8:	f000 ffea 	bl	8007580 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065ac:	e02f      	b.n	800660e <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065ae:	23a4      	movs	r3, #164	@ 0xa4
 80065b0:	18fb      	adds	r3, r7, r3
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2280      	movs	r2, #128	@ 0x80
 80065b6:	4013      	ands	r3, r2
 80065b8:	d00f      	beq.n	80065da <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065ba:	23a0      	movs	r3, #160	@ 0xa0
 80065bc:	18fb      	adds	r3, r7, r3
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2280      	movs	r2, #128	@ 0x80
 80065c2:	4013      	ands	r3, r2
 80065c4:	d009      	beq.n	80065da <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d01e      	beq.n	800660c <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	0010      	movs	r0, r2
 80065d6:	4798      	blx	r3
    }
    return;
 80065d8:	e018      	b.n	800660c <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065da:	23a4      	movs	r3, #164	@ 0xa4
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2240      	movs	r2, #64	@ 0x40
 80065e2:	4013      	ands	r3, r2
 80065e4:	d013      	beq.n	800660e <HAL_UART_IRQHandler+0x5f2>
 80065e6:	23a0      	movs	r3, #160	@ 0xa0
 80065e8:	18fb      	adds	r3, r7, r3
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2240      	movs	r2, #64	@ 0x40
 80065ee:	4013      	ands	r3, r2
 80065f0:	d00d      	beq.n	800660e <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	0018      	movs	r0, r3
 80065f6:	f000 fdd4 	bl	80071a2 <UART_EndTransmit_IT>
    return;
 80065fa:	e008      	b.n	800660e <HAL_UART_IRQHandler+0x5f2>
      return;
 80065fc:	46c0      	nop			@ (mov r8, r8)
 80065fe:	e006      	b.n	800660e <HAL_UART_IRQHandler+0x5f2>
    return;
 8006600:	46c0      	nop			@ (mov r8, r8)
 8006602:	e004      	b.n	800660e <HAL_UART_IRQHandler+0x5f2>
      return;
 8006604:	46c0      	nop			@ (mov r8, r8)
 8006606:	e002      	b.n	800660e <HAL_UART_IRQHandler+0x5f2>
      return;
 8006608:	46c0      	nop			@ (mov r8, r8)
 800660a:	e000      	b.n	800660e <HAL_UART_IRQHandler+0x5f2>
    return;
 800660c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800660e:	46bd      	mov	sp, r7
 8006610:	b02b      	add	sp, #172	@ 0xac
 8006612:	bd90      	pop	{r4, r7, pc}
 8006614:	fffffeff 	.word	0xfffffeff
 8006618:	fffffedf 	.word	0xfffffedf

0800661c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006624:	46c0      	nop			@ (mov r8, r8)
 8006626:	46bd      	mov	sp, r7
 8006628:	b002      	add	sp, #8
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006634:	46c0      	nop			@ (mov r8, r8)
 8006636:	46bd      	mov	sp, r7
 8006638:	b002      	add	sp, #8
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006644:	46c0      	nop			@ (mov r8, r8)
 8006646:	46bd      	mov	sp, r7
 8006648:	b002      	add	sp, #8
 800664a:	bd80      	pop	{r7, pc}

0800664c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800664c:	b5b0      	push	{r4, r5, r7, lr}
 800664e:	b08e      	sub	sp, #56	@ 0x38
 8006650:	af00      	add	r7, sp, #0
 8006652:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006654:	231a      	movs	r3, #26
 8006656:	2218      	movs	r2, #24
 8006658:	189b      	adds	r3, r3, r2
 800665a:	19db      	adds	r3, r3, r7
 800665c:	2200      	movs	r2, #0
 800665e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	431a      	orrs	r2, r3
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	431a      	orrs	r2, r3
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	4313      	orrs	r3, r2
 8006676:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4ac3      	ldr	r2, [pc, #780]	@ (800698c <UART_SetConfig+0x340>)
 8006680:	4013      	ands	r3, r2
 8006682:	0019      	movs	r1, r3
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800668a:	430a      	orrs	r2, r1
 800668c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	4abe      	ldr	r2, [pc, #760]	@ (8006990 <UART_SetConfig+0x344>)
 8006696:	4013      	ands	r3, r2
 8006698:	0019      	movs	r1, r3
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4ab8      	ldr	r2, [pc, #736]	@ (8006994 <UART_SetConfig+0x348>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d004      	beq.n	80066c0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066bc:	4313      	orrs	r3, r2
 80066be:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	4ab4      	ldr	r2, [pc, #720]	@ (8006998 <UART_SetConfig+0x34c>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	0019      	movs	r1, r3
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066d2:	430a      	orrs	r2, r1
 80066d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4ab0      	ldr	r2, [pc, #704]	@ (800699c <UART_SetConfig+0x350>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d131      	bne.n	8006744 <UART_SetConfig+0xf8>
 80066e0:	4baf      	ldr	r3, [pc, #700]	@ (80069a0 <UART_SetConfig+0x354>)
 80066e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e4:	2203      	movs	r2, #3
 80066e6:	4013      	ands	r3, r2
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d01d      	beq.n	8006728 <UART_SetConfig+0xdc>
 80066ec:	d823      	bhi.n	8006736 <UART_SetConfig+0xea>
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d00c      	beq.n	800670c <UART_SetConfig+0xc0>
 80066f2:	d820      	bhi.n	8006736 <UART_SetConfig+0xea>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <UART_SetConfig+0xb2>
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d00e      	beq.n	800671a <UART_SetConfig+0xce>
 80066fc:	e01b      	b.n	8006736 <UART_SetConfig+0xea>
 80066fe:	231b      	movs	r3, #27
 8006700:	2218      	movs	r2, #24
 8006702:	189b      	adds	r3, r3, r2
 8006704:	19db      	adds	r3, r3, r7
 8006706:	2201      	movs	r2, #1
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	e0b4      	b.n	8006876 <UART_SetConfig+0x22a>
 800670c:	231b      	movs	r3, #27
 800670e:	2218      	movs	r2, #24
 8006710:	189b      	adds	r3, r3, r2
 8006712:	19db      	adds	r3, r3, r7
 8006714:	2202      	movs	r2, #2
 8006716:	701a      	strb	r2, [r3, #0]
 8006718:	e0ad      	b.n	8006876 <UART_SetConfig+0x22a>
 800671a:	231b      	movs	r3, #27
 800671c:	2218      	movs	r2, #24
 800671e:	189b      	adds	r3, r3, r2
 8006720:	19db      	adds	r3, r3, r7
 8006722:	2204      	movs	r2, #4
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	e0a6      	b.n	8006876 <UART_SetConfig+0x22a>
 8006728:	231b      	movs	r3, #27
 800672a:	2218      	movs	r2, #24
 800672c:	189b      	adds	r3, r3, r2
 800672e:	19db      	adds	r3, r3, r7
 8006730:	2208      	movs	r2, #8
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	e09f      	b.n	8006876 <UART_SetConfig+0x22a>
 8006736:	231b      	movs	r3, #27
 8006738:	2218      	movs	r2, #24
 800673a:	189b      	adds	r3, r3, r2
 800673c:	19db      	adds	r3, r3, r7
 800673e:	2210      	movs	r2, #16
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	e098      	b.n	8006876 <UART_SetConfig+0x22a>
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a96      	ldr	r2, [pc, #600]	@ (80069a4 <UART_SetConfig+0x358>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d131      	bne.n	80067b2 <UART_SetConfig+0x166>
 800674e:	4b94      	ldr	r3, [pc, #592]	@ (80069a0 <UART_SetConfig+0x354>)
 8006750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006752:	220c      	movs	r2, #12
 8006754:	4013      	ands	r3, r2
 8006756:	2b0c      	cmp	r3, #12
 8006758:	d01d      	beq.n	8006796 <UART_SetConfig+0x14a>
 800675a:	d823      	bhi.n	80067a4 <UART_SetConfig+0x158>
 800675c:	2b08      	cmp	r3, #8
 800675e:	d00c      	beq.n	800677a <UART_SetConfig+0x12e>
 8006760:	d820      	bhi.n	80067a4 <UART_SetConfig+0x158>
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <UART_SetConfig+0x120>
 8006766:	2b04      	cmp	r3, #4
 8006768:	d00e      	beq.n	8006788 <UART_SetConfig+0x13c>
 800676a:	e01b      	b.n	80067a4 <UART_SetConfig+0x158>
 800676c:	231b      	movs	r3, #27
 800676e:	2218      	movs	r2, #24
 8006770:	189b      	adds	r3, r3, r2
 8006772:	19db      	adds	r3, r3, r7
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	e07d      	b.n	8006876 <UART_SetConfig+0x22a>
 800677a:	231b      	movs	r3, #27
 800677c:	2218      	movs	r2, #24
 800677e:	189b      	adds	r3, r3, r2
 8006780:	19db      	adds	r3, r3, r7
 8006782:	2202      	movs	r2, #2
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	e076      	b.n	8006876 <UART_SetConfig+0x22a>
 8006788:	231b      	movs	r3, #27
 800678a:	2218      	movs	r2, #24
 800678c:	189b      	adds	r3, r3, r2
 800678e:	19db      	adds	r3, r3, r7
 8006790:	2204      	movs	r2, #4
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	e06f      	b.n	8006876 <UART_SetConfig+0x22a>
 8006796:	231b      	movs	r3, #27
 8006798:	2218      	movs	r2, #24
 800679a:	189b      	adds	r3, r3, r2
 800679c:	19db      	adds	r3, r3, r7
 800679e:	2208      	movs	r2, #8
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	e068      	b.n	8006876 <UART_SetConfig+0x22a>
 80067a4:	231b      	movs	r3, #27
 80067a6:	2218      	movs	r2, #24
 80067a8:	189b      	adds	r3, r3, r2
 80067aa:	19db      	adds	r3, r3, r7
 80067ac:	2210      	movs	r2, #16
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	e061      	b.n	8006876 <UART_SetConfig+0x22a>
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a7c      	ldr	r2, [pc, #496]	@ (80069a8 <UART_SetConfig+0x35c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d106      	bne.n	80067ca <UART_SetConfig+0x17e>
 80067bc:	231b      	movs	r3, #27
 80067be:	2218      	movs	r2, #24
 80067c0:	189b      	adds	r3, r3, r2
 80067c2:	19db      	adds	r3, r3, r7
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e055      	b.n	8006876 <UART_SetConfig+0x22a>
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a77      	ldr	r2, [pc, #476]	@ (80069ac <UART_SetConfig+0x360>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d106      	bne.n	80067e2 <UART_SetConfig+0x196>
 80067d4:	231b      	movs	r3, #27
 80067d6:	2218      	movs	r2, #24
 80067d8:	189b      	adds	r3, r3, r2
 80067da:	19db      	adds	r3, r3, r7
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	e049      	b.n	8006876 <UART_SetConfig+0x22a>
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a6b      	ldr	r2, [pc, #428]	@ (8006994 <UART_SetConfig+0x348>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d13e      	bne.n	800686a <UART_SetConfig+0x21e>
 80067ec:	4b6c      	ldr	r3, [pc, #432]	@ (80069a0 <UART_SetConfig+0x354>)
 80067ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067f0:	23c0      	movs	r3, #192	@ 0xc0
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	4013      	ands	r3, r2
 80067f6:	22c0      	movs	r2, #192	@ 0xc0
 80067f8:	0112      	lsls	r2, r2, #4
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d027      	beq.n	800684e <UART_SetConfig+0x202>
 80067fe:	22c0      	movs	r2, #192	@ 0xc0
 8006800:	0112      	lsls	r2, r2, #4
 8006802:	4293      	cmp	r3, r2
 8006804:	d82a      	bhi.n	800685c <UART_SetConfig+0x210>
 8006806:	2280      	movs	r2, #128	@ 0x80
 8006808:	0112      	lsls	r2, r2, #4
 800680a:	4293      	cmp	r3, r2
 800680c:	d011      	beq.n	8006832 <UART_SetConfig+0x1e6>
 800680e:	2280      	movs	r2, #128	@ 0x80
 8006810:	0112      	lsls	r2, r2, #4
 8006812:	4293      	cmp	r3, r2
 8006814:	d822      	bhi.n	800685c <UART_SetConfig+0x210>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <UART_SetConfig+0x1d8>
 800681a:	2280      	movs	r2, #128	@ 0x80
 800681c:	00d2      	lsls	r2, r2, #3
 800681e:	4293      	cmp	r3, r2
 8006820:	d00e      	beq.n	8006840 <UART_SetConfig+0x1f4>
 8006822:	e01b      	b.n	800685c <UART_SetConfig+0x210>
 8006824:	231b      	movs	r3, #27
 8006826:	2218      	movs	r2, #24
 8006828:	189b      	adds	r3, r3, r2
 800682a:	19db      	adds	r3, r3, r7
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	e021      	b.n	8006876 <UART_SetConfig+0x22a>
 8006832:	231b      	movs	r3, #27
 8006834:	2218      	movs	r2, #24
 8006836:	189b      	adds	r3, r3, r2
 8006838:	19db      	adds	r3, r3, r7
 800683a:	2202      	movs	r2, #2
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	e01a      	b.n	8006876 <UART_SetConfig+0x22a>
 8006840:	231b      	movs	r3, #27
 8006842:	2218      	movs	r2, #24
 8006844:	189b      	adds	r3, r3, r2
 8006846:	19db      	adds	r3, r3, r7
 8006848:	2204      	movs	r2, #4
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e013      	b.n	8006876 <UART_SetConfig+0x22a>
 800684e:	231b      	movs	r3, #27
 8006850:	2218      	movs	r2, #24
 8006852:	189b      	adds	r3, r3, r2
 8006854:	19db      	adds	r3, r3, r7
 8006856:	2208      	movs	r2, #8
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	e00c      	b.n	8006876 <UART_SetConfig+0x22a>
 800685c:	231b      	movs	r3, #27
 800685e:	2218      	movs	r2, #24
 8006860:	189b      	adds	r3, r3, r2
 8006862:	19db      	adds	r3, r3, r7
 8006864:	2210      	movs	r2, #16
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	e005      	b.n	8006876 <UART_SetConfig+0x22a>
 800686a:	231b      	movs	r3, #27
 800686c:	2218      	movs	r2, #24
 800686e:	189b      	adds	r3, r3, r2
 8006870:	19db      	adds	r3, r3, r7
 8006872:	2210      	movs	r2, #16
 8006874:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a46      	ldr	r2, [pc, #280]	@ (8006994 <UART_SetConfig+0x348>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d000      	beq.n	8006882 <UART_SetConfig+0x236>
 8006880:	e09a      	b.n	80069b8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006882:	231b      	movs	r3, #27
 8006884:	2218      	movs	r2, #24
 8006886:	189b      	adds	r3, r3, r2
 8006888:	19db      	adds	r3, r3, r7
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b08      	cmp	r3, #8
 800688e:	d01d      	beq.n	80068cc <UART_SetConfig+0x280>
 8006890:	dc20      	bgt.n	80068d4 <UART_SetConfig+0x288>
 8006892:	2b04      	cmp	r3, #4
 8006894:	d015      	beq.n	80068c2 <UART_SetConfig+0x276>
 8006896:	dc1d      	bgt.n	80068d4 <UART_SetConfig+0x288>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <UART_SetConfig+0x256>
 800689c:	2b02      	cmp	r3, #2
 800689e:	d005      	beq.n	80068ac <UART_SetConfig+0x260>
 80068a0:	e018      	b.n	80068d4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a2:	f7fe fba9 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 80068a6:	0003      	movs	r3, r0
 80068a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068aa:	e01c      	b.n	80068e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ac:	4b3c      	ldr	r3, [pc, #240]	@ (80069a0 <UART_SetConfig+0x354>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2210      	movs	r2, #16
 80068b2:	4013      	ands	r3, r2
 80068b4:	d002      	beq.n	80068bc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80068b6:	4b3e      	ldr	r3, [pc, #248]	@ (80069b0 <UART_SetConfig+0x364>)
 80068b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068ba:	e014      	b.n	80068e6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80068bc:	4b3d      	ldr	r3, [pc, #244]	@ (80069b4 <UART_SetConfig+0x368>)
 80068be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068c0:	e011      	b.n	80068e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068c2:	f7fe fb09 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 80068c6:	0003      	movs	r3, r0
 80068c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068ca:	e00c      	b.n	80068e6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068cc:	2380      	movs	r3, #128	@ 0x80
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068d2:	e008      	b.n	80068e6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80068d8:	231a      	movs	r3, #26
 80068da:	2218      	movs	r2, #24
 80068dc:	189b      	adds	r3, r3, r2
 80068de:	19db      	adds	r3, r3, r7
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
        break;
 80068e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d100      	bne.n	80068ee <UART_SetConfig+0x2a2>
 80068ec:	e133      	b.n	8006b56 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	0013      	movs	r3, r2
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	189b      	adds	r3, r3, r2
 80068f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d305      	bcc.n	800690a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006906:	429a      	cmp	r2, r3
 8006908:	d906      	bls.n	8006918 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800690a:	231a      	movs	r3, #26
 800690c:	2218      	movs	r2, #24
 800690e:	189b      	adds	r3, r3, r2
 8006910:	19db      	adds	r3, r3, r7
 8006912:	2201      	movs	r2, #1
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	e11e      	b.n	8006b56 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	2300      	movs	r3, #0
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	6939      	ldr	r1, [r7, #16]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	000b      	movs	r3, r1
 8006926:	0e1b      	lsrs	r3, r3, #24
 8006928:	0010      	movs	r0, r2
 800692a:	0205      	lsls	r5, r0, #8
 800692c:	431d      	orrs	r5, r3
 800692e:	000b      	movs	r3, r1
 8006930:	021c      	lsls	r4, r3, #8
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	60bb      	str	r3, [r7, #8]
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	68b8      	ldr	r0, [r7, #8]
 8006940:	68f9      	ldr	r1, [r7, #12]
 8006942:	1900      	adds	r0, r0, r4
 8006944:	4169      	adcs	r1, r5
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	603b      	str	r3, [r7, #0]
 800694c:	2300      	movs	r3, #0
 800694e:	607b      	str	r3, [r7, #4]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f7f9 fc6c 	bl	8000230 <__aeabi_uldivmod>
 8006958:	0002      	movs	r2, r0
 800695a:	000b      	movs	r3, r1
 800695c:	0013      	movs	r3, r2
 800695e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006962:	23c0      	movs	r3, #192	@ 0xc0
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	429a      	cmp	r2, r3
 8006968:	d309      	bcc.n	800697e <UART_SetConfig+0x332>
 800696a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800696c:	2380      	movs	r3, #128	@ 0x80
 800696e:	035b      	lsls	r3, r3, #13
 8006970:	429a      	cmp	r2, r3
 8006972:	d204      	bcs.n	800697e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800697a:	60da      	str	r2, [r3, #12]
 800697c:	e0eb      	b.n	8006b56 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800697e:	231a      	movs	r3, #26
 8006980:	2218      	movs	r2, #24
 8006982:	189b      	adds	r3, r3, r2
 8006984:	19db      	adds	r3, r3, r7
 8006986:	2201      	movs	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	e0e4      	b.n	8006b56 <UART_SetConfig+0x50a>
 800698c:	efff69f3 	.word	0xefff69f3
 8006990:	ffffcfff 	.word	0xffffcfff
 8006994:	40004800 	.word	0x40004800
 8006998:	fffff4ff 	.word	0xfffff4ff
 800699c:	40013800 	.word	0x40013800
 80069a0:	40021000 	.word	0x40021000
 80069a4:	40004400 	.word	0x40004400
 80069a8:	40004c00 	.word	0x40004c00
 80069ac:	40005000 	.word	0x40005000
 80069b0:	003d0900 	.word	0x003d0900
 80069b4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	69da      	ldr	r2, [r3, #28]
 80069bc:	2380      	movs	r3, #128	@ 0x80
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d000      	beq.n	80069c6 <UART_SetConfig+0x37a>
 80069c4:	e070      	b.n	8006aa8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80069c6:	231b      	movs	r3, #27
 80069c8:	2218      	movs	r2, #24
 80069ca:	189b      	adds	r3, r3, r2
 80069cc:	19db      	adds	r3, r3, r7
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d822      	bhi.n	8006a1a <UART_SetConfig+0x3ce>
 80069d4:	009a      	lsls	r2, r3, #2
 80069d6:	4b67      	ldr	r3, [pc, #412]	@ (8006b74 <UART_SetConfig+0x528>)
 80069d8:	18d3      	adds	r3, r2, r3
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069de:	f7fe fb0b 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 80069e2:	0003      	movs	r3, r0
 80069e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069e6:	e021      	b.n	8006a2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069e8:	f7fe fb1c 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 80069ec:	0003      	movs	r3, r0
 80069ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069f0:	e01c      	b.n	8006a2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069f2:	4b61      	ldr	r3, [pc, #388]	@ (8006b78 <UART_SetConfig+0x52c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2210      	movs	r2, #16
 80069f8:	4013      	ands	r3, r2
 80069fa:	d002      	beq.n	8006a02 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80069fc:	4b5f      	ldr	r3, [pc, #380]	@ (8006b7c <UART_SetConfig+0x530>)
 80069fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a00:	e014      	b.n	8006a2c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006a02:	4b5f      	ldr	r3, [pc, #380]	@ (8006b80 <UART_SetConfig+0x534>)
 8006a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a06:	e011      	b.n	8006a2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a08:	f7fe fa66 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8006a0c:	0003      	movs	r3, r0
 8006a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a10:	e00c      	b.n	8006a2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a12:	2380      	movs	r3, #128	@ 0x80
 8006a14:	021b      	lsls	r3, r3, #8
 8006a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a18:	e008      	b.n	8006a2c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006a1e:	231a      	movs	r3, #26
 8006a20:	2218      	movs	r2, #24
 8006a22:	189b      	adds	r3, r3, r2
 8006a24:	19db      	adds	r3, r3, r7
 8006a26:	2201      	movs	r2, #1
 8006a28:	701a      	strb	r2, [r3, #0]
        break;
 8006a2a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d100      	bne.n	8006a34 <UART_SetConfig+0x3e8>
 8006a32:	e090      	b.n	8006b56 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a36:	005a      	lsls	r2, r3, #1
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	085b      	lsrs	r3, r3, #1
 8006a3e:	18d2      	adds	r2, r2, r3
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	0019      	movs	r1, r3
 8006a46:	0010      	movs	r0, r2
 8006a48:	f7f9 fb66 	bl	8000118 <__udivsi3>
 8006a4c:	0003      	movs	r3, r0
 8006a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a52:	2b0f      	cmp	r3, #15
 8006a54:	d921      	bls.n	8006a9a <UART_SetConfig+0x44e>
 8006a56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a58:	2380      	movs	r3, #128	@ 0x80
 8006a5a:	025b      	lsls	r3, r3, #9
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d21c      	bcs.n	8006a9a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	200e      	movs	r0, #14
 8006a66:	2418      	movs	r4, #24
 8006a68:	1903      	adds	r3, r0, r4
 8006a6a:	19db      	adds	r3, r3, r7
 8006a6c:	210f      	movs	r1, #15
 8006a6e:	438a      	bics	r2, r1
 8006a70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2207      	movs	r2, #7
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	b299      	uxth	r1, r3
 8006a7e:	1903      	adds	r3, r0, r4
 8006a80:	19db      	adds	r3, r3, r7
 8006a82:	1902      	adds	r2, r0, r4
 8006a84:	19d2      	adds	r2, r2, r7
 8006a86:	8812      	ldrh	r2, [r2, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	1902      	adds	r2, r0, r4
 8006a92:	19d2      	adds	r2, r2, r7
 8006a94:	8812      	ldrh	r2, [r2, #0]
 8006a96:	60da      	str	r2, [r3, #12]
 8006a98:	e05d      	b.n	8006b56 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006a9a:	231a      	movs	r3, #26
 8006a9c:	2218      	movs	r2, #24
 8006a9e:	189b      	adds	r3, r3, r2
 8006aa0:	19db      	adds	r3, r3, r7
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e056      	b.n	8006b56 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aa8:	231b      	movs	r3, #27
 8006aaa:	2218      	movs	r2, #24
 8006aac:	189b      	adds	r3, r3, r2
 8006aae:	19db      	adds	r3, r3, r7
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d822      	bhi.n	8006afc <UART_SetConfig+0x4b0>
 8006ab6:	009a      	lsls	r2, r3, #2
 8006ab8:	4b32      	ldr	r3, [pc, #200]	@ (8006b84 <UART_SetConfig+0x538>)
 8006aba:	18d3      	adds	r3, r2, r3
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac0:	f7fe fa9a 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8006ac4:	0003      	movs	r3, r0
 8006ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006ac8:	e021      	b.n	8006b0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aca:	f7fe faab 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8006ace:	0003      	movs	r3, r0
 8006ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006ad2:	e01c      	b.n	8006b0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ad4:	4b28      	ldr	r3, [pc, #160]	@ (8006b78 <UART_SetConfig+0x52c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2210      	movs	r2, #16
 8006ada:	4013      	ands	r3, r2
 8006adc:	d002      	beq.n	8006ae4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006ade:	4b27      	ldr	r3, [pc, #156]	@ (8006b7c <UART_SetConfig+0x530>)
 8006ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ae2:	e014      	b.n	8006b0e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006ae4:	4b26      	ldr	r3, [pc, #152]	@ (8006b80 <UART_SetConfig+0x534>)
 8006ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006ae8:	e011      	b.n	8006b0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aea:	f7fe f9f5 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8006aee:	0003      	movs	r3, r0
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006af2:	e00c      	b.n	8006b0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006af4:	2380      	movs	r3, #128	@ 0x80
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006afa:	e008      	b.n	8006b0e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006b00:	231a      	movs	r3, #26
 8006b02:	2218      	movs	r2, #24
 8006b04:	189b      	adds	r3, r3, r2
 8006b06:	19db      	adds	r3, r3, r7
 8006b08:	2201      	movs	r2, #1
 8006b0a:	701a      	strb	r2, [r3, #0]
        break;
 8006b0c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d020      	beq.n	8006b56 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	085a      	lsrs	r2, r3, #1
 8006b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1c:	18d2      	adds	r2, r2, r3
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	0019      	movs	r1, r3
 8006b24:	0010      	movs	r0, r2
 8006b26:	f7f9 faf7 	bl	8000118 <__udivsi3>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b30:	2b0f      	cmp	r3, #15
 8006b32:	d90a      	bls.n	8006b4a <UART_SetConfig+0x4fe>
 8006b34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b36:	2380      	movs	r3, #128	@ 0x80
 8006b38:	025b      	lsls	r3, r3, #9
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d205      	bcs.n	8006b4a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60da      	str	r2, [r3, #12]
 8006b48:	e005      	b.n	8006b56 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006b4a:	231a      	movs	r3, #26
 8006b4c:	2218      	movs	r2, #24
 8006b4e:	189b      	adds	r3, r3, r2
 8006b50:	19db      	adds	r3, r3, r7
 8006b52:	2201      	movs	r2, #1
 8006b54:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b62:	231a      	movs	r3, #26
 8006b64:	2218      	movs	r2, #24
 8006b66:	189b      	adds	r3, r3, r2
 8006b68:	19db      	adds	r3, r3, r7
 8006b6a:	781b      	ldrb	r3, [r3, #0]
}
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	b00e      	add	sp, #56	@ 0x38
 8006b72:	bdb0      	pop	{r4, r5, r7, pc}
 8006b74:	08008df4 	.word	0x08008df4
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	003d0900 	.word	0x003d0900
 8006b80:	00f42400 	.word	0x00f42400
 8006b84:	08008e18 	.word	0x08008e18

08006b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b94:	2208      	movs	r2, #8
 8006b96:	4013      	ands	r3, r2
 8006b98:	d00b      	beq.n	8006bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8006ccc <UART_AdvFeatureConfig+0x144>)
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	0019      	movs	r1, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d00b      	beq.n	8006bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4a43      	ldr	r2, [pc, #268]	@ (8006cd0 <UART_AdvFeatureConfig+0x148>)
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	0019      	movs	r1, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd8:	2202      	movs	r2, #2
 8006bda:	4013      	ands	r3, r2
 8006bdc:	d00b      	beq.n	8006bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	4a3b      	ldr	r2, [pc, #236]	@ (8006cd4 <UART_AdvFeatureConfig+0x14c>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	0019      	movs	r1, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	d00b      	beq.n	8006c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	4a34      	ldr	r2, [pc, #208]	@ (8006cd8 <UART_AdvFeatureConfig+0x150>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	0019      	movs	r1, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d00b      	beq.n	8006c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4a2c      	ldr	r2, [pc, #176]	@ (8006cdc <UART_AdvFeatureConfig+0x154>)
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	0019      	movs	r1, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3e:	2220      	movs	r2, #32
 8006c40:	4013      	ands	r3, r2
 8006c42:	d00b      	beq.n	8006c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	4a25      	ldr	r2, [pc, #148]	@ (8006ce0 <UART_AdvFeatureConfig+0x158>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	0019      	movs	r1, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	2240      	movs	r2, #64	@ 0x40
 8006c62:	4013      	ands	r3, r2
 8006c64:	d01d      	beq.n	8006ca2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce4 <UART_AdvFeatureConfig+0x15c>)
 8006c6e:	4013      	ands	r3, r2
 8006c70:	0019      	movs	r1, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c82:	2380      	movs	r3, #128	@ 0x80
 8006c84:	035b      	lsls	r3, r3, #13
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d10b      	bne.n	8006ca2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4a15      	ldr	r2, [pc, #84]	@ (8006ce8 <UART_AdvFeatureConfig+0x160>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	0019      	movs	r1, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca6:	2280      	movs	r2, #128	@ 0x80
 8006ca8:	4013      	ands	r3, r2
 8006caa:	d00b      	beq.n	8006cc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8006cec <UART_AdvFeatureConfig+0x164>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	0019      	movs	r1, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	605a      	str	r2, [r3, #4]
  }
}
 8006cc4:	46c0      	nop			@ (mov r8, r8)
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b002      	add	sp, #8
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	ffff7fff 	.word	0xffff7fff
 8006cd0:	fffdffff 	.word	0xfffdffff
 8006cd4:	fffeffff 	.word	0xfffeffff
 8006cd8:	fffbffff 	.word	0xfffbffff
 8006cdc:	ffffefff 	.word	0xffffefff
 8006ce0:	ffffdfff 	.word	0xffffdfff
 8006ce4:	ffefffff 	.word	0xffefffff
 8006ce8:	ff9fffff 	.word	0xff9fffff
 8006cec:	fff7ffff 	.word	0xfff7ffff

08006cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b092      	sub	sp, #72	@ 0x48
 8006cf4:	af02      	add	r7, sp, #8
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2284      	movs	r2, #132	@ 0x84
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d00:	f7fc f990 	bl	8003024 <HAL_GetTick>
 8006d04:	0003      	movs	r3, r0
 8006d06:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2208      	movs	r2, #8
 8006d10:	4013      	ands	r3, r2
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d12c      	bne.n	8006d70 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d18:	2280      	movs	r2, #128	@ 0x80
 8006d1a:	0391      	lsls	r1, r2, #14
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	4a46      	ldr	r2, [pc, #280]	@ (8006e38 <UART_CheckIdleState+0x148>)
 8006d20:	9200      	str	r2, [sp, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f000 f88c 	bl	8006e40 <UART_WaitOnFlagUntilTimeout>
 8006d28:	1e03      	subs	r3, r0, #0
 8006d2a:	d021      	beq.n	8006d70 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d30:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d36:	2301      	movs	r3, #1
 8006d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3c:	f383 8810 	msr	PRIMASK, r3
}
 8006d40:	46c0      	nop			@ (mov r8, r8)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2180      	movs	r1, #128	@ 0x80
 8006d4e:	438a      	bics	r2, r1
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	f383 8810 	msr	PRIMASK, r3
}
 8006d5c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2220      	movs	r2, #32
 8006d62:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2278      	movs	r2, #120	@ 0x78
 8006d68:	2100      	movs	r1, #0
 8006d6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e05f      	b.n	8006e30 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2204      	movs	r2, #4
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d146      	bne.n	8006e0c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d80:	2280      	movs	r2, #128	@ 0x80
 8006d82:	03d1      	lsls	r1, r2, #15
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4a2c      	ldr	r2, [pc, #176]	@ (8006e38 <UART_CheckIdleState+0x148>)
 8006d88:	9200      	str	r2, [sp, #0]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f000 f858 	bl	8006e40 <UART_WaitOnFlagUntilTimeout>
 8006d90:	1e03      	subs	r3, r0, #0
 8006d92:	d03b      	beq.n	8006e0c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d94:	f3ef 8310 	mrs	r3, PRIMASK
 8006d98:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9e:	2301      	movs	r3, #1
 8006da0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f383 8810 	msr	PRIMASK, r3
}
 8006da8:	46c0      	nop			@ (mov r8, r8)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4921      	ldr	r1, [pc, #132]	@ (8006e3c <UART_CheckIdleState+0x14c>)
 8006db6:	400a      	ands	r2, r1
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f383 8810 	msr	PRIMASK, r3
}
 8006dc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dca:	61bb      	str	r3, [r7, #24]
  return(result);
 8006dcc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f383 8810 	msr	PRIMASK, r3
}
 8006dda:	46c0      	nop			@ (mov r8, r8)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2101      	movs	r1, #1
 8006de8:	438a      	bics	r2, r1
 8006dea:	609a      	str	r2, [r3, #8]
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	f383 8810 	msr	PRIMASK, r3
}
 8006df6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2280      	movs	r2, #128	@ 0x80
 8006dfc:	2120      	movs	r1, #32
 8006dfe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2278      	movs	r2, #120	@ 0x78
 8006e04:	2100      	movs	r1, #0
 8006e06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e011      	b.n	8006e30 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2280      	movs	r2, #128	@ 0x80
 8006e16:	2120      	movs	r1, #32
 8006e18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2278      	movs	r2, #120	@ 0x78
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	0018      	movs	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b010      	add	sp, #64	@ 0x40
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	01ffffff 	.word	0x01ffffff
 8006e3c:	fffffedf 	.word	0xfffffedf

08006e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	1dfb      	adds	r3, r7, #7
 8006e4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e50:	e051      	b.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	3301      	adds	r3, #1
 8006e56:	d04e      	beq.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e58:	f7fc f8e4 	bl	8003024 <HAL_GetTick>
 8006e5c:	0002      	movs	r2, r0
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d302      	bcc.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e051      	b.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2204      	movs	r2, #4
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	d03b      	beq.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b80      	cmp	r3, #128	@ 0x80
 8006e82:	d038      	beq.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b40      	cmp	r3, #64	@ 0x40
 8006e88:	d035      	beq.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	2208      	movs	r2, #8
 8006e92:	4013      	ands	r3, r2
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d111      	bne.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f000 f906 	bl	80070b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2284      	movs	r2, #132	@ 0x84
 8006eac:	2108      	movs	r1, #8
 8006eae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2278      	movs	r2, #120	@ 0x78
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e02c      	b.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69da      	ldr	r2, [r3, #28]
 8006ec2:	2380      	movs	r3, #128	@ 0x80
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	401a      	ands	r2, r3
 8006ec8:	2380      	movs	r3, #128	@ 0x80
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d112      	bne.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2280      	movs	r2, #128	@ 0x80
 8006ed6:	0112      	lsls	r2, r2, #4
 8006ed8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	0018      	movs	r0, r3
 8006ede:	f000 f8e9 	bl	80070b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2284      	movs	r2, #132	@ 0x84
 8006ee6:	2120      	movs	r1, #32
 8006ee8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2278      	movs	r2, #120	@ 0x78
 8006eee:	2100      	movs	r1, #0
 8006ef0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e00f      	b.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	4013      	ands	r3, r2
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	425a      	negs	r2, r3
 8006f06:	4153      	adcs	r3, r2
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	001a      	movs	r2, r3
 8006f0c:	1dfb      	adds	r3, r7, #7
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d09e      	beq.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	0018      	movs	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b004      	add	sp, #16
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b090      	sub	sp, #64	@ 0x40
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	1dbb      	adds	r3, r7, #6
 8006f2c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	1dba      	adds	r2, r7, #6
 8006f38:	2158      	movs	r1, #88	@ 0x58
 8006f3a:	8812      	ldrh	r2, [r2, #0]
 8006f3c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	1dba      	adds	r2, r7, #6
 8006f42:	215a      	movs	r1, #90	@ 0x5a
 8006f44:	8812      	ldrh	r2, [r2, #0]
 8006f46:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	2380      	movs	r3, #128	@ 0x80
 8006f54:	015b      	lsls	r3, r3, #5
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d10d      	bne.n	8006f76 <UART_Start_Receive_IT+0x56>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <UART_Start_Receive_IT+0x4c>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	225c      	movs	r2, #92	@ 0x5c
 8006f66:	4950      	ldr	r1, [pc, #320]	@ (80070a8 <UART_Start_Receive_IT+0x188>)
 8006f68:	5299      	strh	r1, [r3, r2]
 8006f6a:	e02e      	b.n	8006fca <UART_Start_Receive_IT+0xaa>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	225c      	movs	r2, #92	@ 0x5c
 8006f70:	21ff      	movs	r1, #255	@ 0xff
 8006f72:	5299      	strh	r1, [r3, r2]
 8006f74:	e029      	b.n	8006fca <UART_Start_Receive_IT+0xaa>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10d      	bne.n	8006f9a <UART_Start_Receive_IT+0x7a>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d104      	bne.n	8006f90 <UART_Start_Receive_IT+0x70>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	225c      	movs	r2, #92	@ 0x5c
 8006f8a:	21ff      	movs	r1, #255	@ 0xff
 8006f8c:	5299      	strh	r1, [r3, r2]
 8006f8e:	e01c      	b.n	8006fca <UART_Start_Receive_IT+0xaa>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	225c      	movs	r2, #92	@ 0x5c
 8006f94:	217f      	movs	r1, #127	@ 0x7f
 8006f96:	5299      	strh	r1, [r3, r2]
 8006f98:	e017      	b.n	8006fca <UART_Start_Receive_IT+0xaa>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	2380      	movs	r3, #128	@ 0x80
 8006fa0:	055b      	lsls	r3, r3, #21
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d10d      	bne.n	8006fc2 <UART_Start_Receive_IT+0xa2>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <UART_Start_Receive_IT+0x98>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	225c      	movs	r2, #92	@ 0x5c
 8006fb2:	217f      	movs	r1, #127	@ 0x7f
 8006fb4:	5299      	strh	r1, [r3, r2]
 8006fb6:	e008      	b.n	8006fca <UART_Start_Receive_IT+0xaa>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	225c      	movs	r2, #92	@ 0x5c
 8006fbc:	213f      	movs	r1, #63	@ 0x3f
 8006fbe:	5299      	strh	r1, [r3, r2]
 8006fc0:	e003      	b.n	8006fca <UART_Start_Receive_IT+0xaa>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	225c      	movs	r2, #92	@ 0x5c
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2284      	movs	r2, #132	@ 0x84
 8006fce:	2100      	movs	r1, #0
 8006fd0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2280      	movs	r2, #128	@ 0x80
 8006fd6:	2122      	movs	r1, #34	@ 0x22
 8006fd8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fda:	f3ef 8310 	mrs	r3, PRIMASK
 8006fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8006fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fea:	f383 8810 	msr	PRIMASK, r3
}
 8006fee:	46c0      	nop			@ (mov r8, r8)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	609a      	str	r2, [r3, #8]
 8007000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007002:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	f383 8810 	msr	PRIMASK, r3
}
 800700a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	2380      	movs	r3, #128	@ 0x80
 8007012:	015b      	lsls	r3, r3, #5
 8007014:	429a      	cmp	r2, r3
 8007016:	d107      	bne.n	8007028 <UART_Start_Receive_IT+0x108>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d103      	bne.n	8007028 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a22      	ldr	r2, [pc, #136]	@ (80070ac <UART_Start_Receive_IT+0x18c>)
 8007024:	669a      	str	r2, [r3, #104]	@ 0x68
 8007026:	e002      	b.n	800702e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4a21      	ldr	r2, [pc, #132]	@ (80070b0 <UART_Start_Receive_IT+0x190>)
 800702c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d019      	beq.n	800706a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007036:	f3ef 8310 	mrs	r3, PRIMASK
 800703a:	61fb      	str	r3, [r7, #28]
  return(result);
 800703c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007040:	2301      	movs	r3, #1
 8007042:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	f383 8810 	msr	PRIMASK, r3
}
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2190      	movs	r1, #144	@ 0x90
 8007058:	0049      	lsls	r1, r1, #1
 800705a:	430a      	orrs	r2, r1
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	f383 8810 	msr	PRIMASK, r3
}
 8007068:	e018      	b.n	800709c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706a:	f3ef 8310 	mrs	r3, PRIMASK
 800706e:	613b      	str	r3, [r7, #16]
  return(result);
 8007070:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007072:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007074:	2301      	movs	r3, #1
 8007076:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f383 8810 	msr	PRIMASK, r3
}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2120      	movs	r1, #32
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007092:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	f383 8810 	msr	PRIMASK, r3
}
 800709a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	0018      	movs	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	b010      	add	sp, #64	@ 0x40
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	46c0      	nop			@ (mov r8, r8)
 80070a8:	000001ff 	.word	0x000001ff
 80070ac:	080073bd 	.word	0x080073bd
 80070b0:	080071f9 	.word	0x080071f9

080070b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08e      	sub	sp, #56	@ 0x38
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070bc:	f3ef 8310 	mrs	r3, PRIMASK
 80070c0:	617b      	str	r3, [r7, #20]
  return(result);
 80070c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c6:	2301      	movs	r3, #1
 80070c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	f383 8810 	msr	PRIMASK, r3
}
 80070d0:	46c0      	nop			@ (mov r8, r8)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4926      	ldr	r1, [pc, #152]	@ (8007178 <UART_EndRxTransfer+0xc4>)
 80070de:	400a      	ands	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f383 8810 	msr	PRIMASK, r3
}
 80070ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ee:	f3ef 8310 	mrs	r3, PRIMASK
 80070f2:	623b      	str	r3, [r7, #32]
  return(result);
 80070f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80070f8:	2301      	movs	r3, #1
 80070fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fe:	f383 8810 	msr	PRIMASK, r3
}
 8007102:	46c0      	nop			@ (mov r8, r8)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2101      	movs	r1, #1
 8007110:	438a      	bics	r2, r1
 8007112:	609a      	str	r2, [r3, #8]
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711a:	f383 8810 	msr	PRIMASK, r3
}
 800711e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007124:	2b01      	cmp	r3, #1
 8007126:	d118      	bne.n	800715a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007128:	f3ef 8310 	mrs	r3, PRIMASK
 800712c:	60bb      	str	r3, [r7, #8]
  return(result);
 800712e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007132:	2301      	movs	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f383 8810 	msr	PRIMASK, r3
}
 800713c:	46c0      	nop			@ (mov r8, r8)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2110      	movs	r1, #16
 800714a:	438a      	bics	r2, r1
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f383 8810 	msr	PRIMASK, r3
}
 8007158:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2280      	movs	r2, #128	@ 0x80
 800715e:	2120      	movs	r1, #32
 8007160:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800716e:	46c0      	nop			@ (mov r8, r8)
 8007170:	46bd      	mov	sp, r7
 8007172:	b00e      	add	sp, #56	@ 0x38
 8007174:	bd80      	pop	{r7, pc}
 8007176:	46c0      	nop			@ (mov r8, r8)
 8007178:	fffffedf 	.word	0xfffffedf

0800717c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	225a      	movs	r2, #90	@ 0x5a
 800718e:	2100      	movs	r1, #0
 8007190:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	0018      	movs	r0, r3
 8007196:	f7ff fa51 	bl	800663c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800719a:	46c0      	nop			@ (mov r8, r8)
 800719c:	46bd      	mov	sp, r7
 800719e:	b004      	add	sp, #16
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b086      	sub	sp, #24
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071aa:	f3ef 8310 	mrs	r3, PRIMASK
 80071ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80071b0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	2301      	movs	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f383 8810 	msr	PRIMASK, r3
}
 80071be:	46c0      	nop			@ (mov r8, r8)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2140      	movs	r1, #64	@ 0x40
 80071cc:	438a      	bics	r2, r1
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f383 8810 	msr	PRIMASK, r3
}
 80071da:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	0018      	movs	r0, r3
 80071ec:	f7ff fa16 	bl	800661c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f0:	46c0      	nop			@ (mov r8, r8)
 80071f2:	46bd      	mov	sp, r7
 80071f4:	b006      	add	sp, #24
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b094      	sub	sp, #80	@ 0x50
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007200:	204e      	movs	r0, #78	@ 0x4e
 8007202:	183b      	adds	r3, r7, r0
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	215c      	movs	r1, #92	@ 0x5c
 8007208:	5a52      	ldrh	r2, [r2, r1]
 800720a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2280      	movs	r2, #128	@ 0x80
 8007210:	589b      	ldr	r3, [r3, r2]
 8007212:	2b22      	cmp	r3, #34	@ 0x22
 8007214:	d000      	beq.n	8007218 <UART_RxISR_8BIT+0x20>
 8007216:	e0bf      	b.n	8007398 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800721e:	214c      	movs	r1, #76	@ 0x4c
 8007220:	187b      	adds	r3, r7, r1
 8007222:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007224:	187b      	adds	r3, r7, r1
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b2da      	uxtb	r2, r3
 800722a:	183b      	adds	r3, r7, r0
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b2d9      	uxtb	r1, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007234:	400a      	ands	r2, r1
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	225a      	movs	r2, #90	@ 0x5a
 8007248:	5a9b      	ldrh	r3, [r3, r2]
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b299      	uxth	r1, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	225a      	movs	r2, #90	@ 0x5a
 8007254:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	225a      	movs	r2, #90	@ 0x5a
 800725a:	5a9b      	ldrh	r3, [r3, r2]
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d000      	beq.n	8007264 <UART_RxISR_8BIT+0x6c>
 8007262:	e0a1      	b.n	80073a8 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007264:	f3ef 8310 	mrs	r3, PRIMASK
 8007268:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800726c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800726e:	2301      	movs	r3, #1
 8007270:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007274:	f383 8810 	msr	PRIMASK, r3
}
 8007278:	46c0      	nop			@ (mov r8, r8)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	494a      	ldr	r1, [pc, #296]	@ (80073b0 <UART_RxISR_8BIT+0x1b8>)
 8007286:	400a      	ands	r2, r1
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800728c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800728e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007290:	f383 8810 	msr	PRIMASK, r3
}
 8007294:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007296:	f3ef 8310 	mrs	r3, PRIMASK
 800729a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729e:	647b      	str	r3, [r7, #68]	@ 0x44
 80072a0:	2301      	movs	r3, #1
 80072a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a6:	f383 8810 	msr	PRIMASK, r3
}
 80072aa:	46c0      	nop			@ (mov r8, r8)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2101      	movs	r1, #1
 80072b8:	438a      	bics	r2, r1
 80072ba:	609a      	str	r2, [r3, #8]
 80072bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c2:	f383 8810 	msr	PRIMASK, r3
}
 80072c6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2280      	movs	r2, #128	@ 0x80
 80072cc:	2120      	movs	r1, #32
 80072ce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a34      	ldr	r2, [pc, #208]	@ (80073b4 <UART_RxISR_8BIT+0x1bc>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d01f      	beq.n	8007326 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	2380      	movs	r3, #128	@ 0x80
 80072ee:	041b      	lsls	r3, r3, #16
 80072f0:	4013      	ands	r3, r2
 80072f2:	d018      	beq.n	8007326 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f4:	f3ef 8310 	mrs	r3, PRIMASK
 80072f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80072fa:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80072fe:	2301      	movs	r3, #1
 8007300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	f383 8810 	msr	PRIMASK, r3
}
 8007308:	46c0      	nop			@ (mov r8, r8)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4928      	ldr	r1, [pc, #160]	@ (80073b8 <UART_RxISR_8BIT+0x1c0>)
 8007316:	400a      	ands	r2, r1
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800731c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	f383 8810 	msr	PRIMASK, r3
}
 8007324:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800732a:	2b01      	cmp	r3, #1
 800732c:	d12f      	bne.n	800738e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007334:	f3ef 8310 	mrs	r3, PRIMASK
 8007338:	60fb      	str	r3, [r7, #12]
  return(result);
 800733a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800733e:	2301      	movs	r3, #1
 8007340:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f383 8810 	msr	PRIMASK, r3
}
 8007348:	46c0      	nop			@ (mov r8, r8)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2110      	movs	r1, #16
 8007356:	438a      	bics	r2, r1
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800735c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f383 8810 	msr	PRIMASK, r3
}
 8007364:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	2210      	movs	r2, #16
 800736e:	4013      	ands	r3, r2
 8007370:	2b10      	cmp	r3, #16
 8007372:	d103      	bne.n	800737c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2210      	movs	r2, #16
 800737a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2258      	movs	r2, #88	@ 0x58
 8007380:	5a9a      	ldrh	r2, [r3, r2]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	0011      	movs	r1, r2
 8007386:	0018      	movs	r0, r3
 8007388:	f7fa faaa 	bl	80018e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800738c:	e00c      	b.n	80073a8 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	0018      	movs	r0, r3
 8007392:	f7ff f94b 	bl	800662c <HAL_UART_RxCpltCallback>
}
 8007396:	e007      	b.n	80073a8 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2108      	movs	r1, #8
 80073a4:	430a      	orrs	r2, r1
 80073a6:	619a      	str	r2, [r3, #24]
}
 80073a8:	46c0      	nop			@ (mov r8, r8)
 80073aa:	46bd      	mov	sp, r7
 80073ac:	b014      	add	sp, #80	@ 0x50
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	fffffedf 	.word	0xfffffedf
 80073b4:	40004800 	.word	0x40004800
 80073b8:	fbffffff 	.word	0xfbffffff

080073bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b094      	sub	sp, #80	@ 0x50
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073c4:	204e      	movs	r0, #78	@ 0x4e
 80073c6:	183b      	adds	r3, r7, r0
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	215c      	movs	r1, #92	@ 0x5c
 80073cc:	5a52      	ldrh	r2, [r2, r1]
 80073ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2280      	movs	r2, #128	@ 0x80
 80073d4:	589b      	ldr	r3, [r3, r2]
 80073d6:	2b22      	cmp	r3, #34	@ 0x22
 80073d8:	d000      	beq.n	80073dc <UART_RxISR_16BIT+0x20>
 80073da:	e0bf      	b.n	800755c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073e2:	214c      	movs	r1, #76	@ 0x4c
 80073e4:	187b      	adds	r3, r7, r1
 80073e6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80073ee:	187b      	adds	r3, r7, r1
 80073f0:	183a      	adds	r2, r7, r0
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	8812      	ldrh	r2, [r2, #0]
 80073f6:	4013      	ands	r3, r2
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007402:	1c9a      	adds	r2, r3, #2
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	225a      	movs	r2, #90	@ 0x5a
 800740c:	5a9b      	ldrh	r3, [r3, r2]
 800740e:	b29b      	uxth	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	b299      	uxth	r1, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	225a      	movs	r2, #90	@ 0x5a
 8007418:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	225a      	movs	r2, #90	@ 0x5a
 800741e:	5a9b      	ldrh	r3, [r3, r2]
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d000      	beq.n	8007428 <UART_RxISR_16BIT+0x6c>
 8007426:	e0a1      	b.n	800756c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007428:	f3ef 8310 	mrs	r3, PRIMASK
 800742c:	623b      	str	r3, [r7, #32]
  return(result);
 800742e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007430:	647b      	str	r3, [r7, #68]	@ 0x44
 8007432:	2301      	movs	r3, #1
 8007434:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	f383 8810 	msr	PRIMASK, r3
}
 800743c:	46c0      	nop			@ (mov r8, r8)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	494a      	ldr	r1, [pc, #296]	@ (8007574 <UART_RxISR_16BIT+0x1b8>)
 800744a:	400a      	ands	r2, r1
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007450:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007454:	f383 8810 	msr	PRIMASK, r3
}
 8007458:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800745a:	f3ef 8310 	mrs	r3, PRIMASK
 800745e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8007460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007462:	643b      	str	r3, [r7, #64]	@ 0x40
 8007464:	2301      	movs	r3, #1
 8007466:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746a:	f383 8810 	msr	PRIMASK, r3
}
 800746e:	46c0      	nop			@ (mov r8, r8)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2101      	movs	r1, #1
 800747c:	438a      	bics	r2, r1
 800747e:	609a      	str	r2, [r3, #8]
 8007480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007482:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007486:	f383 8810 	msr	PRIMASK, r3
}
 800748a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2280      	movs	r2, #128	@ 0x80
 8007490:	2120      	movs	r1, #32
 8007492:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a34      	ldr	r2, [pc, #208]	@ (8007578 <UART_RxISR_16BIT+0x1bc>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d01f      	beq.n	80074ea <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	2380      	movs	r3, #128	@ 0x80
 80074b2:	041b      	lsls	r3, r3, #16
 80074b4:	4013      	ands	r3, r2
 80074b6:	d018      	beq.n	80074ea <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b8:	f3ef 8310 	mrs	r3, PRIMASK
 80074bc:	617b      	str	r3, [r7, #20]
  return(result);
 80074be:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074c2:	2301      	movs	r3, #1
 80074c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	f383 8810 	msr	PRIMASK, r3
}
 80074cc:	46c0      	nop			@ (mov r8, r8)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4928      	ldr	r1, [pc, #160]	@ (800757c <UART_RxISR_16BIT+0x1c0>)
 80074da:	400a      	ands	r2, r1
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	f383 8810 	msr	PRIMASK, r3
}
 80074e8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d12f      	bne.n	8007552 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f8:	f3ef 8310 	mrs	r3, PRIMASK
 80074fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80074fe:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007500:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007502:	2301      	movs	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f383 8810 	msr	PRIMASK, r3
}
 800750c:	46c0      	nop			@ (mov r8, r8)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2110      	movs	r1, #16
 800751a:	438a      	bics	r2, r1
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007520:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f383 8810 	msr	PRIMASK, r3
}
 8007528:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	2210      	movs	r2, #16
 8007532:	4013      	ands	r3, r2
 8007534:	2b10      	cmp	r3, #16
 8007536:	d103      	bne.n	8007540 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2210      	movs	r2, #16
 800753e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2258      	movs	r2, #88	@ 0x58
 8007544:	5a9a      	ldrh	r2, [r3, r2]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	0011      	movs	r1, r2
 800754a:	0018      	movs	r0, r3
 800754c:	f7fa f9c8 	bl	80018e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007550:	e00c      	b.n	800756c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	0018      	movs	r0, r3
 8007556:	f7ff f869 	bl	800662c <HAL_UART_RxCpltCallback>
}
 800755a:	e007      	b.n	800756c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2108      	movs	r1, #8
 8007568:	430a      	orrs	r2, r1
 800756a:	619a      	str	r2, [r3, #24]
}
 800756c:	46c0      	nop			@ (mov r8, r8)
 800756e:	46bd      	mov	sp, r7
 8007570:	b014      	add	sp, #80	@ 0x50
 8007572:	bd80      	pop	{r7, pc}
 8007574:	fffffedf 	.word	0xfffffedf
 8007578:	40004800 	.word	0x40004800
 800757c:	fbffffff 	.word	0xfbffffff

08007580 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007588:	46c0      	nop			@ (mov r8, r8)
 800758a:	46bd      	mov	sp, r7
 800758c:	b002      	add	sp, #8
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08a      	sub	sp, #40	@ 0x28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	1dbb      	adds	r3, r7, #6
 800759c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800759e:	2327      	movs	r3, #39	@ 0x27
 80075a0:	18fb      	adds	r3, r7, r3
 80075a2:	2200      	movs	r2, #0
 80075a4:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2280      	movs	r2, #128	@ 0x80
 80075aa:	589b      	ldr	r3, [r3, r2]
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	d14e      	bne.n	800764e <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 80075b6:	1dbb      	adds	r3, r7, #6
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e046      	b.n	8007650 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	2380      	movs	r3, #128	@ 0x80
 80075c8:	015b      	lsls	r3, r3, #5
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d109      	bne.n	80075e2 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d105      	bne.n	80075e2 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2201      	movs	r2, #1
 80075da:	4013      	ands	r3, r2
 80075dc:	d001      	beq.n	80075e2 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e036      	b.n	8007650 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2201      	movs	r2, #1
 80075e6:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80075ee:	1dbb      	adds	r3, r7, #6
 80075f0:	881a      	ldrh	r2, [r3, #0]
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	0018      	movs	r0, r3
 80075f8:	f7ff fc92 	bl	8006f20 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007600:	2b01      	cmp	r3, #1
 8007602:	d11c      	bne.n	800763e <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2210      	movs	r2, #16
 800760a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800760c:	f3ef 8310 	mrs	r3, PRIMASK
 8007610:	617b      	str	r3, [r7, #20]
  return(result);
 8007612:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007614:	623b      	str	r3, [r7, #32]
 8007616:	2301      	movs	r3, #1
 8007618:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	f383 8810 	msr	PRIMASK, r3
}
 8007620:	46c0      	nop			@ (mov r8, r8)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2110      	movs	r1, #16
 800762e:	430a      	orrs	r2, r1
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	f383 8810 	msr	PRIMASK, r3
}
 800763c:	e003      	b.n	8007646 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800763e:	2327      	movs	r3, #39	@ 0x27
 8007640:	18fb      	adds	r3, r7, r3
 8007642:	2201      	movs	r2, #1
 8007644:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8007646:	2327      	movs	r3, #39	@ 0x27
 8007648:	18fb      	adds	r3, r7, r3
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	e000      	b.n	8007650 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 800764e:	2302      	movs	r3, #2
  }
}
 8007650:	0018      	movs	r0, r3
 8007652:	46bd      	mov	sp, r7
 8007654:	b00a      	add	sp, #40	@ 0x28
 8007656:	bd80      	pop	{r7, pc}

08007658 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	0002      	movs	r2, r0
 8007660:	1dbb      	adds	r3, r7, #6
 8007662:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007668:	1dbb      	adds	r3, r7, #6
 800766a:	2200      	movs	r2, #0
 800766c:	5e9b      	ldrsh	r3, [r3, r2]
 800766e:	2b84      	cmp	r3, #132	@ 0x84
 8007670:	d006      	beq.n	8007680 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8007672:	1dbb      	adds	r3, r7, #6
 8007674:	2200      	movs	r2, #0
 8007676:	5e9a      	ldrsh	r2, [r3, r2]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	18d3      	adds	r3, r2, r3
 800767c:	3303      	adds	r3, #3
 800767e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007680:	68fb      	ldr	r3, [r7, #12]
}
 8007682:	0018      	movs	r0, r3
 8007684:	46bd      	mov	sp, r7
 8007686:	b004      	add	sp, #16
 8007688:	bd80      	pop	{r7, pc}

0800768a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800768e:	f000 faad 	bl	8007bec <vTaskStartScheduler>
  
  return osOK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	0018      	movs	r0, r3
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800769a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769c:	b089      	sub	sp, #36	@ 0x24
 800769e:	af04      	add	r7, sp, #16
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d020      	beq.n	80076ee <osThreadCreate+0x54>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01c      	beq.n	80076ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685c      	ldr	r4, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691e      	ldr	r6, [r3, #16]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2208      	movs	r2, #8
 80076c4:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076c6:	0018      	movs	r0, r3
 80076c8:	f7ff ffc6 	bl	8007658 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	695a      	ldr	r2, [r3, #20]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	9302      	str	r3, [sp, #8]
 80076d8:	9201      	str	r2, [sp, #4]
 80076da:	9000      	str	r0, [sp, #0]
 80076dc:	000b      	movs	r3, r1
 80076de:	0032      	movs	r2, r6
 80076e0:	0029      	movs	r1, r5
 80076e2:	0020      	movs	r0, r4
 80076e4:	f000 f8e3 	bl	80078ae <xTaskCreateStatic>
 80076e8:	0003      	movs	r3, r0
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	e01d      	b.n	800772a <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685c      	ldr	r4, [r3, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076fa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2208      	movs	r2, #8
 8007700:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007702:	0018      	movs	r0, r3
 8007704:	f7ff ffa8 	bl	8007658 <makeFreeRtosPriority>
 8007708:	0001      	movs	r1, r0
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	230c      	movs	r3, #12
 800770e:	18fb      	adds	r3, r7, r3
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	9100      	str	r1, [sp, #0]
 8007714:	0013      	movs	r3, r2
 8007716:	0032      	movs	r2, r6
 8007718:	0029      	movs	r1, r5
 800771a:	0020      	movs	r0, r4
 800771c:	f000 f90e 	bl	800793c <xTaskCreate>
 8007720:	0003      	movs	r3, r0
 8007722:	2b01      	cmp	r3, #1
 8007724:	d001      	beq.n	800772a <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8007726:	2300      	movs	r3, #0
 8007728:	e000      	b.n	800772c <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800772a:	68fb      	ldr	r3, [r7, #12]
}
 800772c:	0018      	movs	r0, r3
 800772e:	46bd      	mov	sp, r7
 8007730:	b005      	add	sp, #20
 8007732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007734 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <osDelay+0x16>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	e000      	b.n	800774c <osDelay+0x18>
 800774a:	2301      	movs	r3, #1
 800774c:	0018      	movs	r0, r3
 800774e:	f000 fa27 	bl	8007ba0 <vTaskDelay>
  
  return osOK;
 8007752:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007754:	0018      	movs	r0, r3
 8007756:	46bd      	mov	sp, r7
 8007758:	b004      	add	sp, #16
 800775a:	bd80      	pop	{r7, pc}

0800775c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3308      	adds	r3, #8
 8007768:	001a      	movs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	4252      	negs	r2, r2
 8007774:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3308      	adds	r3, #8
 800777a:	001a      	movs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3308      	adds	r3, #8
 8007784:	001a      	movs	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007790:	46c0      	nop			@ (mov r8, r8)
 8007792:	46bd      	mov	sp, r7
 8007794:	b002      	add	sp, #8
 8007796:	bd80      	pop	{r7, pc}

08007798 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077a6:	46c0      	nop			@ (mov r8, r8)
 80077a8:	46bd      	mov	sp, r7
 80077aa:	b002      	add	sp, #8
 80077ac:	bd80      	pop	{r7, pc}

080077ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	601a      	str	r2, [r3, #0]
}
 80077ea:	46c0      	nop			@ (mov r8, r8)
 80077ec:	46bd      	mov	sp, r7
 80077ee:	b004      	add	sp, #16
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	3301      	adds	r3, #1
 8007806:	d103      	bne.n	8007810 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	e00c      	b.n	800782a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3308      	adds	r3, #8
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	e002      	b.n	800781e <vListInsert+0x2c>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	429a      	cmp	r2, r3
 8007828:	d2f6      	bcs.n	8007818 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	601a      	str	r2, [r3, #0]
}
 8007856:	46c0      	nop			@ (mov r8, r8)
 8007858:	46bd      	mov	sp, r7
 800785a:	b004      	add	sp, #16
 800785c:	bd80      	pop	{r7, pc}

0800785e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6892      	ldr	r2, [r2, #8]
 8007874:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6852      	ldr	r2, [r2, #4]
 800787e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	429a      	cmp	r2, r3
 8007888:	d103      	bne.n	8007892 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	1e5a      	subs	r2, r3, #1
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
}
 80078a6:	0018      	movs	r0, r3
 80078a8:	46bd      	mov	sp, r7
 80078aa:	b004      	add	sp, #16
 80078ac:	bd80      	pop	{r7, pc}

080078ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078ae:	b590      	push	{r4, r7, lr}
 80078b0:	b08d      	sub	sp, #52	@ 0x34
 80078b2:	af04      	add	r7, sp, #16
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d102      	bne.n	80078c8 <xTaskCreateStatic+0x1a>
 80078c2:	b672      	cpsid	i
 80078c4:	46c0      	nop			@ (mov r8, r8)
 80078c6:	e7fd      	b.n	80078c4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80078c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <xTaskCreateStatic+0x26>
 80078ce:	b672      	cpsid	i
 80078d0:	46c0      	nop			@ (mov r8, r8)
 80078d2:	e7fd      	b.n	80078d0 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078d4:	2354      	movs	r3, #84	@ 0x54
 80078d6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2b54      	cmp	r3, #84	@ 0x54
 80078dc:	d002      	beq.n	80078e4 <xTaskCreateStatic+0x36>
 80078de:	b672      	cpsid	i
 80078e0:	46c0      	nop			@ (mov r8, r8)
 80078e2:	e7fd      	b.n	80078e0 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078e4:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d020      	beq.n	800792e <xTaskCreateStatic+0x80>
 80078ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d01d      	beq.n	800792e <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f4:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	2251      	movs	r2, #81	@ 0x51
 8007900:	2102      	movs	r1, #2
 8007902:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007904:	683c      	ldr	r4, [r7, #0]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	2300      	movs	r3, #0
 800790e:	9303      	str	r3, [sp, #12]
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	9302      	str	r3, [sp, #8]
 8007914:	2318      	movs	r3, #24
 8007916:	18fb      	adds	r3, r7, r3
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	0023      	movs	r3, r4
 8007920:	f000 f858 	bl	80079d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	0018      	movs	r0, r3
 8007928:	f000 f8d6 	bl	8007ad8 <prvAddNewTaskToReadyList>
 800792c:	e001      	b.n	8007932 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007932:	69bb      	ldr	r3, [r7, #24]
	}
 8007934:	0018      	movs	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	b009      	add	sp, #36	@ 0x24
 800793a:	bd90      	pop	{r4, r7, pc}

0800793c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800793c:	b590      	push	{r4, r7, lr}
 800793e:	b08d      	sub	sp, #52	@ 0x34
 8007940:	af04      	add	r7, sp, #16
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	603b      	str	r3, [r7, #0]
 8007948:	1dbb      	adds	r3, r7, #6
 800794a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800794c:	1dbb      	adds	r3, r7, #6
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	0018      	movs	r0, r3
 8007954:	f000 fd9c 	bl	8008490 <pvPortMalloc>
 8007958:	0003      	movs	r3, r0
 800795a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d010      	beq.n	8007984 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007962:	2054      	movs	r0, #84	@ 0x54
 8007964:	f000 fd94 	bl	8008490 <pvPortMalloc>
 8007968:	0003      	movs	r3, r0
 800796a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	631a      	str	r2, [r3, #48]	@ 0x30
 8007978:	e006      	b.n	8007988 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	0018      	movs	r0, r3
 800797e:	f000 fe2f 	bl	80085e0 <vPortFree>
 8007982:	e001      	b.n	8007988 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007984:	2300      	movs	r3, #0
 8007986:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01a      	beq.n	80079c4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	2251      	movs	r2, #81	@ 0x51
 8007992:	2100      	movs	r1, #0
 8007994:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007996:	1dbb      	adds	r3, r7, #6
 8007998:	881a      	ldrh	r2, [r3, #0]
 800799a:	683c      	ldr	r4, [r7, #0]
 800799c:	68b9      	ldr	r1, [r7, #8]
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	2300      	movs	r3, #0
 80079a2:	9303      	str	r3, [sp, #12]
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	9302      	str	r3, [sp, #8]
 80079a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	0023      	movs	r3, r4
 80079b2:	f000 f80f 	bl	80079d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	0018      	movs	r0, r3
 80079ba:	f000 f88d 	bl	8007ad8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079be:	2301      	movs	r3, #1
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	e002      	b.n	80079ca <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079c4:	2301      	movs	r3, #1
 80079c6:	425b      	negs	r3, r3
 80079c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079ca:	69bb      	ldr	r3, [r7, #24]
	}
 80079cc:	0018      	movs	r0, r3
 80079ce:	46bd      	mov	sp, r7
 80079d0:	b009      	add	sp, #36	@ 0x24
 80079d2:	bd90      	pop	{r4, r7, pc}

080079d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	493a      	ldr	r1, [pc, #232]	@ (8007ad4 <prvInitialiseNewTask+0x100>)
 80079ea:	468c      	mov	ip, r1
 80079ec:	4463      	add	r3, ip
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	18d3      	adds	r3, r2, r3
 80079f2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2207      	movs	r2, #7
 80079f8:	4393      	bics	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	2207      	movs	r2, #7
 8007a00:	4013      	ands	r3, r2
 8007a02:	d002      	beq.n	8007a0a <prvInitialiseNewTask+0x36>
 8007a04:	b672      	cpsid	i
 8007a06:	46c0      	nop			@ (mov r8, r8)
 8007a08:	e7fd      	b.n	8007a06 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d020      	beq.n	8007a52 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	e013      	b.n	8007a3e <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	18d3      	adds	r3, r2, r3
 8007a1c:	7818      	ldrb	r0, [r3, #0]
 8007a1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a20:	2134      	movs	r1, #52	@ 0x34
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	18d3      	adds	r3, r2, r3
 8007a26:	185b      	adds	r3, r3, r1
 8007a28:	1c02      	adds	r2, r0, #0
 8007a2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	18d3      	adds	r3, r2, r3
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d006      	beq.n	8007a46 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	617b      	str	r3, [r7, #20]
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b0f      	cmp	r3, #15
 8007a42:	d9e8      	bls.n	8007a16 <prvInitialiseNewTask+0x42>
 8007a44:	e000      	b.n	8007a48 <prvInitialiseNewTask+0x74>
			{
				break;
 8007a46:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4a:	2243      	movs	r2, #67	@ 0x43
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	5499      	strb	r1, [r3, r2]
 8007a50:	e003      	b.n	8007a5a <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a54:	2234      	movs	r2, #52	@ 0x34
 8007a56:	2100      	movs	r1, #0
 8007a58:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	2b06      	cmp	r3, #6
 8007a5e:	d901      	bls.n	8007a64 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a60:	2306      	movs	r3, #6
 8007a62:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a66:	6a3a      	ldr	r2, [r7, #32]
 8007a68:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6c:	6a3a      	ldr	r2, [r7, #32]
 8007a6e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	2200      	movs	r2, #0
 8007a74:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a78:	3304      	adds	r3, #4
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f7ff fe8c 	bl	8007798 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	3318      	adds	r3, #24
 8007a84:	0018      	movs	r0, r3
 8007a86:	f7ff fe87 	bl	8007798 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	2207      	movs	r2, #7
 8007a94:	1ad2      	subs	r2, r2, r3
 8007a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a9e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa8:	2250      	movs	r2, #80	@ 0x50
 8007aaa:	2100      	movs	r1, #0
 8007aac:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	68f9      	ldr	r1, [r7, #12]
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f000 fbbb 	bl	8008230 <pxPortInitialiseStack>
 8007aba:	0002      	movs	r2, r0
 8007abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007abe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007aca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007acc:	46c0      	nop			@ (mov r8, r8)
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	b006      	add	sp, #24
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	3fffffff 	.word	0x3fffffff

08007ad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ae0:	f000 fc3e 	bl	8008360 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ae4:	4b28      	ldr	r3, [pc, #160]	@ (8007b88 <prvAddNewTaskToReadyList+0xb0>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	4b27      	ldr	r3, [pc, #156]	@ (8007b88 <prvAddNewTaskToReadyList+0xb0>)
 8007aec:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007aee:	4b27      	ldr	r3, [pc, #156]	@ (8007b8c <prvAddNewTaskToReadyList+0xb4>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d109      	bne.n	8007b0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007af6:	4b25      	ldr	r3, [pc, #148]	@ (8007b8c <prvAddNewTaskToReadyList+0xb4>)
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007afc:	4b22      	ldr	r3, [pc, #136]	@ (8007b88 <prvAddNewTaskToReadyList+0xb0>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d110      	bne.n	8007b26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b04:	f000 fa6a 	bl	8007fdc <prvInitialiseTaskLists>
 8007b08:	e00d      	b.n	8007b26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b0a:	4b21      	ldr	r3, [pc, #132]	@ (8007b90 <prvAddNewTaskToReadyList+0xb8>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d109      	bne.n	8007b26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b12:	4b1e      	ldr	r3, [pc, #120]	@ (8007b8c <prvAddNewTaskToReadyList+0xb4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d802      	bhi.n	8007b26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b20:	4b1a      	ldr	r3, [pc, #104]	@ (8007b8c <prvAddNewTaskToReadyList+0xb4>)
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b26:	4b1b      	ldr	r3, [pc, #108]	@ (8007b94 <prvAddNewTaskToReadyList+0xbc>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	4b19      	ldr	r3, [pc, #100]	@ (8007b94 <prvAddNewTaskToReadyList+0xbc>)
 8007b2e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b34:	4b18      	ldr	r3, [pc, #96]	@ (8007b98 <prvAddNewTaskToReadyList+0xc0>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d903      	bls.n	8007b44 <prvAddNewTaskToReadyList+0x6c>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b40:	4b15      	ldr	r3, [pc, #84]	@ (8007b98 <prvAddNewTaskToReadyList+0xc0>)
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b48:	0013      	movs	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	189b      	adds	r3, r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4a12      	ldr	r2, [pc, #72]	@ (8007b9c <prvAddNewTaskToReadyList+0xc4>)
 8007b52:	189a      	adds	r2, r3, r2
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3304      	adds	r3, #4
 8007b58:	0019      	movs	r1, r3
 8007b5a:	0010      	movs	r0, r2
 8007b5c:	f7ff fe27 	bl	80077ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b60:	f000 fc10 	bl	8008384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b64:	4b0a      	ldr	r3, [pc, #40]	@ (8007b90 <prvAddNewTaskToReadyList+0xb8>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d008      	beq.n	8007b7e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b6c:	4b07      	ldr	r3, [pc, #28]	@ (8007b8c <prvAddNewTaskToReadyList+0xb4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d201      	bcs.n	8007b7e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b7a:	f000 fbe1 	bl	8008340 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b7e:	46c0      	nop			@ (mov r8, r8)
 8007b80:	46bd      	mov	sp, r7
 8007b82:	b002      	add	sp, #8
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	46c0      	nop			@ (mov r8, r8)
 8007b88:	200006e8 	.word	0x200006e8
 8007b8c:	200005e8 	.word	0x200005e8
 8007b90:	200006f4 	.word	0x200006f4
 8007b94:	20000704 	.word	0x20000704
 8007b98:	200006f0 	.word	0x200006f0
 8007b9c:	200005ec 	.word	0x200005ec

08007ba0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d011      	beq.n	8007bd6 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007be8 <vTaskDelay+0x48>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <vTaskDelay+0x20>
 8007bba:	b672      	cpsid	i
 8007bbc:	46c0      	nop			@ (mov r8, r8)
 8007bbe:	e7fd      	b.n	8007bbc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8007bc0:	f000 f862 	bl	8007c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	0018      	movs	r0, r3
 8007bca:	f000 fadd 	bl	8008188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bce:	f000 f867 	bl	8007ca0 <xTaskResumeAll>
 8007bd2:	0003      	movs	r3, r0
 8007bd4:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8007bdc:	f000 fbb0 	bl	8008340 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007be0:	46c0      	nop			@ (mov r8, r8)
 8007be2:	46bd      	mov	sp, r7
 8007be4:	b004      	add	sp, #16
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000710 	.word	0x20000710

08007bec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b089      	sub	sp, #36	@ 0x24
 8007bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bfa:	003a      	movs	r2, r7
 8007bfc:	1d39      	adds	r1, r7, #4
 8007bfe:	2308      	movs	r3, #8
 8007c00:	18fb      	adds	r3, r7, r3
 8007c02:	0018      	movs	r0, r3
 8007c04:	f7f8 fc2a 	bl	800045c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c08:	683c      	ldr	r4, [r7, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	4918      	ldr	r1, [pc, #96]	@ (8007c70 <vTaskStartScheduler+0x84>)
 8007c10:	4818      	ldr	r0, [pc, #96]	@ (8007c74 <vTaskStartScheduler+0x88>)
 8007c12:	9202      	str	r2, [sp, #8]
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	0022      	movs	r2, r4
 8007c1e:	f7ff fe46 	bl	80078ae <xTaskCreateStatic>
 8007c22:	0002      	movs	r2, r0
 8007c24:	4b14      	ldr	r3, [pc, #80]	@ (8007c78 <vTaskStartScheduler+0x8c>)
 8007c26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c28:	4b13      	ldr	r3, [pc, #76]	@ (8007c78 <vTaskStartScheduler+0x8c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c30:	2301      	movs	r3, #1
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	e001      	b.n	8007c3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d10d      	bne.n	8007c5c <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007c40:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c42:	4b0e      	ldr	r3, [pc, #56]	@ (8007c7c <vTaskStartScheduler+0x90>)
 8007c44:	2201      	movs	r2, #1
 8007c46:	4252      	negs	r2, r2
 8007c48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c80 <vTaskStartScheduler+0x94>)
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c50:	4b0c      	ldr	r3, [pc, #48]	@ (8007c84 <vTaskStartScheduler+0x98>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c56:	f000 fb4f 	bl	80082f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c5a:	e005      	b.n	8007c68 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	d102      	bne.n	8007c68 <vTaskStartScheduler+0x7c>
 8007c62:	b672      	cpsid	i
 8007c64:	46c0      	nop			@ (mov r8, r8)
 8007c66:	e7fd      	b.n	8007c64 <vTaskStartScheduler+0x78>
}
 8007c68:	46c0      	nop			@ (mov r8, r8)
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	b005      	add	sp, #20
 8007c6e:	bd90      	pop	{r4, r7, pc}
 8007c70:	08008db0 	.word	0x08008db0
 8007c74:	08007fbd 	.word	0x08007fbd
 8007c78:	2000070c 	.word	0x2000070c
 8007c7c:	20000708 	.word	0x20000708
 8007c80:	200006f4 	.word	0x200006f4
 8007c84:	200006ec 	.word	0x200006ec

08007c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c8c:	4b03      	ldr	r3, [pc, #12]	@ (8007c9c <vTaskSuspendAll+0x14>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	4b02      	ldr	r3, [pc, #8]	@ (8007c9c <vTaskSuspendAll+0x14>)
 8007c94:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8007c96:	46c0      	nop			@ (mov r8, r8)
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	20000710 	.word	0x20000710

08007ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cae:	4b3a      	ldr	r3, [pc, #232]	@ (8007d98 <xTaskResumeAll+0xf8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <xTaskResumeAll+0x1c>
 8007cb6:	b672      	cpsid	i
 8007cb8:	46c0      	nop			@ (mov r8, r8)
 8007cba:	e7fd      	b.n	8007cb8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cbc:	f000 fb50 	bl	8008360 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cc0:	4b35      	ldr	r3, [pc, #212]	@ (8007d98 <xTaskResumeAll+0xf8>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	1e5a      	subs	r2, r3, #1
 8007cc6:	4b34      	ldr	r3, [pc, #208]	@ (8007d98 <xTaskResumeAll+0xf8>)
 8007cc8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cca:	4b33      	ldr	r3, [pc, #204]	@ (8007d98 <xTaskResumeAll+0xf8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d15b      	bne.n	8007d8a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cd2:	4b32      	ldr	r3, [pc, #200]	@ (8007d9c <xTaskResumeAll+0xfc>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d057      	beq.n	8007d8a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cda:	e02f      	b.n	8007d3c <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cdc:	4b30      	ldr	r3, [pc, #192]	@ (8007da0 <xTaskResumeAll+0x100>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3318      	adds	r3, #24
 8007ce8:	0018      	movs	r0, r3
 8007cea:	f7ff fdb8 	bl	800785e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f7ff fdb3 	bl	800785e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfc:	4b29      	ldr	r3, [pc, #164]	@ (8007da4 <xTaskResumeAll+0x104>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d903      	bls.n	8007d0c <xTaskResumeAll+0x6c>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d08:	4b26      	ldr	r3, [pc, #152]	@ (8007da4 <xTaskResumeAll+0x104>)
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d10:	0013      	movs	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	189b      	adds	r3, r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4a23      	ldr	r2, [pc, #140]	@ (8007da8 <xTaskResumeAll+0x108>)
 8007d1a:	189a      	adds	r2, r3, r2
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	0019      	movs	r1, r3
 8007d22:	0010      	movs	r0, r2
 8007d24:	f7ff fd43 	bl	80077ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007dac <xTaskResumeAll+0x10c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d302      	bcc.n	8007d3c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8007d36:	4b1e      	ldr	r3, [pc, #120]	@ (8007db0 <xTaskResumeAll+0x110>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d3c:	4b18      	ldr	r3, [pc, #96]	@ (8007da0 <xTaskResumeAll+0x100>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1cb      	bne.n	8007cdc <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d4a:	f000 f9e3 	bl	8008114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d4e:	4b19      	ldr	r3, [pc, #100]	@ (8007db4 <xTaskResumeAll+0x114>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00f      	beq.n	8007d7a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d5a:	f000 f82d 	bl	8007db8 <xTaskIncrementTick>
 8007d5e:	1e03      	subs	r3, r0, #0
 8007d60:	d002      	beq.n	8007d68 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8007d62:	4b13      	ldr	r3, [pc, #76]	@ (8007db0 <xTaskResumeAll+0x110>)
 8007d64:	2201      	movs	r2, #1
 8007d66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1f2      	bne.n	8007d5a <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8007d74:	4b0f      	ldr	r3, [pc, #60]	@ (8007db4 <xTaskResumeAll+0x114>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007db0 <xTaskResumeAll+0x110>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d82:	2301      	movs	r3, #1
 8007d84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d86:	f000 fadb 	bl	8008340 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d8a:	f000 fafb 	bl	8008384 <vPortExitCritical>

	return xAlreadyYielded;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
}
 8007d90:	0018      	movs	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	b004      	add	sp, #16
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	20000710 	.word	0x20000710
 8007d9c:	200006e8 	.word	0x200006e8
 8007da0:	200006a8 	.word	0x200006a8
 8007da4:	200006f0 	.word	0x200006f0
 8007da8:	200005ec 	.word	0x200005ec
 8007dac:	200005e8 	.word	0x200005e8
 8007db0:	200006fc 	.word	0x200006fc
 8007db4:	200006f8 	.word	0x200006f8

08007db8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8007eec <xTaskIncrementTick+0x134>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d000      	beq.n	8007dcc <xTaskIncrementTick+0x14>
 8007dca:	e07f      	b.n	8007ecc <xTaskIncrementTick+0x114>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007dcc:	4b48      	ldr	r3, [pc, #288]	@ (8007ef0 <xTaskIncrementTick+0x138>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007dd4:	4b46      	ldr	r3, [pc, #280]	@ (8007ef0 <xTaskIncrementTick+0x138>)
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d118      	bne.n	8007e12 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007de0:	4b44      	ldr	r3, [pc, #272]	@ (8007ef4 <xTaskIncrementTick+0x13c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <xTaskIncrementTick+0x38>
 8007dea:	b672      	cpsid	i
 8007dec:	46c0      	nop			@ (mov r8, r8)
 8007dee:	e7fd      	b.n	8007dec <xTaskIncrementTick+0x34>
 8007df0:	4b40      	ldr	r3, [pc, #256]	@ (8007ef4 <xTaskIncrementTick+0x13c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	4b40      	ldr	r3, [pc, #256]	@ (8007ef8 <xTaskIncrementTick+0x140>)
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8007ef4 <xTaskIncrementTick+0x13c>)
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8007ef8 <xTaskIncrementTick+0x140>)
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	4b3d      	ldr	r3, [pc, #244]	@ (8007efc <xTaskIncrementTick+0x144>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8007efc <xTaskIncrementTick+0x144>)
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	f000 f981 	bl	8008114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e12:	4b3b      	ldr	r3, [pc, #236]	@ (8007f00 <xTaskIncrementTick+0x148>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d349      	bcc.n	8007eb0 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e1c:	4b35      	ldr	r3, [pc, #212]	@ (8007ef4 <xTaskIncrementTick+0x13c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d104      	bne.n	8007e30 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e26:	4b36      	ldr	r3, [pc, #216]	@ (8007f00 <xTaskIncrementTick+0x148>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	4252      	negs	r2, r2
 8007e2c:	601a      	str	r2, [r3, #0]
					break;
 8007e2e:	e03f      	b.n	8007eb0 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e30:	4b30      	ldr	r3, [pc, #192]	@ (8007ef4 <xTaskIncrementTick+0x13c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d203      	bcs.n	8007e50 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e48:	4b2d      	ldr	r3, [pc, #180]	@ (8007f00 <xTaskIncrementTick+0x148>)
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e4e:	e02f      	b.n	8007eb0 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	3304      	adds	r3, #4
 8007e54:	0018      	movs	r0, r3
 8007e56:	f7ff fd02 	bl	800785e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d004      	beq.n	8007e6c <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	3318      	adds	r3, #24
 8007e66:	0018      	movs	r0, r3
 8007e68:	f7ff fcf9 	bl	800785e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e70:	4b24      	ldr	r3, [pc, #144]	@ (8007f04 <xTaskIncrementTick+0x14c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d903      	bls.n	8007e80 <xTaskIncrementTick+0xc8>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7c:	4b21      	ldr	r3, [pc, #132]	@ (8007f04 <xTaskIncrementTick+0x14c>)
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e84:	0013      	movs	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	189b      	adds	r3, r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8007f08 <xTaskIncrementTick+0x150>)
 8007e8e:	189a      	adds	r2, r3, r2
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	3304      	adds	r3, #4
 8007e94:	0019      	movs	r1, r3
 8007e96:	0010      	movs	r0, r2
 8007e98:	f7ff fc89 	bl	80077ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f0c <xTaskIncrementTick+0x154>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d3b8      	bcc.n	8007e1c <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eae:	e7b5      	b.n	8007e1c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007eb0:	4b16      	ldr	r3, [pc, #88]	@ (8007f0c <xTaskIncrementTick+0x154>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb6:	4914      	ldr	r1, [pc, #80]	@ (8007f08 <xTaskIncrementTick+0x150>)
 8007eb8:	0013      	movs	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	189b      	adds	r3, r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	585b      	ldr	r3, [r3, r1]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d907      	bls.n	8007ed6 <xTaskIncrementTick+0x11e>
			{
				xSwitchRequired = pdTRUE;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	e004      	b.n	8007ed6 <xTaskIncrementTick+0x11e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ecc:	4b10      	ldr	r3, [pc, #64]	@ (8007f10 <xTaskIncrementTick+0x158>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f10 <xTaskIncrementTick+0x158>)
 8007ed4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f14 <xTaskIncrementTick+0x15c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <xTaskIncrementTick+0x12a>
		{
			xSwitchRequired = pdTRUE;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ee2:	697b      	ldr	r3, [r7, #20]
}
 8007ee4:	0018      	movs	r0, r3
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	b006      	add	sp, #24
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20000710 	.word	0x20000710
 8007ef0:	200006ec 	.word	0x200006ec
 8007ef4:	200006a0 	.word	0x200006a0
 8007ef8:	200006a4 	.word	0x200006a4
 8007efc:	20000700 	.word	0x20000700
 8007f00:	20000708 	.word	0x20000708
 8007f04:	200006f0 	.word	0x200006f0
 8007f08:	200005ec 	.word	0x200005ec
 8007f0c:	200005e8 	.word	0x200005e8
 8007f10:	200006f8 	.word	0x200006f8
 8007f14:	200006fc 	.word	0x200006fc

08007f18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f1e:	4b22      	ldr	r3, [pc, #136]	@ (8007fa8 <vTaskSwitchContext+0x90>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f26:	4b21      	ldr	r3, [pc, #132]	@ (8007fac <vTaskSwitchContext+0x94>)
 8007f28:	2201      	movs	r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f2c:	e038      	b.n	8007fa0 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8007f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8007fac <vTaskSwitchContext+0x94>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f34:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb0 <vTaskSwitchContext+0x98>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	607b      	str	r3, [r7, #4]
 8007f3a:	e008      	b.n	8007f4e <vTaskSwitchContext+0x36>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d102      	bne.n	8007f48 <vTaskSwitchContext+0x30>
 8007f42:	b672      	cpsid	i
 8007f44:	46c0      	nop			@ (mov r8, r8)
 8007f46:	e7fd      	b.n	8007f44 <vTaskSwitchContext+0x2c>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	607b      	str	r3, [r7, #4]
 8007f4e:	4919      	ldr	r1, [pc, #100]	@ (8007fb4 <vTaskSwitchContext+0x9c>)
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	0013      	movs	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	189b      	adds	r3, r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	585b      	ldr	r3, [r3, r1]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0ed      	beq.n	8007f3c <vTaskSwitchContext+0x24>
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	0013      	movs	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	189b      	adds	r3, r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4a12      	ldr	r2, [pc, #72]	@ (8007fb4 <vTaskSwitchContext+0x9c>)
 8007f6c:	189b      	adds	r3, r3, r2
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	605a      	str	r2, [r3, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d104      	bne.n	8007f90 <vTaskSwitchContext+0x78>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	605a      	str	r2, [r3, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	4b08      	ldr	r3, [pc, #32]	@ (8007fb8 <vTaskSwitchContext+0xa0>)
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	4b05      	ldr	r3, [pc, #20]	@ (8007fb0 <vTaskSwitchContext+0x98>)
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	601a      	str	r2, [r3, #0]
}
 8007fa0:	46c0      	nop			@ (mov r8, r8)
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	b002      	add	sp, #8
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20000710 	.word	0x20000710
 8007fac:	200006fc 	.word	0x200006fc
 8007fb0:	200006f0 	.word	0x200006f0
 8007fb4:	200005ec 	.word	0x200005ec
 8007fb8:	200005e8 	.word	0x200005e8

08007fbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fc4:	f000 f84e 	bl	8008064 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fc8:	4b03      	ldr	r3, [pc, #12]	@ (8007fd8 <prvIdleTask+0x1c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d9f9      	bls.n	8007fc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fd0:	f000 f9b6 	bl	8008340 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007fd4:	e7f6      	b.n	8007fc4 <prvIdleTask+0x8>
 8007fd6:	46c0      	nop			@ (mov r8, r8)
 8007fd8:	200005ec 	.word	0x200005ec

08007fdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	607b      	str	r3, [r7, #4]
 8007fe6:	e00c      	b.n	8008002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	0013      	movs	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	189b      	adds	r3, r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4a14      	ldr	r2, [pc, #80]	@ (8008044 <prvInitialiseTaskLists+0x68>)
 8007ff4:	189b      	adds	r3, r3, r2
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f7ff fbb0 	bl	800775c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3301      	adds	r3, #1
 8008000:	607b      	str	r3, [r7, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b06      	cmp	r3, #6
 8008006:	d9ef      	bls.n	8007fe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008008:	4b0f      	ldr	r3, [pc, #60]	@ (8008048 <prvInitialiseTaskLists+0x6c>)
 800800a:	0018      	movs	r0, r3
 800800c:	f7ff fba6 	bl	800775c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008010:	4b0e      	ldr	r3, [pc, #56]	@ (800804c <prvInitialiseTaskLists+0x70>)
 8008012:	0018      	movs	r0, r3
 8008014:	f7ff fba2 	bl	800775c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008018:	4b0d      	ldr	r3, [pc, #52]	@ (8008050 <prvInitialiseTaskLists+0x74>)
 800801a:	0018      	movs	r0, r3
 800801c:	f7ff fb9e 	bl	800775c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008020:	4b0c      	ldr	r3, [pc, #48]	@ (8008054 <prvInitialiseTaskLists+0x78>)
 8008022:	0018      	movs	r0, r3
 8008024:	f7ff fb9a 	bl	800775c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008028:	4b0b      	ldr	r3, [pc, #44]	@ (8008058 <prvInitialiseTaskLists+0x7c>)
 800802a:	0018      	movs	r0, r3
 800802c:	f7ff fb96 	bl	800775c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008030:	4b0a      	ldr	r3, [pc, #40]	@ (800805c <prvInitialiseTaskLists+0x80>)
 8008032:	4a05      	ldr	r2, [pc, #20]	@ (8008048 <prvInitialiseTaskLists+0x6c>)
 8008034:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008036:	4b0a      	ldr	r3, [pc, #40]	@ (8008060 <prvInitialiseTaskLists+0x84>)
 8008038:	4a04      	ldr	r2, [pc, #16]	@ (800804c <prvInitialiseTaskLists+0x70>)
 800803a:	601a      	str	r2, [r3, #0]
}
 800803c:	46c0      	nop			@ (mov r8, r8)
 800803e:	46bd      	mov	sp, r7
 8008040:	b002      	add	sp, #8
 8008042:	bd80      	pop	{r7, pc}
 8008044:	200005ec 	.word	0x200005ec
 8008048:	20000678 	.word	0x20000678
 800804c:	2000068c 	.word	0x2000068c
 8008050:	200006a8 	.word	0x200006a8
 8008054:	200006bc 	.word	0x200006bc
 8008058:	200006d4 	.word	0x200006d4
 800805c:	200006a0 	.word	0x200006a0
 8008060:	200006a4 	.word	0x200006a4

08008064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800806a:	e01a      	b.n	80080a2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800806c:	f000 f978 	bl	8008360 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008070:	4b10      	ldr	r3, [pc, #64]	@ (80080b4 <prvCheckTasksWaitingTermination+0x50>)
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3304      	adds	r3, #4
 800807c:	0018      	movs	r0, r3
 800807e:	f7ff fbee 	bl	800785e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008082:	4b0d      	ldr	r3, [pc, #52]	@ (80080b8 <prvCheckTasksWaitingTermination+0x54>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	1e5a      	subs	r2, r3, #1
 8008088:	4b0b      	ldr	r3, [pc, #44]	@ (80080b8 <prvCheckTasksWaitingTermination+0x54>)
 800808a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800808c:	4b0b      	ldr	r3, [pc, #44]	@ (80080bc <prvCheckTasksWaitingTermination+0x58>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	1e5a      	subs	r2, r3, #1
 8008092:	4b0a      	ldr	r3, [pc, #40]	@ (80080bc <prvCheckTasksWaitingTermination+0x58>)
 8008094:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008096:	f000 f975 	bl	8008384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	0018      	movs	r0, r3
 800809e:	f000 f80f 	bl	80080c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080a2:	4b06      	ldr	r3, [pc, #24]	@ (80080bc <prvCheckTasksWaitingTermination+0x58>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e0      	bne.n	800806c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080aa:	46c0      	nop			@ (mov r8, r8)
 80080ac:	46c0      	nop			@ (mov r8, r8)
 80080ae:	46bd      	mov	sp, r7
 80080b0:	b002      	add	sp, #8
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	200006bc 	.word	0x200006bc
 80080b8:	200006e8 	.word	0x200006e8
 80080bc:	200006d0 	.word	0x200006d0

080080c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2251      	movs	r2, #81	@ 0x51
 80080cc:	5c9b      	ldrb	r3, [r3, r2]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d109      	bne.n	80080e6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d6:	0018      	movs	r0, r3
 80080d8:	f000 fa82 	bl	80085e0 <vPortFree>
				vPortFree( pxTCB );
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	0018      	movs	r0, r3
 80080e0:	f000 fa7e 	bl	80085e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080e4:	e011      	b.n	800810a <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2251      	movs	r2, #81	@ 0x51
 80080ea:	5c9b      	ldrb	r3, [r3, r2]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d104      	bne.n	80080fa <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	0018      	movs	r0, r3
 80080f4:	f000 fa74 	bl	80085e0 <vPortFree>
	}
 80080f8:	e007      	b.n	800810a <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2251      	movs	r2, #81	@ 0x51
 80080fe:	5c9b      	ldrb	r3, [r3, r2]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d002      	beq.n	800810a <prvDeleteTCB+0x4a>
 8008104:	b672      	cpsid	i
 8008106:	46c0      	nop			@ (mov r8, r8)
 8008108:	e7fd      	b.n	8008106 <prvDeleteTCB+0x46>
	}
 800810a:	46c0      	nop			@ (mov r8, r8)
 800810c:	46bd      	mov	sp, r7
 800810e:	b002      	add	sp, #8
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800811a:	4b0b      	ldr	r3, [pc, #44]	@ (8008148 <prvResetNextTaskUnblockTime+0x34>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d104      	bne.n	800812e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008124:	4b09      	ldr	r3, [pc, #36]	@ (800814c <prvResetNextTaskUnblockTime+0x38>)
 8008126:	2201      	movs	r2, #1
 8008128:	4252      	negs	r2, r2
 800812a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800812c:	e008      	b.n	8008140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800812e:	4b06      	ldr	r3, [pc, #24]	@ (8008148 <prvResetNextTaskUnblockTime+0x34>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	4b03      	ldr	r3, [pc, #12]	@ (800814c <prvResetNextTaskUnblockTime+0x38>)
 800813e:	601a      	str	r2, [r3, #0]
}
 8008140:	46c0      	nop			@ (mov r8, r8)
 8008142:	46bd      	mov	sp, r7
 8008144:	b002      	add	sp, #8
 8008146:	bd80      	pop	{r7, pc}
 8008148:	200006a0 	.word	0x200006a0
 800814c:	20000708 	.word	0x20000708

08008150 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008156:	4b0a      	ldr	r3, [pc, #40]	@ (8008180 <xTaskGetSchedulerState+0x30>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d102      	bne.n	8008164 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800815e:	2301      	movs	r3, #1
 8008160:	607b      	str	r3, [r7, #4]
 8008162:	e008      	b.n	8008176 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008164:	4b07      	ldr	r3, [pc, #28]	@ (8008184 <xTaskGetSchedulerState+0x34>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800816c:	2302      	movs	r3, #2
 800816e:	607b      	str	r3, [r7, #4]
 8008170:	e001      	b.n	8008176 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008176:	687b      	ldr	r3, [r7, #4]
	}
 8008178:	0018      	movs	r0, r3
 800817a:	46bd      	mov	sp, r7
 800817c:	b002      	add	sp, #8
 800817e:	bd80      	pop	{r7, pc}
 8008180:	200006f4 	.word	0x200006f4
 8008184:	20000710 	.word	0x20000710

08008188 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008192:	4b21      	ldr	r3, [pc, #132]	@ (8008218 <prvAddCurrentTaskToDelayedList+0x90>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008198:	4b20      	ldr	r3, [pc, #128]	@ (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3304      	adds	r3, #4
 800819e:	0018      	movs	r0, r3
 80081a0:	f7ff fb5d 	bl	800785e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3301      	adds	r3, #1
 80081a8:	d10b      	bne.n	80081c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d008      	beq.n	80081c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081b0:	4b1a      	ldr	r3, [pc, #104]	@ (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	1d1a      	adds	r2, r3, #4
 80081b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008220 <prvAddCurrentTaskToDelayedList+0x98>)
 80081b8:	0011      	movs	r1, r2
 80081ba:	0018      	movs	r0, r3
 80081bc:	f7ff faf7 	bl	80077ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081c0:	e026      	b.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	18d3      	adds	r3, r2, r3
 80081c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081ca:	4b14      	ldr	r3, [pc, #80]	@ (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d209      	bcs.n	80081ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081da:	4b12      	ldr	r3, [pc, #72]	@ (8008224 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b0f      	ldr	r3, [pc, #60]	@ (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3304      	adds	r3, #4
 80081e4:	0019      	movs	r1, r3
 80081e6:	0010      	movs	r0, r2
 80081e8:	f7ff fb03 	bl	80077f2 <vListInsert>
}
 80081ec:	e010      	b.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008228 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	4b0a      	ldr	r3, [pc, #40]	@ (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3304      	adds	r3, #4
 80081f8:	0019      	movs	r1, r3
 80081fa:	0010      	movs	r0, r2
 80081fc:	f7ff faf9 	bl	80077f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008200:	4b0a      	ldr	r3, [pc, #40]	@ (800822c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	429a      	cmp	r2, r3
 8008208:	d202      	bcs.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800820a:	4b08      	ldr	r3, [pc, #32]	@ (800822c <prvAddCurrentTaskToDelayedList+0xa4>)
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	601a      	str	r2, [r3, #0]
}
 8008210:	46c0      	nop			@ (mov r8, r8)
 8008212:	46bd      	mov	sp, r7
 8008214:	b004      	add	sp, #16
 8008216:	bd80      	pop	{r7, pc}
 8008218:	200006ec 	.word	0x200006ec
 800821c:	200005e8 	.word	0x200005e8
 8008220:	200006d4 	.word	0x200006d4
 8008224:	200006a4 	.word	0x200006a4
 8008228:	200006a0 	.word	0x200006a0
 800822c:	20000708 	.word	0x20000708

08008230 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3b04      	subs	r3, #4
 8008240:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2280      	movs	r2, #128	@ 0x80
 8008246:	0452      	lsls	r2, r2, #17
 8008248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3b04      	subs	r3, #4
 800824e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3b04      	subs	r3, #4
 800825a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800825c:	4a08      	ldr	r2, [pc, #32]	@ (8008280 <pxPortInitialiseStack+0x50>)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	3b14      	subs	r3, #20
 8008266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3b20      	subs	r3, #32
 8008272:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008274:	68fb      	ldr	r3, [r7, #12]
}
 8008276:	0018      	movs	r0, r3
 8008278:	46bd      	mov	sp, r7
 800827a:	b004      	add	sp, #16
 800827c:	bd80      	pop	{r7, pc}
 800827e:	46c0      	nop			@ (mov r8, r8)
 8008280:	08008285 	.word	0x08008285

08008284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800828a:	2300      	movs	r3, #0
 800828c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800828e:	4b08      	ldr	r3, [pc, #32]	@ (80082b0 <prvTaskExitError+0x2c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3301      	adds	r3, #1
 8008294:	d002      	beq.n	800829c <prvTaskExitError+0x18>
 8008296:	b672      	cpsid	i
 8008298:	46c0      	nop			@ (mov r8, r8)
 800829a:	e7fd      	b.n	8008298 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800829c:	b672      	cpsid	i
	while( ulDummy == 0 )
 800829e:	46c0      	nop			@ (mov r8, r8)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0fc      	beq.n	80082a0 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082a6:	46c0      	nop			@ (mov r8, r8)
 80082a8:	46c0      	nop			@ (mov r8, r8)
 80082aa:	46bd      	mov	sp, r7
 80082ac:	b002      	add	sp, #8
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000090 	.word	0x20000090

080082b4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80082b8:	46c0      	nop			@ (mov r8, r8)
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80082c0:	4a0b      	ldr	r2, [pc, #44]	@ (80082f0 <pxCurrentTCBConst2>)
 80082c2:	6813      	ldr	r3, [r2, #0]
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	3020      	adds	r0, #32
 80082c8:	f380 8809 	msr	PSP, r0
 80082cc:	2002      	movs	r0, #2
 80082ce:	f380 8814 	msr	CONTROL, r0
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80082d8:	46ae      	mov	lr, r5
 80082da:	bc08      	pop	{r3}
 80082dc:	bc04      	pop	{r2}
 80082de:	b662      	cpsie	i
 80082e0:	4718      	bx	r3
 80082e2:	46c0      	nop			@ (mov r8, r8)
 80082e4:	46c0      	nop			@ (mov r8, r8)
 80082e6:	46c0      	nop			@ (mov r8, r8)
 80082e8:	46c0      	nop			@ (mov r8, r8)
 80082ea:	46c0      	nop			@ (mov r8, r8)
 80082ec:	46c0      	nop			@ (mov r8, r8)
 80082ee:	46c0      	nop			@ (mov r8, r8)

080082f0 <pxCurrentTCBConst2>:
 80082f0:	200005e8 	.word	0x200005e8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80082f4:	46c0      	nop			@ (mov r8, r8)
 80082f6:	46c0      	nop			@ (mov r8, r8)

080082f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80082fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008338 <xPortStartScheduler+0x40>)
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	4b0d      	ldr	r3, [pc, #52]	@ (8008338 <xPortStartScheduler+0x40>)
 8008302:	21ff      	movs	r1, #255	@ 0xff
 8008304:	0409      	lsls	r1, r1, #16
 8008306:	430a      	orrs	r2, r1
 8008308:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800830a:	4b0b      	ldr	r3, [pc, #44]	@ (8008338 <xPortStartScheduler+0x40>)
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	4b0a      	ldr	r3, [pc, #40]	@ (8008338 <xPortStartScheduler+0x40>)
 8008310:	21ff      	movs	r1, #255	@ 0xff
 8008312:	0609      	lsls	r1, r1, #24
 8008314:	430a      	orrs	r2, r1
 8008316:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8008318:	f000 f898 	bl	800844c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800831c:	4b07      	ldr	r3, [pc, #28]	@ (800833c <xPortStartScheduler+0x44>)
 800831e:	2200      	movs	r2, #0
 8008320:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008322:	f7ff ffcd 	bl	80082c0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008326:	f7ff fdf7 	bl	8007f18 <vTaskSwitchContext>
	prvTaskExitError();
 800832a:	f7ff ffab 	bl	8008284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800832e:	2300      	movs	r3, #0
}
 8008330:	0018      	movs	r0, r3
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	46c0      	nop			@ (mov r8, r8)
 8008338:	e000ed20 	.word	0xe000ed20
 800833c:	20000090 	.word	0x20000090

08008340 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8008344:	4b05      	ldr	r3, [pc, #20]	@ (800835c <vPortYield+0x1c>)
 8008346:	2280      	movs	r2, #128	@ 0x80
 8008348:	0552      	lsls	r2, r2, #21
 800834a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800834c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008350:	f3bf 8f6f 	isb	sy
}
 8008354:	46c0      	nop			@ (mov r8, r8)
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	46c0      	nop			@ (mov r8, r8)
 800835c:	e000ed04 	.word	0xe000ed04

08008360 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008364:	b672      	cpsid	i
    uxCriticalNesting++;
 8008366:	4b06      	ldr	r3, [pc, #24]	@ (8008380 <vPortEnterCritical+0x20>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	4b04      	ldr	r3, [pc, #16]	@ (8008380 <vPortEnterCritical+0x20>)
 800836e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008370:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008374:	f3bf 8f6f 	isb	sy
}
 8008378:	46c0      	nop			@ (mov r8, r8)
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	46c0      	nop			@ (mov r8, r8)
 8008380:	20000090 	.word	0x20000090

08008384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008388:	4b09      	ldr	r3, [pc, #36]	@ (80083b0 <vPortExitCritical+0x2c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <vPortExitCritical+0x12>
 8008390:	b672      	cpsid	i
 8008392:	46c0      	nop			@ (mov r8, r8)
 8008394:	e7fd      	b.n	8008392 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8008396:	4b06      	ldr	r3, [pc, #24]	@ (80083b0 <vPortExitCritical+0x2c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	1e5a      	subs	r2, r3, #1
 800839c:	4b04      	ldr	r3, [pc, #16]	@ (80083b0 <vPortExitCritical+0x2c>)
 800839e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80083a0:	4b03      	ldr	r3, [pc, #12]	@ (80083b0 <vPortExitCritical+0x2c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d100      	bne.n	80083aa <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 80083a8:	b662      	cpsie	i
    }
}
 80083aa:	46c0      	nop			@ (mov r8, r8)
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20000090 	.word	0x20000090

080083b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80083b4:	f3ef 8010 	mrs	r0, PRIMASK
 80083b8:	b672      	cpsid	i
 80083ba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80083bc:	46c0      	nop			@ (mov r8, r8)
 80083be:	0018      	movs	r0, r3

080083c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80083c0:	f380 8810 	msr	PRIMASK, r0
 80083c4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80083c6:	46c0      	nop			@ (mov r8, r8)
	...

080083d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083d0:	f3ef 8009 	mrs	r0, PSP
 80083d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008410 <pxCurrentTCBConst>)
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	3820      	subs	r0, #32
 80083da:	6010      	str	r0, [r2, #0]
 80083dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80083de:	4644      	mov	r4, r8
 80083e0:	464d      	mov	r5, r9
 80083e2:	4656      	mov	r6, sl
 80083e4:	465f      	mov	r7, fp
 80083e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80083e8:	b508      	push	{r3, lr}
 80083ea:	b672      	cpsid	i
 80083ec:	f7ff fd94 	bl	8007f18 <vTaskSwitchContext>
 80083f0:	b662      	cpsie	i
 80083f2:	bc0c      	pop	{r2, r3}
 80083f4:	6811      	ldr	r1, [r2, #0]
 80083f6:	6808      	ldr	r0, [r1, #0]
 80083f8:	3010      	adds	r0, #16
 80083fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80083fc:	46a0      	mov	r8, r4
 80083fe:	46a9      	mov	r9, r5
 8008400:	46b2      	mov	sl, r6
 8008402:	46bb      	mov	fp, r7
 8008404:	f380 8809 	msr	PSP, r0
 8008408:	3820      	subs	r0, #32
 800840a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800840c:	4718      	bx	r3
 800840e:	46c0      	nop			@ (mov r8, r8)

08008410 <pxCurrentTCBConst>:
 8008410:	200005e8 	.word	0x200005e8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008414:	46c0      	nop			@ (mov r8, r8)
 8008416:	46c0      	nop			@ (mov r8, r8)

08008418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800841e:	f7ff ffc9 	bl	80083b4 <ulSetInterruptMaskFromISR>
 8008422:	0003      	movs	r3, r0
 8008424:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008426:	f7ff fcc7 	bl	8007db8 <xTaskIncrementTick>
 800842a:	1e03      	subs	r3, r0, #0
 800842c:	d003      	beq.n	8008436 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800842e:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <xPortSysTickHandler+0x30>)
 8008430:	2280      	movs	r2, #128	@ 0x80
 8008432:	0552      	lsls	r2, r2, #21
 8008434:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	0018      	movs	r0, r3
 800843a:	f7ff ffc1 	bl	80083c0 <vClearInterruptMaskFromISR>
}
 800843e:	46c0      	nop			@ (mov r8, r8)
 8008440:	46bd      	mov	sp, r7
 8008442:	b002      	add	sp, #8
 8008444:	bd80      	pop	{r7, pc}
 8008446:	46c0      	nop			@ (mov r8, r8)
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8008450:	4b0b      	ldr	r3, [pc, #44]	@ (8008480 <prvSetupTimerInterrupt+0x34>)
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008456:	4b0b      	ldr	r3, [pc, #44]	@ (8008484 <prvSetupTimerInterrupt+0x38>)
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800845c:	4b0a      	ldr	r3, [pc, #40]	@ (8008488 <prvSetupTimerInterrupt+0x3c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	22fa      	movs	r2, #250	@ 0xfa
 8008462:	0091      	lsls	r1, r2, #2
 8008464:	0018      	movs	r0, r3
 8008466:	f7f7 fe57 	bl	8000118 <__udivsi3>
 800846a:	0003      	movs	r3, r0
 800846c:	001a      	movs	r2, r3
 800846e:	4b07      	ldr	r3, [pc, #28]	@ (800848c <prvSetupTimerInterrupt+0x40>)
 8008470:	3a01      	subs	r2, #1
 8008472:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8008474:	4b02      	ldr	r3, [pc, #8]	@ (8008480 <prvSetupTimerInterrupt+0x34>)
 8008476:	2207      	movs	r2, #7
 8008478:	601a      	str	r2, [r3, #0]
}
 800847a:	46c0      	nop			@ (mov r8, r8)
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	e000e010 	.word	0xe000e010
 8008484:	e000e018 	.word	0xe000e018
 8008488:	20000084 	.word	0x20000084
 800848c:	e000e014 	.word	0xe000e014

08008490 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800849c:	f7ff fbf4 	bl	8007c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084a0:	4b4a      	ldr	r3, [pc, #296]	@ (80085cc <pvPortMalloc+0x13c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084a8:	f000 f8e4 	bl	8008674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084ac:	4b48      	ldr	r3, [pc, #288]	@ (80085d0 <pvPortMalloc+0x140>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	4013      	ands	r3, r2
 80084b4:	d000      	beq.n	80084b8 <pvPortMalloc+0x28>
 80084b6:	e07b      	b.n	80085b0 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d013      	beq.n	80084e6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 80084be:	2208      	movs	r2, #8
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	189b      	adds	r3, r3, r2
 80084c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2207      	movs	r2, #7
 80084ca:	4013      	ands	r3, r2
 80084cc:	d00b      	beq.n	80084e6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2207      	movs	r2, #7
 80084d2:	4393      	bics	r3, r2
 80084d4:	3308      	adds	r3, #8
 80084d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2207      	movs	r2, #7
 80084dc:	4013      	ands	r3, r2
 80084de:	d002      	beq.n	80084e6 <pvPortMalloc+0x56>
 80084e0:	b672      	cpsid	i
 80084e2:	46c0      	nop			@ (mov r8, r8)
 80084e4:	e7fd      	b.n	80084e2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d061      	beq.n	80085b0 <pvPortMalloc+0x120>
 80084ec:	4b39      	ldr	r3, [pc, #228]	@ (80085d4 <pvPortMalloc+0x144>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d85c      	bhi.n	80085b0 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084f6:	4b38      	ldr	r3, [pc, #224]	@ (80085d8 <pvPortMalloc+0x148>)
 80084f8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80084fa:	4b37      	ldr	r3, [pc, #220]	@ (80085d8 <pvPortMalloc+0x148>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008500:	e004      	b.n	800850c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	429a      	cmp	r2, r3
 8008514:	d903      	bls.n	800851e <pvPortMalloc+0x8e>
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1f1      	bne.n	8008502 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800851e:	4b2b      	ldr	r3, [pc, #172]	@ (80085cc <pvPortMalloc+0x13c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	429a      	cmp	r2, r3
 8008526:	d043      	beq.n	80085b0 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2208      	movs	r2, #8
 800852e:	189b      	adds	r3, r3, r2
 8008530:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	1ad2      	subs	r2, r2, r3
 8008542:	2308      	movs	r3, #8
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	429a      	cmp	r2, r3
 8008548:	d917      	bls.n	800857a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	18d3      	adds	r3, r2, r3
 8008550:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2207      	movs	r2, #7
 8008556:	4013      	ands	r3, r2
 8008558:	d002      	beq.n	8008560 <pvPortMalloc+0xd0>
 800855a:	b672      	cpsid	i
 800855c:	46c0      	nop			@ (mov r8, r8)
 800855e:	e7fd      	b.n	800855c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	0018      	movs	r0, r3
 8008576:	f000 f8dd 	bl	8008734 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800857a:	4b16      	ldr	r3, [pc, #88]	@ (80085d4 <pvPortMalloc+0x144>)
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	1ad2      	subs	r2, r2, r3
 8008584:	4b13      	ldr	r3, [pc, #76]	@ (80085d4 <pvPortMalloc+0x144>)
 8008586:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008588:	4b12      	ldr	r3, [pc, #72]	@ (80085d4 <pvPortMalloc+0x144>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	4b13      	ldr	r3, [pc, #76]	@ (80085dc <pvPortMalloc+0x14c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	429a      	cmp	r2, r3
 8008592:	d203      	bcs.n	800859c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008594:	4b0f      	ldr	r3, [pc, #60]	@ (80085d4 <pvPortMalloc+0x144>)
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	4b10      	ldr	r3, [pc, #64]	@ (80085dc <pvPortMalloc+0x14c>)
 800859a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	4b0b      	ldr	r3, [pc, #44]	@ (80085d0 <pvPortMalloc+0x140>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	431a      	orrs	r2, r3
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085b0:	f7ff fb76 	bl	8007ca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2207      	movs	r2, #7
 80085b8:	4013      	ands	r3, r2
 80085ba:	d002      	beq.n	80085c2 <pvPortMalloc+0x132>
 80085bc:	b672      	cpsid	i
 80085be:	46c0      	nop			@ (mov r8, r8)
 80085c0:	e7fd      	b.n	80085be <pvPortMalloc+0x12e>
	return pvReturn;
 80085c2:	68fb      	ldr	r3, [r7, #12]
}
 80085c4:	0018      	movs	r0, r3
 80085c6:	46bd      	mov	sp, r7
 80085c8:	b006      	add	sp, #24
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	2000131c 	.word	0x2000131c
 80085d0:	20001328 	.word	0x20001328
 80085d4:	20001320 	.word	0x20001320
 80085d8:	20001314 	.word	0x20001314
 80085dc:	20001324 	.word	0x20001324

080085e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d037      	beq.n	8008662 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085f2:	2308      	movs	r3, #8
 80085f4:	425b      	negs	r3, r3
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	18d3      	adds	r3, r2, r3
 80085fa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	4b19      	ldr	r3, [pc, #100]	@ (800866c <vPortFree+0x8c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4013      	ands	r3, r2
 800860a:	d102      	bne.n	8008612 <vPortFree+0x32>
 800860c:	b672      	cpsid	i
 800860e:	46c0      	nop			@ (mov r8, r8)
 8008610:	e7fd      	b.n	800860e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <vPortFree+0x40>
 800861a:	b672      	cpsid	i
 800861c:	46c0      	nop			@ (mov r8, r8)
 800861e:	e7fd      	b.n	800861c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	4b11      	ldr	r3, [pc, #68]	@ (800866c <vPortFree+0x8c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4013      	ands	r3, r2
 800862a:	d01a      	beq.n	8008662 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d116      	bne.n	8008662 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	4b0c      	ldr	r3, [pc, #48]	@ (800866c <vPortFree+0x8c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	43db      	mvns	r3, r3
 800863e:	401a      	ands	r2, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008644:	f7ff fb20 	bl	8007c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	4b08      	ldr	r3, [pc, #32]	@ (8008670 <vPortFree+0x90>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	18d2      	adds	r2, r2, r3
 8008652:	4b07      	ldr	r3, [pc, #28]	@ (8008670 <vPortFree+0x90>)
 8008654:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	0018      	movs	r0, r3
 800865a:	f000 f86b 	bl	8008734 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800865e:	f7ff fb1f 	bl	8007ca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008662:	46c0      	nop			@ (mov r8, r8)
 8008664:	46bd      	mov	sp, r7
 8008666:	b004      	add	sp, #16
 8008668:	bd80      	pop	{r7, pc}
 800866a:	46c0      	nop			@ (mov r8, r8)
 800866c:	20001328 	.word	0x20001328
 8008670:	20001320 	.word	0x20001320

08008674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800867a:	23c0      	movs	r3, #192	@ 0xc0
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008680:	4b26      	ldr	r3, [pc, #152]	@ (800871c <prvHeapInit+0xa8>)
 8008682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2207      	movs	r2, #7
 8008688:	4013      	ands	r3, r2
 800868a:	d00c      	beq.n	80086a6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3307      	adds	r3, #7
 8008690:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2207      	movs	r2, #7
 8008696:	4393      	bics	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	1ad2      	subs	r2, r2, r3
 80086a0:	4b1e      	ldr	r3, [pc, #120]	@ (800871c <prvHeapInit+0xa8>)
 80086a2:	18d3      	adds	r3, r2, r3
 80086a4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008720 <prvHeapInit+0xac>)
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008720 <prvHeapInit+0xac>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	18d3      	adds	r3, r2, r3
 80086bc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086be:	2208      	movs	r2, #8
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	1a9b      	subs	r3, r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2207      	movs	r2, #7
 80086ca:	4393      	bics	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	4b14      	ldr	r3, [pc, #80]	@ (8008724 <prvHeapInit+0xb0>)
 80086d2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80086d4:	4b13      	ldr	r3, [pc, #76]	@ (8008724 <prvHeapInit+0xb0>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2200      	movs	r2, #0
 80086da:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086dc:	4b11      	ldr	r3, [pc, #68]	@ (8008724 <prvHeapInit+0xb0>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	1ad2      	subs	r2, r2, r3
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008724 <prvHeapInit+0xb0>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008728 <prvHeapInit+0xb4>)
 8008700:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	4b09      	ldr	r3, [pc, #36]	@ (800872c <prvHeapInit+0xb8>)
 8008708:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800870a:	4b09      	ldr	r3, [pc, #36]	@ (8008730 <prvHeapInit+0xbc>)
 800870c:	2280      	movs	r2, #128	@ 0x80
 800870e:	0612      	lsls	r2, r2, #24
 8008710:	601a      	str	r2, [r3, #0]
}
 8008712:	46c0      	nop			@ (mov r8, r8)
 8008714:	46bd      	mov	sp, r7
 8008716:	b004      	add	sp, #16
 8008718:	bd80      	pop	{r7, pc}
 800871a:	46c0      	nop			@ (mov r8, r8)
 800871c:	20000714 	.word	0x20000714
 8008720:	20001314 	.word	0x20001314
 8008724:	2000131c 	.word	0x2000131c
 8008728:	20001324 	.word	0x20001324
 800872c:	20001320 	.word	0x20001320
 8008730:	20001328 	.word	0x20001328

08008734 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800873c:	4b27      	ldr	r3, [pc, #156]	@ (80087dc <prvInsertBlockIntoFreeList+0xa8>)
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	e002      	b.n	8008748 <prvInsertBlockIntoFreeList+0x14>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	429a      	cmp	r2, r3
 8008750:	d8f7      	bhi.n	8008742 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	18d3      	adds	r3, r2, r3
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	d108      	bne.n	8008776 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	685a      	ldr	r2, [r3, #4]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	18d2      	adds	r2, r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	18d2      	adds	r2, r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d118      	bne.n	80087bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	4b14      	ldr	r3, [pc, #80]	@ (80087e0 <prvInsertBlockIntoFreeList+0xac>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	429a      	cmp	r2, r3
 8008794:	d00d      	beq.n	80087b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	18d2      	adds	r2, r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	e008      	b.n	80087c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087b2:	4b0b      	ldr	r3, [pc, #44]	@ (80087e0 <prvInsertBlockIntoFreeList+0xac>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	e003      	b.n	80087c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d002      	beq.n	80087d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087d2:	46c0      	nop			@ (mov r8, r8)
 80087d4:	46bd      	mov	sp, r7
 80087d6:	b004      	add	sp, #16
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	46c0      	nop			@ (mov r8, r8)
 80087dc:	20001314 	.word	0x20001314
 80087e0:	2000131c 	.word	0x2000131c

080087e4 <free>:
 80087e4:	b510      	push	{r4, lr}
 80087e6:	4b03      	ldr	r3, [pc, #12]	@ (80087f4 <free+0x10>)
 80087e8:	0001      	movs	r1, r0
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	f000 f940 	bl	8008a70 <_free_r>
 80087f0:	bd10      	pop	{r4, pc}
 80087f2:	46c0      	nop			@ (mov r8, r8)
 80087f4:	20000094 	.word	0x20000094

080087f8 <sbrk_aligned>:
 80087f8:	b570      	push	{r4, r5, r6, lr}
 80087fa:	4e0f      	ldr	r6, [pc, #60]	@ (8008838 <sbrk_aligned+0x40>)
 80087fc:	000d      	movs	r5, r1
 80087fe:	6831      	ldr	r1, [r6, #0]
 8008800:	0004      	movs	r4, r0
 8008802:	2900      	cmp	r1, #0
 8008804:	d102      	bne.n	800880c <sbrk_aligned+0x14>
 8008806:	f000 f8eb 	bl	80089e0 <_sbrk_r>
 800880a:	6030      	str	r0, [r6, #0]
 800880c:	0029      	movs	r1, r5
 800880e:	0020      	movs	r0, r4
 8008810:	f000 f8e6 	bl	80089e0 <_sbrk_r>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d103      	bne.n	8008820 <sbrk_aligned+0x28>
 8008818:	2501      	movs	r5, #1
 800881a:	426d      	negs	r5, r5
 800881c:	0028      	movs	r0, r5
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	2303      	movs	r3, #3
 8008822:	1cc5      	adds	r5, r0, #3
 8008824:	439d      	bics	r5, r3
 8008826:	42a8      	cmp	r0, r5
 8008828:	d0f8      	beq.n	800881c <sbrk_aligned+0x24>
 800882a:	1a29      	subs	r1, r5, r0
 800882c:	0020      	movs	r0, r4
 800882e:	f000 f8d7 	bl	80089e0 <_sbrk_r>
 8008832:	3001      	adds	r0, #1
 8008834:	d1f2      	bne.n	800881c <sbrk_aligned+0x24>
 8008836:	e7ef      	b.n	8008818 <sbrk_aligned+0x20>
 8008838:	2000132c 	.word	0x2000132c

0800883c <_malloc_r>:
 800883c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800883e:	2203      	movs	r2, #3
 8008840:	1ccb      	adds	r3, r1, #3
 8008842:	4393      	bics	r3, r2
 8008844:	3308      	adds	r3, #8
 8008846:	0005      	movs	r5, r0
 8008848:	001f      	movs	r7, r3
 800884a:	2b0c      	cmp	r3, #12
 800884c:	d234      	bcs.n	80088b8 <_malloc_r+0x7c>
 800884e:	270c      	movs	r7, #12
 8008850:	42b9      	cmp	r1, r7
 8008852:	d833      	bhi.n	80088bc <_malloc_r+0x80>
 8008854:	0028      	movs	r0, r5
 8008856:	f000 f871 	bl	800893c <__malloc_lock>
 800885a:	4e37      	ldr	r6, [pc, #220]	@ (8008938 <_malloc_r+0xfc>)
 800885c:	6833      	ldr	r3, [r6, #0]
 800885e:	001c      	movs	r4, r3
 8008860:	2c00      	cmp	r4, #0
 8008862:	d12f      	bne.n	80088c4 <_malloc_r+0x88>
 8008864:	0039      	movs	r1, r7
 8008866:	0028      	movs	r0, r5
 8008868:	f7ff ffc6 	bl	80087f8 <sbrk_aligned>
 800886c:	0004      	movs	r4, r0
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	d15f      	bne.n	8008932 <_malloc_r+0xf6>
 8008872:	6834      	ldr	r4, [r6, #0]
 8008874:	9400      	str	r4, [sp, #0]
 8008876:	9b00      	ldr	r3, [sp, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d14a      	bne.n	8008912 <_malloc_r+0xd6>
 800887c:	2c00      	cmp	r4, #0
 800887e:	d052      	beq.n	8008926 <_malloc_r+0xea>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	0028      	movs	r0, r5
 8008884:	18e3      	adds	r3, r4, r3
 8008886:	9900      	ldr	r1, [sp, #0]
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	f000 f8a9 	bl	80089e0 <_sbrk_r>
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	4283      	cmp	r3, r0
 8008892:	d148      	bne.n	8008926 <_malloc_r+0xea>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	0028      	movs	r0, r5
 8008898:	1aff      	subs	r7, r7, r3
 800889a:	0039      	movs	r1, r7
 800889c:	f7ff ffac 	bl	80087f8 <sbrk_aligned>
 80088a0:	3001      	adds	r0, #1
 80088a2:	d040      	beq.n	8008926 <_malloc_r+0xea>
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	19db      	adds	r3, r3, r7
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	6833      	ldr	r3, [r6, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	2a00      	cmp	r2, #0
 80088b0:	d133      	bne.n	800891a <_malloc_r+0xde>
 80088b2:	9b00      	ldr	r3, [sp, #0]
 80088b4:	6033      	str	r3, [r6, #0]
 80088b6:	e019      	b.n	80088ec <_malloc_r+0xb0>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dac9      	bge.n	8008850 <_malloc_r+0x14>
 80088bc:	230c      	movs	r3, #12
 80088be:	602b      	str	r3, [r5, #0]
 80088c0:	2000      	movs	r0, #0
 80088c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088c4:	6821      	ldr	r1, [r4, #0]
 80088c6:	1bc9      	subs	r1, r1, r7
 80088c8:	d420      	bmi.n	800890c <_malloc_r+0xd0>
 80088ca:	290b      	cmp	r1, #11
 80088cc:	d90a      	bls.n	80088e4 <_malloc_r+0xa8>
 80088ce:	19e2      	adds	r2, r4, r7
 80088d0:	6027      	str	r7, [r4, #0]
 80088d2:	42a3      	cmp	r3, r4
 80088d4:	d104      	bne.n	80088e0 <_malloc_r+0xa4>
 80088d6:	6032      	str	r2, [r6, #0]
 80088d8:	6863      	ldr	r3, [r4, #4]
 80088da:	6011      	str	r1, [r2, #0]
 80088dc:	6053      	str	r3, [r2, #4]
 80088de:	e005      	b.n	80088ec <_malloc_r+0xb0>
 80088e0:	605a      	str	r2, [r3, #4]
 80088e2:	e7f9      	b.n	80088d8 <_malloc_r+0x9c>
 80088e4:	6862      	ldr	r2, [r4, #4]
 80088e6:	42a3      	cmp	r3, r4
 80088e8:	d10e      	bne.n	8008908 <_malloc_r+0xcc>
 80088ea:	6032      	str	r2, [r6, #0]
 80088ec:	0028      	movs	r0, r5
 80088ee:	f000 f82d 	bl	800894c <__malloc_unlock>
 80088f2:	0020      	movs	r0, r4
 80088f4:	2207      	movs	r2, #7
 80088f6:	300b      	adds	r0, #11
 80088f8:	1d23      	adds	r3, r4, #4
 80088fa:	4390      	bics	r0, r2
 80088fc:	1ac2      	subs	r2, r0, r3
 80088fe:	4298      	cmp	r0, r3
 8008900:	d0df      	beq.n	80088c2 <_malloc_r+0x86>
 8008902:	1a1b      	subs	r3, r3, r0
 8008904:	50a3      	str	r3, [r4, r2]
 8008906:	e7dc      	b.n	80088c2 <_malloc_r+0x86>
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	e7ef      	b.n	80088ec <_malloc_r+0xb0>
 800890c:	0023      	movs	r3, r4
 800890e:	6864      	ldr	r4, [r4, #4]
 8008910:	e7a6      	b.n	8008860 <_malloc_r+0x24>
 8008912:	9c00      	ldr	r4, [sp, #0]
 8008914:	6863      	ldr	r3, [r4, #4]
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	e7ad      	b.n	8008876 <_malloc_r+0x3a>
 800891a:	001a      	movs	r2, r3
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	42a3      	cmp	r3, r4
 8008920:	d1fb      	bne.n	800891a <_malloc_r+0xde>
 8008922:	2300      	movs	r3, #0
 8008924:	e7da      	b.n	80088dc <_malloc_r+0xa0>
 8008926:	230c      	movs	r3, #12
 8008928:	0028      	movs	r0, r5
 800892a:	602b      	str	r3, [r5, #0]
 800892c:	f000 f80e 	bl	800894c <__malloc_unlock>
 8008930:	e7c6      	b.n	80088c0 <_malloc_r+0x84>
 8008932:	6007      	str	r7, [r0, #0]
 8008934:	e7da      	b.n	80088ec <_malloc_r+0xb0>
 8008936:	46c0      	nop			@ (mov r8, r8)
 8008938:	20001330 	.word	0x20001330

0800893c <__malloc_lock>:
 800893c:	b510      	push	{r4, lr}
 800893e:	4802      	ldr	r0, [pc, #8]	@ (8008948 <__malloc_lock+0xc>)
 8008940:	f000 f88a 	bl	8008a58 <__retarget_lock_acquire_recursive>
 8008944:	bd10      	pop	{r4, pc}
 8008946:	46c0      	nop			@ (mov r8, r8)
 8008948:	20001470 	.word	0x20001470

0800894c <__malloc_unlock>:
 800894c:	b510      	push	{r4, lr}
 800894e:	4802      	ldr	r0, [pc, #8]	@ (8008958 <__malloc_unlock+0xc>)
 8008950:	f000 f883 	bl	8008a5a <__retarget_lock_release_recursive>
 8008954:	bd10      	pop	{r4, pc}
 8008956:	46c0      	nop			@ (mov r8, r8)
 8008958:	20001470 	.word	0x20001470

0800895c <realloc>:
 800895c:	b510      	push	{r4, lr}
 800895e:	4b03      	ldr	r3, [pc, #12]	@ (800896c <realloc+0x10>)
 8008960:	000a      	movs	r2, r1
 8008962:	0001      	movs	r1, r0
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	f000 f803 	bl	8008970 <_realloc_r>
 800896a:	bd10      	pop	{r4, pc}
 800896c:	20000094 	.word	0x20000094

08008970 <_realloc_r>:
 8008970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008972:	0006      	movs	r6, r0
 8008974:	000c      	movs	r4, r1
 8008976:	0015      	movs	r5, r2
 8008978:	2900      	cmp	r1, #0
 800897a:	d105      	bne.n	8008988 <_realloc_r+0x18>
 800897c:	0011      	movs	r1, r2
 800897e:	f7ff ff5d 	bl	800883c <_malloc_r>
 8008982:	0004      	movs	r4, r0
 8008984:	0020      	movs	r0, r4
 8008986:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008988:	2a00      	cmp	r2, #0
 800898a:	d103      	bne.n	8008994 <_realloc_r+0x24>
 800898c:	f000 f870 	bl	8008a70 <_free_r>
 8008990:	2400      	movs	r4, #0
 8008992:	e7f7      	b.n	8008984 <_realloc_r+0x14>
 8008994:	f000 f8b6 	bl	8008b04 <_malloc_usable_size_r>
 8008998:	0007      	movs	r7, r0
 800899a:	4285      	cmp	r5, r0
 800899c:	d802      	bhi.n	80089a4 <_realloc_r+0x34>
 800899e:	0843      	lsrs	r3, r0, #1
 80089a0:	42ab      	cmp	r3, r5
 80089a2:	d3ef      	bcc.n	8008984 <_realloc_r+0x14>
 80089a4:	0029      	movs	r1, r5
 80089a6:	0030      	movs	r0, r6
 80089a8:	f7ff ff48 	bl	800883c <_malloc_r>
 80089ac:	9001      	str	r0, [sp, #4]
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d0ee      	beq.n	8008990 <_realloc_r+0x20>
 80089b2:	002a      	movs	r2, r5
 80089b4:	42bd      	cmp	r5, r7
 80089b6:	d900      	bls.n	80089ba <_realloc_r+0x4a>
 80089b8:	003a      	movs	r2, r7
 80089ba:	0021      	movs	r1, r4
 80089bc:	9801      	ldr	r0, [sp, #4]
 80089be:	f000 f84d 	bl	8008a5c <memcpy>
 80089c2:	0021      	movs	r1, r4
 80089c4:	0030      	movs	r0, r6
 80089c6:	f000 f853 	bl	8008a70 <_free_r>
 80089ca:	9c01      	ldr	r4, [sp, #4]
 80089cc:	e7da      	b.n	8008984 <_realloc_r+0x14>

080089ce <memset>:
 80089ce:	0003      	movs	r3, r0
 80089d0:	1882      	adds	r2, r0, r2
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d100      	bne.n	80089d8 <memset+0xa>
 80089d6:	4770      	bx	lr
 80089d8:	7019      	strb	r1, [r3, #0]
 80089da:	3301      	adds	r3, #1
 80089dc:	e7f9      	b.n	80089d2 <memset+0x4>
	...

080089e0 <_sbrk_r>:
 80089e0:	2300      	movs	r3, #0
 80089e2:	b570      	push	{r4, r5, r6, lr}
 80089e4:	4d06      	ldr	r5, [pc, #24]	@ (8008a00 <_sbrk_r+0x20>)
 80089e6:	0004      	movs	r4, r0
 80089e8:	0008      	movs	r0, r1
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	f7fa fa4e 	bl	8002e8c <_sbrk>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d103      	bne.n	80089fc <_sbrk_r+0x1c>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d000      	beq.n	80089fc <_sbrk_r+0x1c>
 80089fa:	6023      	str	r3, [r4, #0]
 80089fc:	bd70      	pop	{r4, r5, r6, pc}
 80089fe:	46c0      	nop			@ (mov r8, r8)
 8008a00:	2000146c 	.word	0x2000146c

08008a04 <__errno>:
 8008a04:	4b01      	ldr	r3, [pc, #4]	@ (8008a0c <__errno+0x8>)
 8008a06:	6818      	ldr	r0, [r3, #0]
 8008a08:	4770      	bx	lr
 8008a0a:	46c0      	nop			@ (mov r8, r8)
 8008a0c:	20000094 	.word	0x20000094

08008a10 <__libc_init_array>:
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	2600      	movs	r6, #0
 8008a14:	4c0c      	ldr	r4, [pc, #48]	@ (8008a48 <__libc_init_array+0x38>)
 8008a16:	4d0d      	ldr	r5, [pc, #52]	@ (8008a4c <__libc_init_array+0x3c>)
 8008a18:	1b64      	subs	r4, r4, r5
 8008a1a:	10a4      	asrs	r4, r4, #2
 8008a1c:	42a6      	cmp	r6, r4
 8008a1e:	d109      	bne.n	8008a34 <__libc_init_array+0x24>
 8008a20:	2600      	movs	r6, #0
 8008a22:	f000 f877 	bl	8008b14 <_init>
 8008a26:	4c0a      	ldr	r4, [pc, #40]	@ (8008a50 <__libc_init_array+0x40>)
 8008a28:	4d0a      	ldr	r5, [pc, #40]	@ (8008a54 <__libc_init_array+0x44>)
 8008a2a:	1b64      	subs	r4, r4, r5
 8008a2c:	10a4      	asrs	r4, r4, #2
 8008a2e:	42a6      	cmp	r6, r4
 8008a30:	d105      	bne.n	8008a3e <__libc_init_array+0x2e>
 8008a32:	bd70      	pop	{r4, r5, r6, pc}
 8008a34:	00b3      	lsls	r3, r6, #2
 8008a36:	58eb      	ldr	r3, [r5, r3]
 8008a38:	4798      	blx	r3
 8008a3a:	3601      	adds	r6, #1
 8008a3c:	e7ee      	b.n	8008a1c <__libc_init_array+0xc>
 8008a3e:	00b3      	lsls	r3, r6, #2
 8008a40:	58eb      	ldr	r3, [r5, r3]
 8008a42:	4798      	blx	r3
 8008a44:	3601      	adds	r6, #1
 8008a46:	e7f2      	b.n	8008a2e <__libc_init_array+0x1e>
 8008a48:	08008e44 	.word	0x08008e44
 8008a4c:	08008e44 	.word	0x08008e44
 8008a50:	08008e48 	.word	0x08008e48
 8008a54:	08008e44 	.word	0x08008e44

08008a58 <__retarget_lock_acquire_recursive>:
 8008a58:	4770      	bx	lr

08008a5a <__retarget_lock_release_recursive>:
 8008a5a:	4770      	bx	lr

08008a5c <memcpy>:
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	b510      	push	{r4, lr}
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d100      	bne.n	8008a66 <memcpy+0xa>
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	5ccc      	ldrb	r4, [r1, r3]
 8008a68:	54c4      	strb	r4, [r0, r3]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	e7f8      	b.n	8008a60 <memcpy+0x4>
	...

08008a70 <_free_r>:
 8008a70:	b570      	push	{r4, r5, r6, lr}
 8008a72:	0005      	movs	r5, r0
 8008a74:	1e0c      	subs	r4, r1, #0
 8008a76:	d010      	beq.n	8008a9a <_free_r+0x2a>
 8008a78:	3c04      	subs	r4, #4
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	da00      	bge.n	8008a82 <_free_r+0x12>
 8008a80:	18e4      	adds	r4, r4, r3
 8008a82:	0028      	movs	r0, r5
 8008a84:	f7ff ff5a 	bl	800893c <__malloc_lock>
 8008a88:	4a1d      	ldr	r2, [pc, #116]	@ (8008b00 <_free_r+0x90>)
 8008a8a:	6813      	ldr	r3, [r2, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d105      	bne.n	8008a9c <_free_r+0x2c>
 8008a90:	6063      	str	r3, [r4, #4]
 8008a92:	6014      	str	r4, [r2, #0]
 8008a94:	0028      	movs	r0, r5
 8008a96:	f7ff ff59 	bl	800894c <__malloc_unlock>
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d908      	bls.n	8008ab2 <_free_r+0x42>
 8008aa0:	6820      	ldr	r0, [r4, #0]
 8008aa2:	1821      	adds	r1, r4, r0
 8008aa4:	428b      	cmp	r3, r1
 8008aa6:	d1f3      	bne.n	8008a90 <_free_r+0x20>
 8008aa8:	6819      	ldr	r1, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	1809      	adds	r1, r1, r0
 8008aae:	6021      	str	r1, [r4, #0]
 8008ab0:	e7ee      	b.n	8008a90 <_free_r+0x20>
 8008ab2:	001a      	movs	r2, r3
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <_free_r+0x4e>
 8008aba:	42a3      	cmp	r3, r4
 8008abc:	d9f9      	bls.n	8008ab2 <_free_r+0x42>
 8008abe:	6811      	ldr	r1, [r2, #0]
 8008ac0:	1850      	adds	r0, r2, r1
 8008ac2:	42a0      	cmp	r0, r4
 8008ac4:	d10b      	bne.n	8008ade <_free_r+0x6e>
 8008ac6:	6820      	ldr	r0, [r4, #0]
 8008ac8:	1809      	adds	r1, r1, r0
 8008aca:	1850      	adds	r0, r2, r1
 8008acc:	6011      	str	r1, [r2, #0]
 8008ace:	4283      	cmp	r3, r0
 8008ad0:	d1e0      	bne.n	8008a94 <_free_r+0x24>
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	1841      	adds	r1, r0, r1
 8008ad8:	6011      	str	r1, [r2, #0]
 8008ada:	6053      	str	r3, [r2, #4]
 8008adc:	e7da      	b.n	8008a94 <_free_r+0x24>
 8008ade:	42a0      	cmp	r0, r4
 8008ae0:	d902      	bls.n	8008ae8 <_free_r+0x78>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	602b      	str	r3, [r5, #0]
 8008ae6:	e7d5      	b.n	8008a94 <_free_r+0x24>
 8008ae8:	6820      	ldr	r0, [r4, #0]
 8008aea:	1821      	adds	r1, r4, r0
 8008aec:	428b      	cmp	r3, r1
 8008aee:	d103      	bne.n	8008af8 <_free_r+0x88>
 8008af0:	6819      	ldr	r1, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	1809      	adds	r1, r1, r0
 8008af6:	6021      	str	r1, [r4, #0]
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	6054      	str	r4, [r2, #4]
 8008afc:	e7ca      	b.n	8008a94 <_free_r+0x24>
 8008afe:	46c0      	nop			@ (mov r8, r8)
 8008b00:	20001330 	.word	0x20001330

08008b04 <_malloc_usable_size_r>:
 8008b04:	1f0b      	subs	r3, r1, #4
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	1f18      	subs	r0, r3, #4
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	da01      	bge.n	8008b12 <_malloc_usable_size_r+0xe>
 8008b0e:	580b      	ldr	r3, [r1, r0]
 8008b10:	18c0      	adds	r0, r0, r3
 8008b12:	4770      	bx	lr

08008b14 <_init>:
 8008b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b16:	46c0      	nop			@ (mov r8, r8)
 8008b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1a:	bc08      	pop	{r3}
 8008b1c:	469e      	mov	lr, r3
 8008b1e:	4770      	bx	lr

08008b20 <_fini>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	46c0      	nop			@ (mov r8, r8)
 8008b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b26:	bc08      	pop	{r3}
 8008b28:	469e      	mov	lr, r3
 8008b2a:	4770      	bx	lr
